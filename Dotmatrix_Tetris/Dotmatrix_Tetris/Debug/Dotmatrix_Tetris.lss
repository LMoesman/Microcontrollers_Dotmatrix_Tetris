
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000056  00800100  00000a36  00000aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800156  00800156  00000b20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000171e  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c43  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ce  00000000  00000000  00003025  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  000041f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a62d  00000000  00000000  000045c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd1  00000000  00000000  0000ebed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000f8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000304d  00000000  00000000  0000fa0e  2**0
=======
  0 .data         0000005e  00800100  0000088c  00000920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080015e  0080015e  0000097e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016d6  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2b  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d9  00000000  00000000  00002e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a2aa  00000000  00000000  00004234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8f  00000000  00000000  0000e4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000f06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002fdb  00000000  00000000  0000f1ad  2**0
>>>>>>> Readability
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	be c1       	rjmp	.+892    	; 0x38a <__vector_3>
   e:	00 00       	nop
  10:	0f c2       	rjmp	.+1054   	; 0x430 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	fa e0       	ldi	r31, 0x0A	; 10
=======
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f8 e0       	ldi	r31, 0x08	; 8
>>>>>>> Readability
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 35       	cpi	r26, 0x5E	; 94
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e5       	ldi	r26, 0x5E	; 94
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
<<<<<<< HEAD
  bc:	a2 36       	cpi	r26, 0x62	; 98
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	15 d3       	rcall	.+1578   	; 0x6ee <main>
  c4:	b6 c4       	rjmp	.+2412   	; 0xa32 <_exit>
=======
  bc:	a8 36       	cpi	r26, 0x68	; 104
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	56 d2       	rcall	.+1196   	; 0x570 <main>
  c4:	e1 c3       	rjmp	.+1986   	; 0x888 <_exit>
>>>>>>> Readability

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
  fa:	08 95       	ret

000000fc <drawArray>:
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	e6 df       	rcall	.-52     	; 0xd4 <twi_start>
 108:	80 ee       	ldi	r24, 0xE0	; 224
 10a:	ed df       	rcall	.-38     	; 0xe6 <twi_tx>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	eb df       	rcall	.-42     	; 0xe6 <twi_tx>
 110:	e8 01       	movw	r28, r16
 112:	08 5f       	subi	r16, 0xF8	; 248
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	89 91       	ld	r24, Y+
 118:	80 fb       	bst	r24, 0
 11a:	87 95       	ror	r24
 11c:	87 f9       	bld	r24, 7
 11e:	e3 df       	rcall	.-58     	; 0xe6 <twi_tx>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e1 df       	rcall	.-62     	; 0xe6 <twi_tx>
 124:	c0 17       	cp	r28, r16
 126:	d1 07       	cpc	r29, r17
 128:	b1 f7       	brne	.-20     	; 0x116 <drawArray+0x1a>
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <displayInitHT16K33>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	08 2f       	mov	r16, r24
 144:	c7 df       	rcall	.-114    	; 0xd4 <twi_start>
 146:	80 2f       	mov	r24, r16
 148:	ce df       	rcall	.-100    	; 0xe6 <twi_tx>
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	cc df       	rcall	.-104    	; 0xe6 <twi_tx>
 14e:	c4 e7       	ldi	r28, 0x74	; 116
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	14 e9       	ldi	r17, 0x94	; 148
 154:	18 83       	st	Y, r17
 156:	be df       	rcall	.-132    	; 0xd4 <twi_start>
 158:	80 2f       	mov	r24, r16
 15a:	c5 df       	rcall	.-118    	; 0xe6 <twi_tx>
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	c3 df       	rcall	.-122    	; 0xe6 <twi_tx>
 160:	18 83       	st	Y, r17
 162:	b8 df       	rcall	.-144    	; 0xd4 <twi_start>
 164:	80 2f       	mov	r24, r16
 166:	bf df       	rcall	.-130    	; 0xe6 <twi_tx>
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	bd df       	rcall	.-134    	; 0xe6 <twi_tx>
 16c:	18 83       	st	Y, r17
 16e:	b2 df       	rcall	.-156    	; 0xd4 <twi_start>
 170:	80 2f       	mov	r24, r16
 172:	b9 df       	rcall	.-142    	; 0xe6 <twi_tx>
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	b7 df       	rcall	.-146    	; 0xe6 <twi_tx>
 178:	18 83       	st	Y, r17
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <displayInit>:
 184:	a1 df       	rcall	.-190    	; 0xc8 <twi_init>
 186:	80 ee       	ldi	r24, 0xE0	; 224
 188:	d8 cf       	rjmp	.-80     	; 0x13a <displayInitHT16K33>
 18a:	08 95       	ret

0000018c <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 18c:	18 16       	cp	r1, r24
 18e:	19 06       	cpc	r1, r25
 190:	6c f4       	brge	.+26     	; 0x1ac <wait+0x20>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	e9 ef       	ldi	r30, 0xF9	; 249
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <wait+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <wait+0x14>
 1a0:	00 00       	nop
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	a9 f7       	brne	.-22     	; 0x196 <wait+0xa>
 1ac:	08 95       	ret

000001ae <theCoolFullRowAnimation>:
		twi_tx( 0x00);
	}
	twi_stop();
}

void theCoolFullRowAnimation(int row){
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	for( uint8_t idy = 0; idy < 9; idy++ ) {
		
		//low row
		twi_start();
		twi_tx(D0_I2C_ADDR);
		twi_tx(row * 2);	//skip uneven number because those are for 8*16
 1c6:	98 2e       	mov	r9, r24
 1c8:	99 0c       	add	r9, r9
		twi_stop();
		
		//high row
		twi_start();
		twi_tx(D0_I2C_ADDR);
		twi_tx((row-1) * 2);	//skip uneven number because those are for 8*16
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	88 2e       	mov	r8, r24
 1ce:	88 0c       	add	r8, r8
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
	}
	twi_stop();
}

void theCoolFullRowAnimation(int row){
	uint8_t value = 0;
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
		twi_tx(D0_I2C_ADDR);
		twi_tx(row * 2);	//skip uneven number because those are for 8*16
		uint8_t a = ~value;
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		value |= 128 >> idy;
 1d6:	68 94       	set
 1d8:	aa 24       	eor	r10, r10
 1da:	a7 f8       	bld	r10, 7
 1dc:	b1 2c       	mov	r11, r1
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1de:	0f 2e       	mov	r0, r31
 1e0:	f4 e7       	ldi	r31, 0x74	; 116
 1e2:	cf 2e       	mov	r12, r31
 1e4:	d1 2c       	mov	r13, r1
 1e6:	f0 2d       	mov	r31, r0
 1e8:	d4 e9       	ldi	r29, 0x94	; 148
void theCoolFullRowAnimation(int row){
	uint8_t value = 0;
	for( uint8_t idy = 0; idy < 9; idy++ ) {
		
		//low row
		twi_start();
 1ea:	74 df       	rcall	.-280    	; 0xd4 <twi_start>
		twi_tx(D0_I2C_ADDR);
 1ec:	80 ee       	ldi	r24, 0xE0	; 224
 1ee:	7b df       	rcall	.-266    	; 0xe6 <twi_tx>
		twi_tx(row * 2);	//skip uneven number because those are for 8*16
 1f0:	89 2d       	mov	r24, r9
 1f2:	79 df       	rcall	.-270    	; 0xe6 <twi_tx>
 1f4:	8c 2f       	mov	r24, r28
		uint8_t a = ~value;
 1f6:	80 95       	com	r24
 1f8:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 1fa:	87 95       	ror	r24
 1fc:	87 f9       	bld	r24, 7
 1fe:	73 df       	rcall	.-282    	; 0xe6 <twi_tx>
 200:	75 01       	movw	r14, r10
		value |= 128 >> idy;
 202:	00 2e       	mov	r0, r16
 204:	02 c0       	rjmp	.+4      	; 0x20a <theCoolFullRowAnimation+0x5c>
 206:	f5 94       	asr	r15
 208:	e7 94       	ror	r14
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <theCoolFullRowAnimation+0x58>
 20e:	ce 29       	or	r28, r14
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 210:	f6 01       	movw	r30, r12
		twi_tx( data);
		value |= 128 >> idy;
		twi_stop();
		
		//high row
		twi_start();
 212:	d0 83       	st	Z, r29
		twi_tx(D0_I2C_ADDR);
 214:	5f df       	rcall	.-322    	; 0xd4 <twi_start>
 216:	80 ee       	ldi	r24, 0xE0	; 224
 218:	66 df       	rcall	.-308    	; 0xe6 <twi_tx>
		twi_tx((row-1) * 2);	//skip uneven number because those are for 8*16
 21a:	88 2d       	mov	r24, r8
 21c:	64 df       	rcall	.-312    	; 0xe6 <twi_tx>
		a = ~value;
 21e:	8c 2f       	mov	r24, r28
 220:	80 95       	com	r24
		data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 222:	80 fb       	bst	r24, 0
 224:	87 95       	ror	r24
 226:	87 f9       	bld	r24, 7
 228:	5e df       	rcall	.-324    	; 0xe6 <twi_tx>
		value |= 128 >> idy;
 22a:	ce 29       	or	r28, r14
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 22c:	f6 01       	movw	r30, r12
 22e:	d0 83       	st	Z, r29
		a = ~value;
		data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		value |= 128 >> idy;
		twi_stop();
		wait(333);
 230:	8d e4       	ldi	r24, 0x4D	; 77
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	ab df       	rcall	.-170    	; 0x18c <wait>
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	09 30       	cpi	r16, 0x09	; 9
	twi_stop();
}

void theCoolFullRowAnimation(int row){
	uint8_t value = 0;
	for( uint8_t idy = 0; idy < 9; idy++ ) {
 23c:	11 05       	cpc	r17, r1
 23e:	a9 f6       	brne	.-86     	; 0x1ea <theCoolFullRowAnimation+0x3c>
 240:	df 91       	pop	r29
		value |= 128 >> idy;
		twi_stop();
		wait(333);
	}
	
}
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	08 95       	ret

0000025a <setupDisplayArray>:
 25a:	7f 92       	push	r7
int score = 0;
int shouldReset = 0;

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
 25c:	8f 92       	push	r8
 25e:	9f 92       	push	r9
 260:	af 92       	push	r10
 262:	bf 92       	push	r11
 264:	cf 92       	push	r12
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	04 e0       	ldi	r16, 0x04	; 4
 276:	11 e0       	ldi	r17, 0x01	; 1
 278:	4c 01       	movw	r8, r24
	int row;
	for(row = 0; row < 8; row++) {
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 27e:	0f 2e       	mov	r0, r31
<<<<<<< HEAD
 280:	fc e5       	ldi	r31, 0x5C	; 92
=======
 280:	f2 e6       	ldi	r31, 0x62	; 98
>>>>>>> Readability
 282:	af 2e       	mov	r10, r31
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	bf 2e       	mov	r11, r31
 288:	f0 2d       	mov	r31, r0
				if(col == blockLocation.column || col == blockLocation.column + 1) {
					tempRow = tempRow | (128 >> col);
 28a:	68 94       	set
 28c:	cc 24       	eor	r12, r12
 28e:	c7 f8       	bld	r12, 7
 290:	d1 2c       	mov	r13, r1

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
 292:	f8 01       	movw	r30, r16
 294:	77 80       	ldd	r7, Z+7	; 0x07
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 296:	f5 01       	movw	r30, r10
 298:	60 81       	ld	r22, Z
 29a:	71 81       	ldd	r23, Z+1	; 0x01
 29c:	db 01       	movw	r26, r22
 29e:	11 97       	sbiw	r26, 0x01	; 1
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 2a0:	c2 81       	ldd	r28, Z+2	; 0x02
 2a2:	d3 81       	ldd	r29, Z+3	; 0x03
 2a4:	7e 01       	movw	r14, r28
 2a6:	ff ef       	ldi	r31, 0xFF	; 255
 2a8:	ef 1a       	sub	r14, r31
 2aa:	ff 0a       	sbc	r15, r31
 2ac:	08 5f       	subi	r16, 0xF8	; 248
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	f8 01       	movw	r30, r16
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 2b6:	64 17       	cp	r22, r20
 2b8:	75 07       	cpc	r23, r21
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <setupDisplayArray+0x68>
 2bc:	a4 17       	cp	r26, r20
 2be:	b5 07       	cpc	r27, r21
 2c0:	71 f4       	brne	.+28     	; 0x2de <setupDisplayArray+0x84>
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 2c2:	c2 17       	cp	r28, r18
 2c4:	d3 07       	cpc	r29, r19
 2c6:	19 f0       	breq	.+6      	; 0x2ce <setupDisplayArray+0x74>
 2c8:	e2 16       	cp	r14, r18
 2ca:	f3 06       	cpc	r15, r19
 2cc:	41 f4       	brne	.+16     	; 0x2de <setupDisplayArray+0x84>
					tempRow = tempRow | (128 >> col);
 2ce:	c6 01       	movw	r24, r12
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <setupDisplayArray+0x7e>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <setupDisplayArray+0x7a>
 2dc:	78 2a       	or	r7, r24
				}
			}
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
 2de:	82 91       	ld	r24, -Z
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <setupDisplayArray+0x90>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <setupDisplayArray+0x8c>
 2ee:	78 2a       	or	r7, r24
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	28 30       	cpi	r18, 0x08	; 8
 2f6:	31 05       	cpc	r19, r1
 2f8:	f1 f6       	brne	.-68     	; 0x2b6 <setupDisplayArray+0x5c>
				}
			}
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
 2fa:	f4 01       	movw	r30, r8
 2fc:	71 92       	st	Z+, r7
 2fe:	4f 01       	movw	r8, r30

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
 300:	4f 5f       	subi	r20, 0xFF	; 255
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	48 30       	cpi	r20, 0x08	; 8
 306:	51 05       	cpc	r21, r1
 308:	21 f6       	brne	.-120    	; 0x292 <setupDisplayArray+0x38>
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
	}
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	bf 90       	pop	r11
 31c:	af 90       	pop	r10
 31e:	9f 90       	pop	r9
 320:	8f 90       	pop	r8
 322:	7f 90       	pop	r7
 324:	08 95       	ret

00000326 <resetGame>:
		showDigit(9999);
	}
	i = rand() % 7;
}

void resetGame(){
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	60 97       	sbiw	r28, 0x10	; 16
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
	showDigit(0);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	71 d2       	rcall	.+1250   	; 0x822 <showDigit>
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	64 e4       	ldi	r22, 0x44	; 68
 346:	71 e0       	ldi	r23, 0x01	; 1
	int row;
	for (row = 0;row < 8;row++) {
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
 348:	30 e1       	ldi	r19, 0x10	; 16
 34a:	ae 01       	movw	r20, r28
 34c:	4f 5f       	subi	r20, 0xFF	; 255
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	fa 01       	movw	r30, r20
 352:	23 2f       	mov	r18, r19
 354:	11 92       	st	Z+, r1
 356:	2a 95       	dec	r18
 358:	e9 f7       	brne	.-6      	; 0x354 <resetGame+0x2e>
 35a:	28 e0       	ldi	r18, 0x08	; 8
 35c:	fa 01       	movw	r30, r20
 35e:	dc 01       	movw	r26, r24
 360:	01 90       	ld	r0, Z+
 362:	0d 92       	st	X+, r0
 364:	2a 95       	dec	r18
 366:	e1 f7       	brne	.-8      	; 0x360 <resetGame+0x3a>
 368:	08 96       	adiw	r24, 0x08	; 8
}

void resetGame(){
	showDigit(0);
	int row;
	for (row = 0;row < 8;row++) {
 36a:	86 17       	cp	r24, r22
 36c:	97 07       	cpc	r25, r23
 36e:	81 f7       	brne	.-32     	; 0x350 <resetGame+0x2a>
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
	}
	shouldReset = 0;
 370:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__data_end+0x1>
 374:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
}
 378:	60 96       	adiw	r28, 0x10	; 16
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <__vector_3>:
	
	checkForFullRows();
}

/******************************************************************/
ISR(INT2_vect) {
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	0b b6       	in	r0, 0x3b	; 59
 396:	0f 92       	push	r0
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	outputs:
	notes:			Moves block to the left if no collision occurred
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	if((PIND & 0x0C) == 0x0C){
 3a6:	80 b3       	in	r24, 0x10	; 16
 3a8:	8c 70       	andi	r24, 0x0C	; 12
 3aa:	8c 30       	cpi	r24, 0x0C	; 12
 3ac:	39 f4       	brne	.+14     	; 0x3bc <__vector_3+0x32>
		shouldReset = 1;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
 3b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
		return;
 3ba:	2c c0       	rjmp	.+88     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	}
	if(blockLocation.column > 0){
 3bc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <blockLocation+0x2>
 3c0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <blockLocation+0x3>
 3c4:	18 16       	cp	r1, r24
 3c6:	19 06       	cpc	r1, r25
 3c8:	2c f5       	brge	.+74     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		if(display_array[blockLocation.row][blockLocation.column-1] == 0 &&
 3ca:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <blockLocation>
 3ce:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <blockLocation+0x1>
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f9 01       	movw	r30, r18
 3d6:	ee 0f       	add	r30, r30
 3d8:	ff 1f       	adc	r31, r31
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ec 5f       	subi	r30, 0xFC	; 252
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	e8 0f       	add	r30, r24
 3e8:	f9 1f       	adc	r31, r25
 3ea:	40 81       	ld	r20, Z
 3ec:	41 11       	cpse	r20, r1
 3ee:	12 c0       	rjmp	.+36     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		   display_array[blockLocation.row - 1][blockLocation.column-1] == 0) {
 3f0:	f9 01       	movw	r30, r18
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	e4 50       	subi	r30, 0x04	; 4
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	e8 0f       	add	r30, r24
 404:	f9 1f       	adc	r31, r25
	if((PIND & 0x0C) == 0x0C){
		shouldReset = 1;
		return;
	}
	if(blockLocation.column > 0){
		if(display_array[blockLocation.row][blockLocation.column-1] == 0 &&
 406:	20 81       	ld	r18, Z
 408:	21 11       	cpse	r18, r1
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		   display_array[blockLocation.row - 1][blockLocation.column-1] == 0) {
				blockLocation.column--;
 40c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <blockLocation+0x3>
 410:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <blockLocation+0x2>
		}
	}
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0b be       	out	0x3b, r0	; 59
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_4>:

/******************************************************************/
ISR(INT3_vect) {
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	0b b6       	in	r0, 0x3b	; 59
 43c:	0f 92       	push	r0
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
	outputs:
	notes:			Moves block to the right if no collision occurred
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	if((PIND & 0x0C) == 0x0C){
 450:	80 b3       	in	r24, 0x10	; 16
 452:	8c 70       	andi	r24, 0x0C	; 12
 454:	8c 30       	cpi	r24, 0x0C	; 12
 456:	39 f4       	brne	.+14     	; 0x466 <__vector_4+0x36>
		shouldReset = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
 460:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
		return;
 464:	2f c0       	rjmp	.+94     	; 0x4c4 <__vector_4+0x94>
	}
	if(blockLocation.column < 6){
 466:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <blockLocation+0x2>
 46a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <blockLocation+0x3>
 46e:	86 30       	cpi	r24, 0x06	; 6
 470:	91 05       	cpc	r25, r1
 472:	44 f5       	brge	.+80     	; 0x4c4 <__vector_4+0x94>
		if(display_array[blockLocation.row][blockLocation.column+2] == 0 &&
 474:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <blockLocation>
 478:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <blockLocation+0x1>
 47c:	ac 01       	movw	r20, r24
 47e:	4e 5f       	subi	r20, 0xFE	; 254
 480:	5f 4f       	sbci	r21, 0xFF	; 255
 482:	f9 01       	movw	r30, r18
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	ec 5f       	subi	r30, 0xFC	; 252
 492:	fe 4f       	sbci	r31, 0xFE	; 254
 494:	e4 0f       	add	r30, r20
 496:	f5 1f       	adc	r31, r21
 498:	60 81       	ld	r22, Z
 49a:	61 11       	cpse	r22, r1
 49c:	13 c0       	rjmp	.+38     	; 0x4c4 <__vector_4+0x94>
		display_array[blockLocation.row - 1][blockLocation.column+2] == 0) {
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	24 50       	subi	r18, 0x04	; 4
 4ac:	3f 4f       	sbci	r19, 0xFF	; 255
 4ae:	f9 01       	movw	r30, r18
 4b0:	e4 0f       	add	r30, r20
 4b2:	f5 1f       	adc	r31, r21
	if((PIND & 0x0C) == 0x0C){
		shouldReset = 1;
		return;
	}
	if(blockLocation.column < 6){
		if(display_array[blockLocation.row][blockLocation.column+2] == 0 &&
 4b4:	20 81       	ld	r18, Z
 4b6:	21 11       	cpse	r18, r1
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__vector_4+0x94>
		display_array[blockLocation.row - 1][blockLocation.column+2] == 0) {
			blockLocation.column++;
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <blockLocation+0x3>
 4c0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <blockLocation+0x2>
		}
	}
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0b be       	out	0x3b, r0	; 59
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <shoveDown>:
score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
<<<<<<< HEAD
 4e4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <i+0x1>
 4e8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <i>
 4ec:	9c 01       	movw	r18, r24
 4ee:	22 50       	subi	r18, 0x02	; 2
 4f0:	31 09       	sbc	r19, r1
 4f2:	fa f0       	brmi	.+62     	; 0x532 <shoveDown+0x4e>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	8c 5f       	subi	r24, 0xFC	; 252
 502:	9e 4f       	sbci	r25, 0xFE	; 254
=======
 326:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <i+0x1>
 32a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <i>
 32e:	9c 01       	movw	r18, r24
 330:	22 50       	subi	r18, 0x02	; 2
 332:	31 09       	sbc	r19, r1
 334:	fa f0       	brmi	.+62     	; 0x374 <shoveDown+0x4e>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	8c 5f       	subi	r24, 0xFC	; 252
 344:	9e 4f       	sbci	r25, 0xFE	; 254
>>>>>>> Readability
		int rowToShove = x - 2;
		memcpy(display_array[x],display_array[rowToShove],sizeof(unsigned char) * 8);	//cpy the upper row to this row
 504:	ac 01       	movw	r20, r24
 506:	40 51       	subi	r20, 0x10	; 16
 508:	51 09       	sbc	r21, r1
 50a:	68 e0       	ldi	r22, 0x08	; 8
 50c:	fa 01       	movw	r30, r20
 50e:	dc 01       	movw	r26, r24
 510:	01 90       	ld	r0, Z+
 512:	0d 92       	st	X+, r0
 514:	6a 95       	dec	r22
 516:	e1 f7       	brne	.-8      	; 0x510 <shoveDown+0x2c>
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
 518:	dc 01       	movw	r26, r24
 51a:	18 97       	sbiw	r26, 0x08	; 8
 51c:	fc 01       	movw	r30, r24
 51e:	78 97       	sbiw	r30, 0x18	; 24
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	01 90       	ld	r0, Z+
 524:	0d 92       	st	X+, r0
 526:	8a 95       	dec	r24
 528:	e1 f7       	brne	.-8      	; 0x522 <shoveDown+0x3e>
score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 52a:	22 50       	subi	r18, 0x02	; 2
 52c:	31 09       	sbc	r19, r1
 52e:	ca 01       	movw	r24, r20
 530:	4a f7       	brpl	.-46     	; 0x504 <shoveDown+0x20>
 532:	08 95       	ret

00000534 <checkForFullRows>:
		}
	}
	return 1;
}

void checkForFullRows(void){
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	e4 e0       	ldi	r30, 0x04	; 4
 542:	f1 e0       	ldi	r31, 0x01	; 1
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 544:	00 e0       	ldi	r16, 0x00	; 0
 546:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 1;
}

void checkForFullRows(void){
	int tempscore = 0;
 548:	e1 2c       	mov	r14, r1
 54a:	f1 2c       	mov	r15, r1
 54c:	1d c0       	rjmp	.+58     	; 0x588 <checkForFullRows+0x54>
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
 54e:	91 91       	ld	r25, Z+
 550:	91 30       	cpi	r25, 0x01	; 1
 552:	39 f4       	brne	.+14     	; 0x562 <checkForFullRows+0x2e>
 554:	df 01       	movw	r26, r30
 556:	19 97       	sbiw	r26, 0x09	; 9
 558:	9c 91       	ld	r25, X
 55a:	91 30       	cpi	r25, 0x01	; 1
 55c:	11 f4       	brne	.+4      	; 0x562 <checkForFullRows+0x2e>
 55e:	2f 5f       	subi	r18, 0xFF	; 255
 560:	3f 4f       	sbci	r19, 0xFF	; 255
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
 562:	ec 17       	cp	r30, r28
 564:	fd 07       	cpc	r31, r29
 566:	99 f7       	brne	.-26     	; 0x54e <checkForFullRows+0x1a>
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
		}
		if(8 == count){	//whole row filled
 568:	28 30       	cpi	r18, 0x08	; 8
 56a:	31 05       	cpc	r19, r1
 56c:	39 f4       	brne	.+14     	; 0x57c <checkForFullRows+0x48>
			tempscore += 10;
 56e:	8a e0       	ldi	r24, 0x0A	; 10
 570:	e8 0e       	add	r14, r24
 572:	f1 1c       	adc	r15, r1
			theCoolFullRowAnimation(x);
 574:	c8 01       	movw	r24, r16
 576:	1b de       	rcall	.-970    	; 0x1ae <theCoolFullRowAnimation>
			shoveDown(x);
 578:	c8 01       	movw	r24, r16
 57a:	b4 df       	rcall	.-152    	; 0x4e4 <shoveDown>
}

void checkForFullRows(void){
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 57c:	0f 5f       	subi	r16, 0xFF	; 255
 57e:	1f 4f       	sbci	r17, 0xFF	; 255
 580:	fe 01       	movw	r30, r28
 582:	08 30       	cpi	r16, 0x08	; 8
 584:	11 05       	cpc	r17, r1
 586:	29 f0       	breq	.+10     	; 0x592 <checkForFullRows+0x5e>
 588:	ef 01       	movw	r28, r30
 58a:	28 96       	adiw	r28, 0x08	; 8
		}
	}
	return 1;
}

void checkForFullRows(void){
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	de cf       	rjmp	.-68     	; 0x54e <checkForFullRows+0x1a>
			tempscore += 10;
			theCoolFullRowAnimation(x);
			shoveDown(x);
		}
	}
score += tempscore;
<<<<<<< HEAD
 592:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <score>
 596:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <score+0x1>
 59a:	8e 0d       	add	r24, r14
 59c:	9f 1d       	adc	r25, r15
 59e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <score+0x1>
 5a2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <score>
	showDigit(score);
 5a6:	3d d1       	rcall	.+634    	; 0x822 <showDigit>
=======
 3d4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
 3d8:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
 3dc:	8e 0d       	add	r24, r14
 3de:	9f 1d       	adc	r25, r15
 3e0:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
 3e4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
	showDigit(score);
 3e8:	47 d1       	rcall	.+654    	; 0x678 <showDigit>
>>>>>>> Readability
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	08 95       	ret

000005b6 <animateGame>:
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
	}
	shouldReset = 0;
}

void animateGame() {
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	28 97       	sbiw	r28, 0x08	; 8
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
<<<<<<< HEAD
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 &&
 5ce:	0c e5       	ldi	r16, 0x5C	; 92
 5d0:	11 e0       	ldi	r17, 0x01	; 1
=======
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 && display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 410:	02 e6       	ldi	r16, 0x62	; 98
 412:	11 e0       	ldi	r17, 0x01	; 1
>>>>>>> Readability
}

void animateGame() {
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	41 de       	rcall	.-894    	; 0x25a <setupDisplayArray>
		drawArray(displayBuffer);
 5d8:	ce 01       	movw	r24, r28
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	8f dd       	rcall	.-1250   	; 0xfc <drawArray>
		wait(2000);
 5de:	80 ed       	ldi	r24, 0xD0	; 208
 5e0:	97 e0       	ldi	r25, 0x07	; 7
 5e2:	d4 dd       	rcall	.-1112   	; 0x18c <wait>
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 &&
 5e4:	f8 01       	movw	r30, r16
 5e6:	40 81       	ld	r20, Z
 5e8:	51 81       	ldd	r21, Z+1	; 0x01
 5ea:	ca 01       	movw	r24, r20
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	22 81       	ldd	r18, Z+2	; 0x02
 5f0:	33 81       	ldd	r19, Z+3	; 0x03
 5f2:	fc 01       	movw	r30, r24
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	ec 5f       	subi	r30, 0xFC	; 252
 602:	fe 4f       	sbci	r31, 0xFE	; 254
 604:	e2 0f       	add	r30, r18
 606:	f3 1f       	adc	r31, r19
 608:	60 81       	ld	r22, Z
 60a:	61 30       	cpi	r22, 0x01	; 1
 60c:	91 f0       	breq	.+36     	; 0x632 <animateGame+0x7c>
			 display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 60e:	fc 01       	movw	r30, r24
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	ee 0f       	add	r30, r30
 61a:	ff 1f       	adc	r31, r31
 61c:	ec 5f       	subi	r30, 0xFC	; 252
 61e:	fe 4f       	sbci	r31, 0xFE	; 254
 620:	e2 0f       	add	r30, r18
 622:	f3 1f       	adc	r31, r19
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 &&
 624:	61 81       	ldd	r22, Z+1	; 0x01
 626:	61 30       	cpi	r22, 0x01	; 1
 628:	21 f0       	breq	.+8      	; 0x632 <animateGame+0x7c>
			 display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
				blockLocation.row++;
 62a:	f8 01       	movw	r30, r16
 62c:	91 83       	std	Z+1, r25	; 0x01
 62e:	80 83       	st	Z, r24
		 }else {
			 break;
		 }
		
	}
 630:	d0 cf       	rjmp	.-96     	; 0x5d2 <animateGame+0x1c>
	display_array[blockLocation.row][blockLocation.column] = 1;
 632:	ca 01       	movw	r24, r20
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	8c 5f       	subi	r24, 0xFC	; 252
 642:	9e 4f       	sbci	r25, 0xFE	; 254
 644:	fc 01       	movw	r30, r24
 646:	e2 0f       	add	r30, r18
 648:	f3 1f       	adc	r31, r19
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column] = 1;
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	44 50       	subi	r20, 0x04	; 4
 65c:	5f 4f       	sbci	r21, 0xFF	; 255
 65e:	fa 01       	movw	r30, r20
 660:	e2 0f       	add	r30, r18
 662:	f3 1f       	adc	r31, r19
 664:	60 83       	st	Z, r22
	display_array[blockLocation.row][blockLocation.column + 1] = 1;
 666:	2f 5f       	subi	r18, 0xFF	; 255
 668:	3f 4f       	sbci	r19, 0xFF	; 255
 66a:	fc 01       	movw	r30, r24
 66c:	e2 0f       	add	r30, r18
 66e:	f3 1f       	adc	r31, r19
 670:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column + 1] = 1;
 672:	fa 01       	movw	r30, r20
 674:	e2 0f       	add	r30, r18
 676:	f3 1f       	adc	r31, r19
 678:	60 83       	st	Z, r22
	blockLocation.isAnimating = 0;
<<<<<<< HEAD
 67a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <blockLocation+0x5>
 67e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <blockLocation+0x4>
=======
 4bc:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <blockLocation+0x5>
 4c0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <blockLocation+0x4>
>>>>>>> Readability
	
	checkForFullRows();
 682:	58 df       	rcall	.-336    	; 0x534 <checkForFullRows>
}
<<<<<<< HEAD
 684:	28 96       	adiw	r28, 0x08	; 8
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	08 95       	ret

0000069a <startGame>:
=======
 4c6:	28 96       	adiw	r28, 0x08	; 8
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	08 95       	ret

000004dc <gameOver>:
		memcpy(display_array[x],display_array[rowToShove],sizeof(unsigned char) * 8);	//cpy the upper row to this row
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
	}
}

void gameOver(){
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	28 97       	sbiw	r28, 0x08	; 8
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
	uint8_t deadFace[8] = {0b00000000,
 4f0:	88 e0       	ldi	r24, 0x08	; 8
 4f2:	ec e4       	ldi	r30, 0x4C	; 76
 4f4:	f1 e0       	ldi	r31, 0x01	; 1
 4f6:	de 01       	movw	r26, r28
 4f8:	11 96       	adiw	r26, 0x01	; 1
 4fa:	01 90       	ld	r0, Z+
 4fc:	0d 92       	st	X+, r0
 4fe:	8a 95       	dec	r24
 500:	e1 f7       	brne	.-8      	; 0x4fa <gameOver+0x1e>
					   0b10100101,
					   0b00000000,
					   0b00111100,
					   0b01000010,
					   0b01000010};
	drawArray(deadFace);
 502:	ce 01       	movw	r24, r28
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	fa dd       	rcall	.-1036   	; 0xfc <drawArray>
 508:	28 96       	adiw	r28, 0x08	; 8
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <startGame>:
>>>>>>> Readability
		}
		displayBuffer[row] = tempRow; 
	}
}
void startGame(){
	blockLocation.isAnimating = 1;
<<<<<<< HEAD
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <blockLocation+0x5>
 6a2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <blockLocation+0x4>
	if ((display_array[0][i] != 1) && (display_array[0][i+1] != 1)) { 
 6a6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <i>
 6aa:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <i+0x1>
 6ae:	fc 01       	movw	r30, r24
 6b0:	ec 5f       	subi	r30, 0xFC	; 252
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	20 81       	ld	r18, Z
 6b6:	21 30       	cpi	r18, 0x01	; 1
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <startGame+0x3c>
 6ba:	fc 01       	movw	r30, r24
 6bc:	ec 5f       	subi	r30, 0xFC	; 252
 6be:	fe 4f       	sbci	r31, 0xFE	; 254
 6c0:	21 81       	ldd	r18, Z+1	; 0x01
 6c2:	21 30       	cpi	r18, 0x01	; 1
 6c4:	41 f0       	breq	.+16     	; 0x6d6 <startGame+0x3c>
		blockLocation.row = 0;
 6c6:	ec e5       	ldi	r30, 0x5C	; 92
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	11 82       	std	Z+1, r1	; 0x01
 6cc:	10 82       	st	Z, r1
		blockLocation.column = i;
 6ce:	93 83       	std	Z+3, r25	; 0x03
 6d0:	82 83       	std	Z+2, r24	; 0x02
		animateGame();
 6d2:	71 df       	rcall	.-286    	; 0x5b6 <animateGame>
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <startGame+0x42>
=======
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <blockLocation+0x5>
 522:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <blockLocation+0x4>
	if ((display_array[0][i] != 1) && (display_array[0][i+1] != 1)) { 
 526:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <i>
 52a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <i+0x1>
 52e:	fc 01       	movw	r30, r24
 530:	ec 5f       	subi	r30, 0xFC	; 252
 532:	fe 4f       	sbci	r31, 0xFE	; 254
 534:	20 81       	ld	r18, Z
 536:	21 30       	cpi	r18, 0x01	; 1
 538:	71 f0       	breq	.+28     	; 0x556 <startGame+0x3c>
 53a:	fc 01       	movw	r30, r24
 53c:	ec 5f       	subi	r30, 0xFC	; 252
 53e:	fe 4f       	sbci	r31, 0xFE	; 254
 540:	21 81       	ldd	r18, Z+1	; 0x01
 542:	21 30       	cpi	r18, 0x01	; 1
 544:	41 f0       	breq	.+16     	; 0x556 <startGame+0x3c>
		blockLocation.row = 0;
 546:	e2 e6       	ldi	r30, 0x62	; 98
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	11 82       	std	Z+1, r1	; 0x01
 54c:	10 82       	st	Z, r1
		blockLocation.column = i;
 54e:	93 83       	std	Z+3, r25	; 0x03
 550:	82 83       	std	Z+2, r24	; 0x02
		animateGame();
 552:	52 df       	rcall	.-348    	; 0x3f8 <animateGame>
 554:	04 c0       	rjmp	.+8      	; 0x55e <startGame+0x44>
>>>>>>> Readability
	}else {
		//Game over
		gameOver();
 556:	c2 df       	rcall	.-124    	; 0x4dc <gameOver>
 558:	8f e0       	ldi	r24, 0x0F	; 15
		showDigit(9999);
<<<<<<< HEAD
 6d6:	8f e0       	ldi	r24, 0x0F	; 15
 6d8:	97 e2       	ldi	r25, 0x27	; 39
	}
	i = rand() % 7;
 6da:	a3 d0       	rcall	.+326    	; 0x822 <showDigit>
 6dc:	3f d1       	rcall	.+638    	; 0x95c <rand>
 6de:	67 e0       	ldi	r22, 0x07	; 7
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	ce d0       	rcall	.+412    	; 0x880 <__divmodhi4>
 6e4:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <i+0x1>
 6e8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <i>
 6ec:	08 95       	ret

000006ee <main>:
=======
 55a:	97 e2       	ldi	r25, 0x27	; 39
 55c:	8d d0       	rcall	.+282    	; 0x678 <showDigit>
	}
	i = rand() % 7;
 55e:	29 d1       	rcall	.+594    	; 0x7b2 <rand>
 560:	67 e0       	ldi	r22, 0x07	; 7
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	b8 d0       	rcall	.+368    	; 0x6d6 <__divmodhi4>
 566:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <i+0x1>
 56a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <i>
 56e:	08 95       	ret

00000570 <main>:
 570:	88 e2       	ldi	r24, 0x28	; 40
>>>>>>> Readability
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{	
	DDRD = 0x0C;
 6ee:	8c e0       	ldi	r24, 0x0C	; 12
 6f0:	81 bb       	out	0x11, r24	; 17
	
	EICRA |= 0xF0;
 6f2:	ea e6       	ldi	r30, 0x6A	; 106
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	80 6f       	ori	r24, 0xF0	; 240
 6fa:	80 83       	st	Z, r24
	EIMSK |= 0x0C;
 6fc:	89 b7       	in	r24, 0x39	; 57
 6fe:	8c 60       	ori	r24, 0x0C	; 12
 700:	89 bf       	out	0x39, r24	; 57
	
	sei();
 702:	78 94       	sei
	
	srand(2344);
<<<<<<< HEAD
 704:	88 e2       	ldi	r24, 0x28	; 40
 706:	99 e0       	ldi	r25, 0x09	; 9
 708:	2c d1       	rcall	.+600    	; 0x962 <srand>
	displayInit();
 70a:	3c dd       	rcall	.-1416   	; 0x184 <displayInit>
	sevenSegInit();
 70c:	b4 d0       	rcall	.+360    	; 0x876 <sevenSegInit>
 70e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <score>
	showDigit(score);
 712:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <score+0x1>
 716:	85 d0       	rcall	.+266    	; 0x822 <showDigit>
	wait(500);
 718:	84 ef       	ldi	r24, 0xF4	; 244
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	37 dd       	rcall	.-1426   	; 0x18c <wait>
 71e:	cc e5       	ldi	r28, 0x5C	; 92
=======
 572:	99 e0       	ldi	r25, 0x09	; 9
 574:	21 d1       	rcall	.+578    	; 0x7b8 <srand>
	displayInit();
 576:	06 de       	rcall	.-1012   	; 0x184 <displayInit>
	sevenSegInit();
 578:	a9 d0       	rcall	.+338    	; 0x6cc <sevenSegInit>
 57a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
	showDigit(score);
 57e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
 582:	7a d0       	rcall	.+244    	; 0x678 <showDigit>
	wait(500);
 584:	84 ef       	ldi	r24, 0xF4	; 244
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	01 de       	rcall	.-1022   	; 0x18c <wait>
 58a:	c2 e6       	ldi	r28, 0x62	; 98
>>>>>>> Readability
	
	while(1==1) {
		if (blockLocation.isAnimating == 0) {
<<<<<<< HEAD
 720:	d1 e0       	ldi	r29, 0x01	; 1
 722:	8c 81       	ldd	r24, Y+4	; 0x04
 724:	9d 81       	ldd	r25, Y+5	; 0x05
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	f1 f7       	brne	.-4      	; 0x726 <main+0x38>
 72a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
			if(shouldReset == 0) {
 72e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
 732:	89 2b       	or	r24, r25
				startGame();
 734:	29 f4       	brne	.+10     	; 0x740 <main+0x52>
				wait(500);
 736:	b1 df       	rcall	.-158    	; 0x69a <startGame>
 738:	84 ef       	ldi	r24, 0xF4	; 244
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	27 dd       	rcall	.-1458   	; 0x18c <wait>
			}else{
				resetGame();
 73e:	f1 cf       	rjmp	.-30     	; 0x722 <main+0x34>
 740:	f2 dd       	rcall	.-1052   	; 0x326 <resetGame>
				wait(1000);
 742:	88 ee       	ldi	r24, 0xE8	; 232
 744:	93 e0       	ldi	r25, 0x03	; 3
 746:	22 dd       	rcall	.-1468   	; 0x18c <wait>
 748:	ec cf       	rjmp	.-40     	; 0x722 <main+0x34>

0000074a <wait_us>:
=======
 58c:	d1 e0       	ldi	r29, 0x01	; 1
 58e:	8c 81       	ldd	r24, Y+4	; 0x04
 590:	9d 81       	ldd	r25, Y+5	; 0x05
 592:	00 97       	sbiw	r24, 0x00	; 0
			startGame();
 594:	f1 f7       	brne	.-4      	; 0x592 <main+0x22>
 596:	c1 df       	rcall	.-126    	; 0x51a <startGame>
			wait(500);
 598:	84 ef       	ldi	r24, 0xF4	; 244
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	f7 dd       	rcall	.-1042   	; 0x18c <wait>
 59e:	f7 cf       	rjmp	.-18     	; 0x58e <main+0x1e>

000005a0 <wait_us>:
>>>>>>> Readability
	PORTB |= 0x01;	//DIO high
}

void wait_us( int us )
{
	for (int i=0; i<us; i++)
<<<<<<< HEAD
 74a:	18 16       	cp	r1, r24
 74c:	19 06       	cpc	r1, r25
 74e:	5c f4       	brge	.+22     	; 0x766 <wait_us+0x1c>
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	30 e0       	ldi	r19, 0x00	; 0
=======
 5a0:	18 16       	cp	r1, r24
 5a2:	19 06       	cpc	r1, r25
 5a4:	5c f4       	brge	.+22     	; 0x5bc <wait_us+0x1c>
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
>>>>>>> Readability
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
 754:	42 e0       	ldi	r20, 0x02	; 2
 756:	4a 95       	dec	r20
 758:	f1 f7       	brne	.-4      	; 0x756 <wait_us+0xc>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <wait_us+0x12>
 75c:	2f 5f       	subi	r18, 0xFF	; 255
 75e:	3f 4f       	sbci	r19, 0xFF	; 255
 760:	82 17       	cp	r24, r18
 762:	93 07       	cpc	r25, r19
 764:	b9 f7       	brne	.-18     	; 0x754 <wait_us+0xa>
 766:	08 95       	ret

00000768 <sevenSegWriteByte>:
=======
 5aa:	42 e0       	ldi	r20, 0x02	; 2
 5ac:	4a 95       	dec	r20
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <wait_us+0xc>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <wait_us+0x12>
 5b2:	2f 5f       	subi	r18, 0xFF	; 255
 5b4:	3f 4f       	sbci	r19, 0xFF	; 255
 5b6:	82 17       	cp	r24, r18
 5b8:	93 07       	cpc	r25, r19
 5ba:	b9 f7       	brne	.-18     	; 0x5aa <wait_us+0xa>
 5bc:	08 95       	ret

000005be <sevenSegWriteByte>:
>>>>>>> Readability
void sevenSegCmd(uint8_t cmd){
	sevenSegStart();
	sevenSegWriteByte(cmd);
	sevenSegStop();
}
void sevenSegWriteByte(uint8_t byteval){
<<<<<<< HEAD
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	18 2f       	mov	r17, r24
 770:	c8 e0       	ldi	r28, 0x08	; 8
 772:	d0 e0       	ldi	r29, 0x00	; 0
=======
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	18 2f       	mov	r17, r24
 5c6:	c8 e0       	ldi	r28, 0x08	; 8
 5c8:	d0 e0       	ldi	r29, 0x00	; 0
>>>>>>> Readability
	uint8_t ack;
	int i;
	for(i = 0; i < 8; i++){			//writes the data
		PORTB &= ~0x02;	//clk low
<<<<<<< HEAD
 774:	c1 98       	cbi	0x18, 1	; 24
		wait_us(50);
 776:	82 e3       	ldi	r24, 0x32	; 50
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	e7 df       	rcall	.-50     	; 0x74a <wait_us>
		if(0x01 & byteval){	// dio should send high
 77c:	10 ff       	sbrs	r17, 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <sevenSegWriteByte+0x1c>
			PORTB |= 0x01;
 780:	c0 9a       	sbi	0x18, 0	; 24
 782:	01 c0       	rjmp	.+2      	; 0x786 <sevenSegWriteByte+0x1e>
			}else{				// dio should send low
			PORTB &= ~0x01;
 784:	c0 98       	cbi	0x18, 0	; 24
		}
		PORTB |= 0x02;	//clk high
 786:	c1 9a       	sbi	0x18, 1	; 24
		wait_us(50);
 788:	82 e3       	ldi	r24, 0x32	; 50
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	de df       	rcall	.-68     	; 0x74a <wait_us>
		byteval = byteval >> 1;
 78e:	16 95       	lsr	r17
 790:	21 97       	sbiw	r28, 0x01	; 1
=======
 5ca:	c1 98       	cbi	0x18, 1	; 24
		wait_us(50);
 5cc:	82 e3       	ldi	r24, 0x32	; 50
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	e7 df       	rcall	.-50     	; 0x5a0 <wait_us>
		if(0x01 & byteval){	// dio should send high
 5d2:	10 ff       	sbrs	r17, 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <sevenSegWriteByte+0x1c>
			PORTB |= 0x01;
 5d6:	c0 9a       	sbi	0x18, 0	; 24
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <sevenSegWriteByte+0x1e>
			}else{				// dio should send low
			PORTB &= ~0x01;
 5da:	c0 98       	cbi	0x18, 0	; 24
		}
		PORTB |= 0x02;	//clk high
 5dc:	c1 9a       	sbi	0x18, 1	; 24
		wait_us(50);
 5de:	82 e3       	ldi	r24, 0x32	; 50
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	de df       	rcall	.-68     	; 0x5a0 <wait_us>
		byteval = byteval >> 1;
 5e4:	16 95       	lsr	r17
 5e6:	21 97       	sbiw	r28, 0x01	; 1
>>>>>>> Readability
	sevenSegStop();
}
void sevenSegWriteByte(uint8_t byteval){
	uint8_t ack;
	int i;
	for(i = 0; i < 8; i++){			//writes the data
<<<<<<< HEAD
 792:	81 f7       	brne	.-32     	; 0x774 <sevenSegWriteByte+0xc>
=======
 5e8:	81 f7       	brne	.-32     	; 0x5ca <sevenSegWriteByte+0xc>
>>>>>>> Readability
		PORTB |= 0x02;	//clk high
		wait_us(50);
		byteval = byteval >> 1;
	}
	//ack
	PORTB &= ~0x02;	//clk low
<<<<<<< HEAD
 794:	c1 98       	cbi	0x18, 1	; 24
	DDRB &=  ~0x01; //dio is input
 796:	b8 98       	cbi	0x17, 0	; 23
	PORTB |=  0x01; //dio is high, ack should pull it low
 798:	c0 9a       	sbi	0x18, 0	; 24
	wait_us(50);
 79a:	82 e3       	ldi	r24, 0x32	; 50
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	d5 df       	rcall	.-86     	; 0x74a <wait_us>
	
	if((PINB | 0x01) > 0){
 7a0:	86 b3       	in	r24, 0x16	; 22
=======
 5ea:	c1 98       	cbi	0x18, 1	; 24
	DDRB &=  ~0x01; //dio is input
 5ec:	b8 98       	cbi	0x17, 0	; 23
	PORTB |=  0x01; //dio is high, ack should pull it low
 5ee:	c0 9a       	sbi	0x18, 0	; 24
	wait_us(50);
 5f0:	82 e3       	ldi	r24, 0x32	; 50
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	d5 df       	rcall	.-86     	; 0x5a0 <wait_us>
	
	if((PINB | 0x01) > 0){
 5f6:	86 b3       	in	r24, 0x16	; 22
>>>>>>> Readability
		ack = 1;
		}else{
		ack = 0;
	}
	if(1 == ack){	//if not ack pull DIO down yourself
		DDRB |= 0x01;
<<<<<<< HEAD
 7a2:	b8 9a       	sbi	0x17, 0	; 23
		PORTB &= ~0x01;
	}
	wait_us(50);
 7a4:	c0 98       	cbi	0x18, 0	; 24
 7a6:	82 e3       	ldi	r24, 0x32	; 50
 7a8:	90 e0       	ldi	r25, 0x00	; 0
	PORTB |= 0x02;	//clk high   falling edge 9th clock
 7aa:	cf df       	rcall	.-98     	; 0x74a <wait_us>
	wait_us(50);
 7ac:	c1 9a       	sbi	0x18, 1	; 24
 7ae:	82 e3       	ldi	r24, 0x32	; 50
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	cb df       	rcall	.-106    	; 0x74a <wait_us>
	PORTB &= ~0x02;	//clk low	properly ends the ack
 7b4:	c1 98       	cbi	0x18, 1	; 24
	DDRD |= 0x01;
 7b6:	88 9a       	sbi	0x11, 0	; 17
	
}
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	08 95       	ret

000007c0 <sevenSegStart>:

void sevenSegStart(void){
	PORTB |= 0x01;	//DIO pin high	others left alone
 7c0:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 0x02;	//clk pin high
 7c2:	c1 9a       	sbi	0x18, 1	; 24
	wait_us(50);
 7c4:	82 e3       	ldi	r24, 0x32	; 50
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	c0 df       	rcall	.-128    	; 0x74a <wait_us>
	PORTB &= ~0x01;	// DIO  pin low
 7ca:	c0 98       	cbi	0x18, 0	; 24
 7cc:	08 95       	ret

000007ce <sevenSegStop>:
=======
 5f8:	b8 9a       	sbi	0x17, 0	; 23
		PORTB &= ~0x01;
	}
	wait_us(50);
 5fa:	c0 98       	cbi	0x18, 0	; 24
 5fc:	82 e3       	ldi	r24, 0x32	; 50
 5fe:	90 e0       	ldi	r25, 0x00	; 0
	PORTB |= 0x02;	//clk high   falling edge 9th clock
 600:	cf df       	rcall	.-98     	; 0x5a0 <wait_us>
	wait_us(50);
 602:	c1 9a       	sbi	0x18, 1	; 24
 604:	82 e3       	ldi	r24, 0x32	; 50
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	cb df       	rcall	.-106    	; 0x5a0 <wait_us>
	PORTB &= ~0x02;	//clk low	properly ends the ack
 60a:	c1 98       	cbi	0x18, 1	; 24
	DDRD |= 0x01;
 60c:	88 9a       	sbi	0x11, 0	; 17
	
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	08 95       	ret

00000616 <sevenSegStart>:

void sevenSegStart(void){
	PORTB |= 0x01;	//DIO pin high	others left alone
 616:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 0x02;	//clk pin high
 618:	c1 9a       	sbi	0x18, 1	; 24
	wait_us(50);
 61a:	82 e3       	ldi	r24, 0x32	; 50
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	c0 df       	rcall	.-128    	; 0x5a0 <wait_us>
	PORTB &= ~0x01;	// DIO  pin low
 620:	c0 98       	cbi	0x18, 0	; 24
 622:	08 95       	ret

00000624 <sevenSegStop>:
>>>>>>> Readability
}

void sevenSegStop(void){
	PORTB &= ~0x02; // CLK pin low	others left alone
<<<<<<< HEAD
 7ce:	c1 98       	cbi	0x18, 1	; 24
	wait_us(50);
 7d0:	82 e3       	ldi	r24, 0x32	; 50
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	ba df       	rcall	.-140    	; 0x74a <wait_us>
	PORTB &= ~0x01;	// DIO  pin low
 7d6:	c0 98       	cbi	0x18, 0	; 24
	wait_us(50);
 7d8:	82 e3       	ldi	r24, 0x32	; 50
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	b6 df       	rcall	.-148    	; 0x74a <wait_us>
	PORTB |= 0x02;	//CLK high
 7de:	c1 9a       	sbi	0x18, 1	; 24
	wait_us(50);
 7e0:	82 e3       	ldi	r24, 0x32	; 50
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	b2 df       	rcall	.-156    	; 0x74a <wait_us>
	PORTB |= 0x01;	//DIO high
 7e6:	c0 9a       	sbi	0x18, 0	; 24
 7e8:	08 95       	ret

000007ea <sevenSegCmd>:
=======
 624:	c1 98       	cbi	0x18, 1	; 24
	wait_us(50);
 626:	82 e3       	ldi	r24, 0x32	; 50
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	ba df       	rcall	.-140    	; 0x5a0 <wait_us>
	PORTB &= ~0x01;	// DIO  pin low
 62c:	c0 98       	cbi	0x18, 0	; 24
	wait_us(50);
 62e:	82 e3       	ldi	r24, 0x32	; 50
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	b6 df       	rcall	.-148    	; 0x5a0 <wait_us>
	PORTB |= 0x02;	//CLK high
 634:	c1 9a       	sbi	0x18, 1	; 24
	wait_us(50);
 636:	82 e3       	ldi	r24, 0x32	; 50
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	b2 df       	rcall	.-156    	; 0x5a0 <wait_us>
	PORTB |= 0x01;	//DIO high
 63c:	c0 9a       	sbi	0x18, 0	; 24
 63e:	08 95       	ret

00000640 <sevenSegCmd>:
>>>>>>> Readability
	sevenSegWriteByte(FIRSTSEGMENT | segAddress);	//address to write to
	sevenSegWriteByte(value);						//value to write
	sevenSegStop();
	sevenSegConf();
}
void sevenSegCmd(uint8_t cmd){
<<<<<<< HEAD
 7ea:	cf 93       	push	r28
 7ec:	c8 2f       	mov	r28, r24
	sevenSegStart();
 7ee:	e8 df       	rcall	.-48     	; 0x7c0 <sevenSegStart>
	sevenSegWriteByte(cmd);
 7f0:	8c 2f       	mov	r24, r28
	sevenSegStop();
 7f2:	ba df       	rcall	.-140    	; 0x768 <sevenSegWriteByte>
 7f4:	ec df       	rcall	.-40     	; 0x7ce <sevenSegStop>
}
 7f6:	cf 91       	pop	r28
 7f8:	08 95       	ret

000007fa <sevenSegConf>:
=======
 640:	cf 93       	push	r28
 642:	c8 2f       	mov	r28, r24
	sevenSegStart();
 644:	e8 df       	rcall	.-48     	; 0x616 <sevenSegStart>
	sevenSegWriteByte(cmd);
 646:	8c 2f       	mov	r24, r28
	sevenSegStop();
 648:	ba df       	rcall	.-140    	; 0x5be <sevenSegWriteByte>
 64a:	ec df       	rcall	.-40     	; 0x624 <sevenSegStop>
}
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <sevenSegConf>:
>>>>>>> Readability

void sevenSegConf(void){
	uint8_t command;
	command = DISPLAY_ON;
	command |= 0x03;	//brightness
	sevenSegCmd(command);
<<<<<<< HEAD
 7fa:	8b e8       	ldi	r24, 0x8B	; 139
 7fc:	f6 cf       	rjmp	.-20     	; 0x7ea <sevenSegCmd>
 7fe:	08 95       	ret

00000800 <sevenSegDisplaySegs>:
}
void sevenSegDisplaySegs(uint8_t segAddress, uint8_t value){
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	d8 2f       	mov	r29, r24
 806:	c6 2f       	mov	r28, r22
	sevenSegCmd(BASEDATACMD | 0x04);	//fixed addresses
 808:	84 e4       	ldi	r24, 0x44	; 68
 80a:	ef df       	rcall	.-34     	; 0x7ea <sevenSegCmd>
	sevenSegStart();
 80c:	d9 df       	rcall	.-78     	; 0x7c0 <sevenSegStart>
 80e:	8d 2f       	mov	r24, r29
	sevenSegWriteByte(FIRSTSEGMENT | segAddress);	//address to write to
 810:	80 6c       	ori	r24, 0xC0	; 192
 812:	aa df       	rcall	.-172    	; 0x768 <sevenSegWriteByte>
	sevenSegWriteByte(value);						//value to write
 814:	8c 2f       	mov	r24, r28
 816:	a8 df       	rcall	.-176    	; 0x768 <sevenSegWriteByte>
	sevenSegStop();
 818:	da df       	rcall	.-76     	; 0x7ce <sevenSegStop>
 81a:	ef df       	rcall	.-34     	; 0x7fa <sevenSegConf>
	sevenSegConf();
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
}
 820:	08 95       	ret

00000822 <showDigit>:
 822:	ff 92       	push	r15
 824:	0f 93       	push	r16
=======
 650:	8b e8       	ldi	r24, 0x8B	; 139
 652:	f6 cf       	rjmp	.-20     	; 0x640 <sevenSegCmd>
 654:	08 95       	ret

00000656 <sevenSegDisplaySegs>:
}
void sevenSegDisplaySegs(uint8_t segAddress, uint8_t value){
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	d8 2f       	mov	r29, r24
 65c:	c6 2f       	mov	r28, r22
	sevenSegCmd(BASEDATACMD | 0x04);	//fixed addresses
 65e:	84 e4       	ldi	r24, 0x44	; 68
 660:	ef df       	rcall	.-34     	; 0x640 <sevenSegCmd>
	sevenSegStart();
 662:	d9 df       	rcall	.-78     	; 0x616 <sevenSegStart>
 664:	8d 2f       	mov	r24, r29
	sevenSegWriteByte(FIRSTSEGMENT | segAddress);	//address to write to
 666:	80 6c       	ori	r24, 0xC0	; 192
 668:	aa df       	rcall	.-172    	; 0x5be <sevenSegWriteByte>
	sevenSegWriteByte(value);						//value to write
 66a:	8c 2f       	mov	r24, r28
 66c:	a8 df       	rcall	.-176    	; 0x5be <sevenSegWriteByte>
	sevenSegStop();
 66e:	da df       	rcall	.-76     	; 0x624 <sevenSegStop>
 670:	ef df       	rcall	.-34     	; 0x650 <sevenSegConf>
	sevenSegConf();
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
}
 676:	08 95       	ret

00000678 <showDigit>:
 678:	ff 92       	push	r15
 67a:	0f 93       	push	r16
>>>>>>> Readability
	DDRB = 0x03;	//pd0 and pd1 are output
	PORTB = 0x00;	//all pins are low
	sevenSegCleanup();
}
 
void showDigit(int digit){
<<<<<<< HEAD
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	c3 e0       	ldi	r28, 0x03	; 3
=======
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	c3 e0       	ldi	r28, 0x03	; 3
>>>>>>> Readability
	uint8_t segments, i;
	for(i = 1; i <= MAXDIGITS; i ++){	//start at 1 because you count from 0
		segments = digit % 10;
		sevenSegDisplaySegs(MAXDIGITS - i,_digitInSegments[segments]);
<<<<<<< HEAD
 82e:	0a e0       	ldi	r16, 0x0A	; 10
 830:	10 e0       	ldi	r17, 0x00	; 0
 832:	b8 01       	movw	r22, r16
 834:	25 d0       	rcall	.+74     	; 0x880 <__divmodhi4>
 836:	f6 2e       	mov	r15, r22
 838:	d7 2f       	mov	r29, r23
 83a:	fc 01       	movw	r30, r24
 83c:	ff 27       	eor	r31, r31
 83e:	e4 5b       	subi	r30, 0xB4	; 180
 840:	fe 4f       	sbci	r31, 0xFE	; 254
 842:	60 81       	ld	r22, Z
 844:	8c 2f       	mov	r24, r28
 846:	dc df       	rcall	.-72     	; 0x800 <sevenSegDisplaySegs>
		digit /= 10;
 848:	8f 2d       	mov	r24, r15
 84a:	9d 2f       	mov	r25, r29
 84c:	c1 50       	subi	r28, 0x01	; 1
 84e:	88 f7       	brcc	.-30     	; 0x832 <showDigit+0x10>
	}
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	ff 90       	pop	r15
 85a:	08 95       	ret

0000085c <sevenSegCleanup>:

void sevenSegCleanup(void){
	sevenSegDisplaySegs(segOne ,0x00);	
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	cf df       	rcall	.-98     	; 0x800 <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segTwo ,0x00);
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	cc df       	rcall	.-104    	; 0x800 <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segThree ,0x00);
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	82 e0       	ldi	r24, 0x02	; 2
 86c:	c9 df       	rcall	.-110    	; 0x800 <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segFour ,0x00);
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	83 e0       	ldi	r24, 0x03	; 3
 872:	c6 cf       	rjmp	.-116    	; 0x800 <sevenSegDisplaySegs>
 874:	08 95       	ret

00000876 <sevenSegInit>:
 876:	83 e0       	ldi	r24, 0x03	; 3
=======
 684:	0a e0       	ldi	r16, 0x0A	; 10
 686:	10 e0       	ldi	r17, 0x00	; 0
 688:	b8 01       	movw	r22, r16
 68a:	25 d0       	rcall	.+74     	; 0x6d6 <__divmodhi4>
 68c:	f6 2e       	mov	r15, r22
 68e:	d7 2f       	mov	r29, r23
 690:	fc 01       	movw	r30, r24
 692:	ff 27       	eor	r31, r31
 694:	ec 5a       	subi	r30, 0xAC	; 172
 696:	fe 4f       	sbci	r31, 0xFE	; 254
 698:	60 81       	ld	r22, Z
 69a:	8c 2f       	mov	r24, r28
 69c:	dc df       	rcall	.-72     	; 0x656 <sevenSegDisplaySegs>
		digit /= 10;
 69e:	8f 2d       	mov	r24, r15
 6a0:	9d 2f       	mov	r25, r29
 6a2:	c1 50       	subi	r28, 0x01	; 1
 6a4:	88 f7       	brcc	.-30     	; 0x688 <showDigit+0x10>
	}
}
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	ff 90       	pop	r15
 6b0:	08 95       	ret

000006b2 <sevenSegCleanup>:

void sevenSegCleanup(void){
	sevenSegDisplaySegs(segOne ,0x00);	
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	cf df       	rcall	.-98     	; 0x656 <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segTwo ,0x00);
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	cc df       	rcall	.-104    	; 0x656 <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segThree ,0x00);
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	c9 df       	rcall	.-110    	; 0x656 <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segFour ,0x00);
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	c6 cf       	rjmp	.-116    	; 0x656 <sevenSegDisplaySegs>
 6ca:	08 95       	ret

000006cc <sevenSegInit>:
 6cc:	83 e0       	ldi	r24, 0x03	; 3
>>>>>>> Readability
	0x7F, // 8
	0x6F  // 9
};

void sevenSegInit(void){
	DDRB = 0x03;	//pd0 and pd1 are output
<<<<<<< HEAD
 878:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;	//all pins are low
 87a:	18 ba       	out	0x18, r1	; 24
	sevenSegCleanup();
 87c:	ef cf       	rjmp	.-34     	; 0x85c <sevenSegCleanup>
 87e:	08 95       	ret

00000880 <__divmodhi4>:
 880:	97 fb       	bst	r25, 7
 882:	07 2e       	mov	r0, r23
 884:	16 f4       	brtc	.+4      	; 0x88a <__divmodhi4+0xa>
 886:	00 94       	com	r0
 888:	06 d0       	rcall	.+12     	; 0x896 <__divmodhi4_neg1>
 88a:	77 fd       	sbrc	r23, 7
 88c:	08 d0       	rcall	.+16     	; 0x89e <__divmodhi4_neg2>
 88e:	0b d0       	rcall	.+22     	; 0x8a6 <__udivmodhi4>
 890:	07 fc       	sbrc	r0, 7
 892:	05 d0       	rcall	.+10     	; 0x89e <__divmodhi4_neg2>
 894:	3e f4       	brtc	.+14     	; 0x8a4 <__divmodhi4_exit>

00000896 <__divmodhi4_neg1>:
 896:	90 95       	com	r25
 898:	81 95       	neg	r24
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	08 95       	ret

0000089e <__divmodhi4_neg2>:
 89e:	70 95       	com	r23
 8a0:	61 95       	neg	r22
 8a2:	7f 4f       	sbci	r23, 0xFF	; 255

000008a4 <__divmodhi4_exit>:
 8a4:	08 95       	ret

000008a6 <__udivmodhi4>:
 8a6:	aa 1b       	sub	r26, r26
 8a8:	bb 1b       	sub	r27, r27
 8aa:	51 e1       	ldi	r21, 0x11	; 17
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <__udivmodhi4_ep>

000008ae <__udivmodhi4_loop>:
 8ae:	aa 1f       	adc	r26, r26
 8b0:	bb 1f       	adc	r27, r27
 8b2:	a6 17       	cp	r26, r22
 8b4:	b7 07       	cpc	r27, r23
 8b6:	10 f0       	brcs	.+4      	; 0x8bc <__udivmodhi4_ep>
 8b8:	a6 1b       	sub	r26, r22
 8ba:	b7 0b       	sbc	r27, r23

000008bc <__udivmodhi4_ep>:
 8bc:	88 1f       	adc	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	5a 95       	dec	r21
 8c2:	a9 f7       	brne	.-22     	; 0x8ae <__udivmodhi4_loop>
 8c4:	80 95       	com	r24
 8c6:	90 95       	com	r25
 8c8:	bc 01       	movw	r22, r24
 8ca:	cd 01       	movw	r24, r26
 8cc:	08 95       	ret

000008ce <do_rand>:
 8ce:	8f 92       	push	r8
 8d0:	9f 92       	push	r9
 8d2:	af 92       	push	r10
 8d4:	bf 92       	push	r11
 8d6:	cf 92       	push	r12
 8d8:	df 92       	push	r13
 8da:	ef 92       	push	r14
 8dc:	ff 92       	push	r15
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	ec 01       	movw	r28, r24
 8e4:	68 81       	ld	r22, Y
 8e6:	79 81       	ldd	r23, Y+1	; 0x01
 8e8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ea:	9b 81       	ldd	r25, Y+3	; 0x03
 8ec:	61 15       	cp	r22, r1
 8ee:	71 05       	cpc	r23, r1
 8f0:	81 05       	cpc	r24, r1
 8f2:	91 05       	cpc	r25, r1
 8f4:	21 f4       	brne	.+8      	; 0x8fe <do_rand+0x30>
 8f6:	64 e2       	ldi	r22, 0x24	; 36
 8f8:	79 ed       	ldi	r23, 0xD9	; 217
 8fa:	8b e5       	ldi	r24, 0x5B	; 91
 8fc:	97 e0       	ldi	r25, 0x07	; 7
 8fe:	2d e1       	ldi	r18, 0x1D	; 29
 900:	33 ef       	ldi	r19, 0xF3	; 243
 902:	41 e0       	ldi	r20, 0x01	; 1
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	38 d0       	rcall	.+112    	; 0x978 <__divmodsi4>
 908:	49 01       	movw	r8, r18
 90a:	5a 01       	movw	r10, r20
 90c:	9b 01       	movw	r18, r22
 90e:	ac 01       	movw	r20, r24
 910:	a7 ea       	ldi	r26, 0xA7	; 167
 912:	b1 e4       	ldi	r27, 0x41	; 65
 914:	4d d0       	rcall	.+154    	; 0x9b0 <__muluhisi3>
 916:	6b 01       	movw	r12, r22
 918:	7c 01       	movw	r14, r24
 91a:	ac ee       	ldi	r26, 0xEC	; 236
 91c:	b4 ef       	ldi	r27, 0xF4	; 244
 91e:	a5 01       	movw	r20, r10
 920:	94 01       	movw	r18, r8
 922:	52 d0       	rcall	.+164    	; 0x9c8 <__mulohisi3>
 924:	dc 01       	movw	r26, r24
 926:	cb 01       	movw	r24, r22
 928:	8c 0d       	add	r24, r12
 92a:	9d 1d       	adc	r25, r13
 92c:	ae 1d       	adc	r26, r14
 92e:	bf 1d       	adc	r27, r15
 930:	b7 ff       	sbrs	r27, 7
 932:	03 c0       	rjmp	.+6      	; 0x93a <do_rand+0x6c>
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	a1 09       	sbc	r26, r1
 938:	b0 48       	sbci	r27, 0x80	; 128
 93a:	88 83       	st	Y, r24
 93c:	99 83       	std	Y+1, r25	; 0x01
 93e:	aa 83       	std	Y+2, r26	; 0x02
 940:	bb 83       	std	Y+3, r27	; 0x03
 942:	9f 77       	andi	r25, 0x7F	; 127
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	ff 90       	pop	r15
 94a:	ef 90       	pop	r14
 94c:	df 90       	pop	r13
 94e:	cf 90       	pop	r12
 950:	bf 90       	pop	r11
 952:	af 90       	pop	r10
 954:	9f 90       	pop	r9
 956:	8f 90       	pop	r8
 958:	08 95       	ret

0000095a <rand_r>:
 95a:	b9 cf       	rjmp	.-142    	; 0x8ce <do_rand>

0000095c <rand>:
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	b6 cf       	rjmp	.-148    	; 0x8ce <do_rand>

00000962 <srand>:
 962:	a0 e0       	ldi	r26, 0x00	; 0
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 96a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 96e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 972:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 976:	08 95       	ret

00000978 <__divmodsi4>:
 978:	05 2e       	mov	r0, r21
 97a:	97 fb       	bst	r25, 7
 97c:	16 f4       	brtc	.+4      	; 0x982 <__divmodsi4+0xa>
 97e:	00 94       	com	r0
 980:	0f d0       	rcall	.+30     	; 0x9a0 <__negsi2>
 982:	57 fd       	sbrc	r21, 7
 984:	05 d0       	rcall	.+10     	; 0x990 <__divmodsi4_neg2>
 986:	24 d0       	rcall	.+72     	; 0x9d0 <__udivmodsi4>
 988:	07 fc       	sbrc	r0, 7
 98a:	02 d0       	rcall	.+4      	; 0x990 <__divmodsi4_neg2>
 98c:	46 f4       	brtc	.+16     	; 0x99e <__divmodsi4_exit>
 98e:	08 c0       	rjmp	.+16     	; 0x9a0 <__negsi2>

00000990 <__divmodsi4_neg2>:
 990:	50 95       	com	r21
 992:	40 95       	com	r20
 994:	30 95       	com	r19
 996:	21 95       	neg	r18
 998:	3f 4f       	sbci	r19, 0xFF	; 255
 99a:	4f 4f       	sbci	r20, 0xFF	; 255
 99c:	5f 4f       	sbci	r21, 0xFF	; 255

0000099e <__divmodsi4_exit>:
 99e:	08 95       	ret

000009a0 <__negsi2>:
 9a0:	90 95       	com	r25
 9a2:	80 95       	com	r24
 9a4:	70 95       	com	r23
 9a6:	61 95       	neg	r22
 9a8:	7f 4f       	sbci	r23, 0xFF	; 255
 9aa:	8f 4f       	sbci	r24, 0xFF	; 255
 9ac:	9f 4f       	sbci	r25, 0xFF	; 255
 9ae:	08 95       	ret

000009b0 <__muluhisi3>:
 9b0:	31 d0       	rcall	.+98     	; 0xa14 <__umulhisi3>
 9b2:	a5 9f       	mul	r26, r21
 9b4:	90 0d       	add	r25, r0
 9b6:	b4 9f       	mul	r27, r20
 9b8:	90 0d       	add	r25, r0
 9ba:	a4 9f       	mul	r26, r20
 9bc:	80 0d       	add	r24, r0
 9be:	91 1d       	adc	r25, r1
 9c0:	11 24       	eor	r1, r1
 9c2:	08 95       	ret

000009c4 <__mulshisi3>:
 9c4:	b7 ff       	sbrs	r27, 7
 9c6:	f4 cf       	rjmp	.-24     	; 0x9b0 <__muluhisi3>

000009c8 <__mulohisi3>:
 9c8:	f3 df       	rcall	.-26     	; 0x9b0 <__muluhisi3>
 9ca:	82 1b       	sub	r24, r18
 9cc:	93 0b       	sbc	r25, r19
 9ce:	08 95       	ret

000009d0 <__udivmodsi4>:
 9d0:	a1 e2       	ldi	r26, 0x21	; 33
 9d2:	1a 2e       	mov	r1, r26
 9d4:	aa 1b       	sub	r26, r26
 9d6:	bb 1b       	sub	r27, r27
 9d8:	fd 01       	movw	r30, r26
 9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__udivmodsi4_ep>

000009dc <__udivmodsi4_loop>:
 9dc:	aa 1f       	adc	r26, r26
 9de:	bb 1f       	adc	r27, r27
 9e0:	ee 1f       	adc	r30, r30
 9e2:	ff 1f       	adc	r31, r31
 9e4:	a2 17       	cp	r26, r18
 9e6:	b3 07       	cpc	r27, r19
 9e8:	e4 07       	cpc	r30, r20
 9ea:	f5 07       	cpc	r31, r21
 9ec:	20 f0       	brcs	.+8      	; 0x9f6 <__udivmodsi4_ep>
 9ee:	a2 1b       	sub	r26, r18
 9f0:	b3 0b       	sbc	r27, r19
 9f2:	e4 0b       	sbc	r30, r20
 9f4:	f5 0b       	sbc	r31, r21

000009f6 <__udivmodsi4_ep>:
 9f6:	66 1f       	adc	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	1a 94       	dec	r1
 a00:	69 f7       	brne	.-38     	; 0x9dc <__udivmodsi4_loop>
 a02:	60 95       	com	r22
 a04:	70 95       	com	r23
 a06:	80 95       	com	r24
 a08:	90 95       	com	r25
 a0a:	9b 01       	movw	r18, r22
 a0c:	ac 01       	movw	r20, r24
 a0e:	bd 01       	movw	r22, r26
 a10:	cf 01       	movw	r24, r30
 a12:	08 95       	ret

00000a14 <__umulhisi3>:
 a14:	a2 9f       	mul	r26, r18
 a16:	b0 01       	movw	r22, r0
 a18:	b3 9f       	mul	r27, r19
 a1a:	c0 01       	movw	r24, r0
 a1c:	a3 9f       	mul	r26, r19
 a1e:	70 0d       	add	r23, r0
 a20:	81 1d       	adc	r24, r1
 a22:	11 24       	eor	r1, r1
 a24:	91 1d       	adc	r25, r1
 a26:	b2 9f       	mul	r27, r18
 a28:	70 0d       	add	r23, r0
 a2a:	81 1d       	adc	r24, r1
 a2c:	11 24       	eor	r1, r1
 a2e:	91 1d       	adc	r25, r1
 a30:	08 95       	ret

00000a32 <_exit>:
 a32:	f8 94       	cli

00000a34 <__stop_program>:
 a34:	ff cf       	rjmp	.-2      	; 0xa34 <__stop_program>
=======
 6ce:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;	//all pins are low
 6d0:	18 ba       	out	0x18, r1	; 24
	sevenSegCleanup();
 6d2:	ef cf       	rjmp	.-34     	; 0x6b2 <sevenSegCleanup>
 6d4:	08 95       	ret

000006d6 <__divmodhi4>:
 6d6:	97 fb       	bst	r25, 7
 6d8:	07 2e       	mov	r0, r23
 6da:	16 f4       	brtc	.+4      	; 0x6e0 <__divmodhi4+0xa>
 6dc:	00 94       	com	r0
 6de:	06 d0       	rcall	.+12     	; 0x6ec <__divmodhi4_neg1>
 6e0:	77 fd       	sbrc	r23, 7
 6e2:	08 d0       	rcall	.+16     	; 0x6f4 <__divmodhi4_neg2>
 6e4:	0b d0       	rcall	.+22     	; 0x6fc <__udivmodhi4>
 6e6:	07 fc       	sbrc	r0, 7
 6e8:	05 d0       	rcall	.+10     	; 0x6f4 <__divmodhi4_neg2>
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__divmodhi4_exit>

000006ec <__divmodhi4_neg1>:
 6ec:	90 95       	com	r25
 6ee:	81 95       	neg	r24
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__divmodhi4_neg2>:
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255

000006fa <__divmodhi4_exit>:
 6fa:	08 95       	ret

000006fc <__udivmodhi4>:
 6fc:	aa 1b       	sub	r26, r26
 6fe:	bb 1b       	sub	r27, r27
 700:	51 e1       	ldi	r21, 0x11	; 17
 702:	07 c0       	rjmp	.+14     	; 0x712 <__udivmodhi4_ep>

00000704 <__udivmodhi4_loop>:
 704:	aa 1f       	adc	r26, r26
 706:	bb 1f       	adc	r27, r27
 708:	a6 17       	cp	r26, r22
 70a:	b7 07       	cpc	r27, r23
 70c:	10 f0       	brcs	.+4      	; 0x712 <__udivmodhi4_ep>
 70e:	a6 1b       	sub	r26, r22
 710:	b7 0b       	sbc	r27, r23

00000712 <__udivmodhi4_ep>:
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	5a 95       	dec	r21
 718:	a9 f7       	brne	.-22     	; 0x704 <__udivmodhi4_loop>
 71a:	80 95       	com	r24
 71c:	90 95       	com	r25
 71e:	bc 01       	movw	r22, r24
 720:	cd 01       	movw	r24, r26
 722:	08 95       	ret

00000724 <do_rand>:
 724:	8f 92       	push	r8
 726:	9f 92       	push	r9
 728:	af 92       	push	r10
 72a:	bf 92       	push	r11
 72c:	cf 92       	push	r12
 72e:	df 92       	push	r13
 730:	ef 92       	push	r14
 732:	ff 92       	push	r15
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	ec 01       	movw	r28, r24
 73a:	68 81       	ld	r22, Y
 73c:	79 81       	ldd	r23, Y+1	; 0x01
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	9b 81       	ldd	r25, Y+3	; 0x03
 742:	61 15       	cp	r22, r1
 744:	71 05       	cpc	r23, r1
 746:	81 05       	cpc	r24, r1
 748:	91 05       	cpc	r25, r1
 74a:	21 f4       	brne	.+8      	; 0x754 <do_rand+0x30>
 74c:	64 e2       	ldi	r22, 0x24	; 36
 74e:	79 ed       	ldi	r23, 0xD9	; 217
 750:	8b e5       	ldi	r24, 0x5B	; 91
 752:	97 e0       	ldi	r25, 0x07	; 7
 754:	2d e1       	ldi	r18, 0x1D	; 29
 756:	33 ef       	ldi	r19, 0xF3	; 243
 758:	41 e0       	ldi	r20, 0x01	; 1
 75a:	50 e0       	ldi	r21, 0x00	; 0
 75c:	38 d0       	rcall	.+112    	; 0x7ce <__divmodsi4>
 75e:	49 01       	movw	r8, r18
 760:	5a 01       	movw	r10, r20
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	a7 ea       	ldi	r26, 0xA7	; 167
 768:	b1 e4       	ldi	r27, 0x41	; 65
 76a:	4d d0       	rcall	.+154    	; 0x806 <__muluhisi3>
 76c:	6b 01       	movw	r12, r22
 76e:	7c 01       	movw	r14, r24
 770:	ac ee       	ldi	r26, 0xEC	; 236
 772:	b4 ef       	ldi	r27, 0xF4	; 244
 774:	a5 01       	movw	r20, r10
 776:	94 01       	movw	r18, r8
 778:	52 d0       	rcall	.+164    	; 0x81e <__mulohisi3>
 77a:	dc 01       	movw	r26, r24
 77c:	cb 01       	movw	r24, r22
 77e:	8c 0d       	add	r24, r12
 780:	9d 1d       	adc	r25, r13
 782:	ae 1d       	adc	r26, r14
 784:	bf 1d       	adc	r27, r15
 786:	b7 ff       	sbrs	r27, 7
 788:	03 c0       	rjmp	.+6      	; 0x790 <do_rand+0x6c>
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	a1 09       	sbc	r26, r1
 78e:	b0 48       	sbci	r27, 0x80	; 128
 790:	88 83       	st	Y, r24
 792:	99 83       	std	Y+1, r25	; 0x01
 794:	aa 83       	std	Y+2, r26	; 0x02
 796:	bb 83       	std	Y+3, r27	; 0x03
 798:	9f 77       	andi	r25, 0x7F	; 127
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	ff 90       	pop	r15
 7a0:	ef 90       	pop	r14
 7a2:	df 90       	pop	r13
 7a4:	cf 90       	pop	r12
 7a6:	bf 90       	pop	r11
 7a8:	af 90       	pop	r10
 7aa:	9f 90       	pop	r9
 7ac:	8f 90       	pop	r8
 7ae:	08 95       	ret

000007b0 <rand_r>:
 7b0:	b9 cf       	rjmp	.-142    	; 0x724 <do_rand>

000007b2 <rand>:
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	b6 cf       	rjmp	.-148    	; 0x724 <do_rand>

000007b8 <srand>:
 7b8:	a0 e0       	ldi	r26, 0x00	; 0
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 7c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 7c4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 7c8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 7cc:	08 95       	ret

000007ce <__divmodsi4>:
 7ce:	05 2e       	mov	r0, r21
 7d0:	97 fb       	bst	r25, 7
 7d2:	16 f4       	brtc	.+4      	; 0x7d8 <__divmodsi4+0xa>
 7d4:	00 94       	com	r0
 7d6:	0f d0       	rcall	.+30     	; 0x7f6 <__negsi2>
 7d8:	57 fd       	sbrc	r21, 7
 7da:	05 d0       	rcall	.+10     	; 0x7e6 <__divmodsi4_neg2>
 7dc:	24 d0       	rcall	.+72     	; 0x826 <__udivmodsi4>
 7de:	07 fc       	sbrc	r0, 7
 7e0:	02 d0       	rcall	.+4      	; 0x7e6 <__divmodsi4_neg2>
 7e2:	46 f4       	brtc	.+16     	; 0x7f4 <__divmodsi4_exit>
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <__negsi2>

000007e6 <__divmodsi4_neg2>:
 7e6:	50 95       	com	r21
 7e8:	40 95       	com	r20
 7ea:	30 95       	com	r19
 7ec:	21 95       	neg	r18
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	4f 4f       	sbci	r20, 0xFF	; 255
 7f2:	5f 4f       	sbci	r21, 0xFF	; 255

000007f4 <__divmodsi4_exit>:
 7f4:	08 95       	ret

000007f6 <__negsi2>:
 7f6:	90 95       	com	r25
 7f8:	80 95       	com	r24
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	08 95       	ret

00000806 <__muluhisi3>:
 806:	31 d0       	rcall	.+98     	; 0x86a <__umulhisi3>
 808:	a5 9f       	mul	r26, r21
 80a:	90 0d       	add	r25, r0
 80c:	b4 9f       	mul	r27, r20
 80e:	90 0d       	add	r25, r0
 810:	a4 9f       	mul	r26, r20
 812:	80 0d       	add	r24, r0
 814:	91 1d       	adc	r25, r1
 816:	11 24       	eor	r1, r1
 818:	08 95       	ret

0000081a <__mulshisi3>:
 81a:	b7 ff       	sbrs	r27, 7
 81c:	f4 cf       	rjmp	.-24     	; 0x806 <__muluhisi3>

0000081e <__mulohisi3>:
 81e:	f3 df       	rcall	.-26     	; 0x806 <__muluhisi3>
 820:	82 1b       	sub	r24, r18
 822:	93 0b       	sbc	r25, r19
 824:	08 95       	ret

00000826 <__udivmodsi4>:
 826:	a1 e2       	ldi	r26, 0x21	; 33
 828:	1a 2e       	mov	r1, r26
 82a:	aa 1b       	sub	r26, r26
 82c:	bb 1b       	sub	r27, r27
 82e:	fd 01       	movw	r30, r26
 830:	0d c0       	rjmp	.+26     	; 0x84c <__udivmodsi4_ep>

00000832 <__udivmodsi4_loop>:
 832:	aa 1f       	adc	r26, r26
 834:	bb 1f       	adc	r27, r27
 836:	ee 1f       	adc	r30, r30
 838:	ff 1f       	adc	r31, r31
 83a:	a2 17       	cp	r26, r18
 83c:	b3 07       	cpc	r27, r19
 83e:	e4 07       	cpc	r30, r20
 840:	f5 07       	cpc	r31, r21
 842:	20 f0       	brcs	.+8      	; 0x84c <__udivmodsi4_ep>
 844:	a2 1b       	sub	r26, r18
 846:	b3 0b       	sbc	r27, r19
 848:	e4 0b       	sbc	r30, r20
 84a:	f5 0b       	sbc	r31, r21

0000084c <__udivmodsi4_ep>:
 84c:	66 1f       	adc	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	1a 94       	dec	r1
 856:	69 f7       	brne	.-38     	; 0x832 <__udivmodsi4_loop>
 858:	60 95       	com	r22
 85a:	70 95       	com	r23
 85c:	80 95       	com	r24
 85e:	90 95       	com	r25
 860:	9b 01       	movw	r18, r22
 862:	ac 01       	movw	r20, r24
 864:	bd 01       	movw	r22, r26
 866:	cf 01       	movw	r24, r30
 868:	08 95       	ret

0000086a <__umulhisi3>:
 86a:	a2 9f       	mul	r26, r18
 86c:	b0 01       	movw	r22, r0
 86e:	b3 9f       	mul	r27, r19
 870:	c0 01       	movw	r24, r0
 872:	a3 9f       	mul	r26, r19
 874:	70 0d       	add	r23, r0
 876:	81 1d       	adc	r24, r1
 878:	11 24       	eor	r1, r1
 87a:	91 1d       	adc	r25, r1
 87c:	b2 9f       	mul	r27, r18
 87e:	70 0d       	add	r23, r0
 880:	81 1d       	adc	r24, r1
 882:	11 24       	eor	r1, r1
 884:	91 1d       	adc	r25, r1
 886:	08 95       	ret

00000888 <_exit>:
 888:	f8 94       	cli

0000088a <__stop_program>:
 88a:	ff cf       	rjmp	.-2      	; 0x88a <__stop_program>
>>>>>>> Readability
