
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000019a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000faa  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a90  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a42  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009c8e  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ee  00000000  00000000  0000c65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000cb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002ec7  00000000  00000000  0000cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	63 d0       	rcall	.+198    	; 0x18a <main>
  c4:	68 c0       	rjmp	.+208    	; 0x196 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
	
}
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
  fa:	08 95       	ret

000000fc <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	08 2f       	mov	r16, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
 106:	e6 df       	rcall	.-52     	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
 108:	80 2f       	mov	r24, r16
 10a:	ed df       	rcall	.-38     	; 0xe6 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 10c:	81 e2       	ldi	r24, 0x21	; 33
 10e:	eb df       	rcall	.-42     	; 0xe6 <twi_tx>
 110:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	14 e9       	ldi	r17, 0x94	; 148
 116:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 118:	dd df       	rcall	.-70     	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 11a:	80 2f       	mov	r24, r16
 11c:	e4 df       	rcall	.-56     	; 0xe6 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 11e:	80 ea       	ldi	r24, 0xA0	; 160
 120:	e2 df       	rcall	.-60     	; 0xe6 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 122:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 124:	d7 df       	rcall	.-82     	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 126:	80 2f       	mov	r24, r16
 128:	de df       	rcall	.-68     	; 0xe6 <twi_tx>
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 12a:	81 ee       	ldi	r24, 0xE1	; 225
 12c:	dc df       	rcall	.-72     	; 0xe6 <twi_tx>
 12e:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 130:	d1 df       	rcall	.-94     	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 132:	80 2f       	mov	r24, r16
 134:	d8 df       	rcall	.-80     	; 0xe6 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 136:	81 e8       	ldi	r24, 0x81	; 129
 138:	d6 df       	rcall	.-84     	; 0xe6 <twi_tx>
 13a:	18 83       	st	Y, r17
	twi_tx(0x81);			// Display ON, Blinking OFF
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 142:	0f 91       	pop	r16
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
*/
}
 144:	08 95       	ret

00000146 <displayInit>:
 146:	c0 df       	rcall	.-128    	; 0xc8 <twi_init>
 148:	80 ee       	ldi	r24, 0xE0	; 224
 14a:	d8 cf       	rjmp	.-80     	; 0xfc <displayInitHT16K33>
 14c:	08 95       	ret

0000014e <wait>:
	display_array[row - 1][column + 1] = 1;
	display_array[row][column] = 1;
	display_array[row][column + 1] = 1;
	startGame();

}
 14e:	18 16       	cp	r1, r24
 150:	19 06       	cpc	r1, r25
 152:	6c f4       	brge	.+26     	; 0x16e <wait+0x20>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	e9 ef       	ldi	r30, 0xF9	; 249
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <wait+0xe>
 160:	00 c0       	rjmp	.+0      	; 0x162 <wait+0x14>
 162:	00 00       	nop
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	82 17       	cp	r24, r18
 16a:	93 07       	cpc	r25, r19
 16c:	a9 f7       	brne	.-22     	; 0x158 <wait+0xa>
 16e:	08 95       	ret

00000170 <startGame>:
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <row+0x1>
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <row>
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 188:	08 95       	ret

0000018a <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	startGame();
 18a:	f2 df       	rcall	.-28     	; 0x170 <startGame>
	displayInit();
 18c:	dc df       	rcall	.-72     	; 0x146 <displayInit>
 18e:	84 ef       	ldi	r24, 0xF4	; 244
	wait(500);
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	dd df       	rcall	.-70     	; 0x14e <wait>
 194:	ff cf       	rjmp	.-2      	; 0x194 <main+0xa>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
