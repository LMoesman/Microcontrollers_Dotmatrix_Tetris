
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000008d6  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800156  00800156  000009c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ab  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c43  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001129  00000000  00000000  00002e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00003f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a675  00000000  00000000  000042e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bda  00000000  00000000  0000e955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000f52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000304d  00000000  00000000  0000f677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	8c c1       	rjmp	.+792    	; 0x326 <__vector_3>
   e:	00 00       	nop
  10:	a7 c1       	rjmp	.+846    	; 0x360 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 35       	cpi	r26, 0x56	; 86
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e5       	ldi	r26, 0x56	; 86
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 36       	cpi	r26, 0x60	; 96
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	70 d2       	rcall	.+1248   	; 0x5a4 <main>
  c4:	06 c4       	rjmp	.+2060   	; 0x8d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
  fa:	08 95       	ret

000000fc <drawArray>:
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	e6 df       	rcall	.-52     	; 0xd4 <twi_start>
 108:	80 ee       	ldi	r24, 0xE0	; 224
 10a:	ed df       	rcall	.-38     	; 0xe6 <twi_tx>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	eb df       	rcall	.-42     	; 0xe6 <twi_tx>
 110:	e8 01       	movw	r28, r16
 112:	08 5f       	subi	r16, 0xF8	; 248
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	89 91       	ld	r24, Y+
 118:	80 fb       	bst	r24, 0
 11a:	87 95       	ror	r24
 11c:	87 f9       	bld	r24, 7
 11e:	e3 df       	rcall	.-58     	; 0xe6 <twi_tx>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e1 df       	rcall	.-62     	; 0xe6 <twi_tx>
 124:	c0 17       	cp	r28, r16
 126:	d1 07       	cpc	r29, r17
 128:	b1 f7       	brne	.-20     	; 0x116 <drawArray+0x1a>
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <displayInitHT16K33>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	08 2f       	mov	r16, r24
 144:	c7 df       	rcall	.-114    	; 0xd4 <twi_start>
 146:	80 2f       	mov	r24, r16
 148:	ce df       	rcall	.-100    	; 0xe6 <twi_tx>
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	cc df       	rcall	.-104    	; 0xe6 <twi_tx>
 14e:	c4 e7       	ldi	r28, 0x74	; 116
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	14 e9       	ldi	r17, 0x94	; 148
 154:	18 83       	st	Y, r17
 156:	be df       	rcall	.-132    	; 0xd4 <twi_start>
 158:	80 2f       	mov	r24, r16
 15a:	c5 df       	rcall	.-118    	; 0xe6 <twi_tx>
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	c3 df       	rcall	.-122    	; 0xe6 <twi_tx>
 160:	18 83       	st	Y, r17
 162:	b8 df       	rcall	.-144    	; 0xd4 <twi_start>
 164:	80 2f       	mov	r24, r16
 166:	bf df       	rcall	.-130    	; 0xe6 <twi_tx>
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	bd df       	rcall	.-134    	; 0xe6 <twi_tx>
 16c:	18 83       	st	Y, r17
 16e:	b2 df       	rcall	.-156    	; 0xd4 <twi_start>
 170:	80 2f       	mov	r24, r16
 172:	b9 df       	rcall	.-142    	; 0xe6 <twi_tx>
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	b7 df       	rcall	.-146    	; 0xe6 <twi_tx>
 178:	18 83       	st	Y, r17
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <displayInit>:
 184:	a1 df       	rcall	.-190    	; 0xc8 <twi_init>
 186:	80 ee       	ldi	r24, 0xE0	; 224
 188:	d8 cf       	rjmp	.-80     	; 0x13a <displayInitHT16K33>
 18a:	08 95       	ret

0000018c <wait>:
 18c:	18 16       	cp	r1, r24
 18e:	19 06       	cpc	r1, r25
 190:	6c f4       	brge	.+26     	; 0x1ac <wait+0x20>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	e9 ef       	ldi	r30, 0xF9	; 249
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <wait+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <wait+0x14>
 1a0:	00 00       	nop
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	a9 f7       	brne	.-22     	; 0x196 <wait+0xa>
 1ac:	08 95       	ret

000001ae <theCoolFullRowAnimation>:
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	98 2e       	mov	r9, r24
 1c8:	99 0c       	add	r9, r9
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	88 2e       	mov	r8, r24
 1ce:	88 0c       	add	r8, r8
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	68 94       	set
 1d8:	aa 24       	eor	r10, r10
 1da:	a7 f8       	bld	r10, 7
 1dc:	b1 2c       	mov	r11, r1
 1de:	0f 2e       	mov	r0, r31
 1e0:	f4 e7       	ldi	r31, 0x74	; 116
 1e2:	cf 2e       	mov	r12, r31
 1e4:	d1 2c       	mov	r13, r1
 1e6:	f0 2d       	mov	r31, r0
 1e8:	d4 e9       	ldi	r29, 0x94	; 148
 1ea:	74 df       	rcall	.-280    	; 0xd4 <twi_start>
 1ec:	80 ee       	ldi	r24, 0xE0	; 224
 1ee:	7b df       	rcall	.-266    	; 0xe6 <twi_tx>
 1f0:	89 2d       	mov	r24, r9
 1f2:	79 df       	rcall	.-270    	; 0xe6 <twi_tx>
 1f4:	8c 2f       	mov	r24, r28
 1f6:	80 95       	com	r24
 1f8:	80 fb       	bst	r24, 0
 1fa:	87 95       	ror	r24
 1fc:	87 f9       	bld	r24, 7
 1fe:	73 df       	rcall	.-282    	; 0xe6 <twi_tx>
 200:	75 01       	movw	r14, r10
 202:	00 2e       	mov	r0, r16
 204:	02 c0       	rjmp	.+4      	; 0x20a <theCoolFullRowAnimation+0x5c>
 206:	f5 94       	asr	r15
 208:	e7 94       	ror	r14
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <theCoolFullRowAnimation+0x58>
 20e:	ce 29       	or	r28, r14
 210:	f6 01       	movw	r30, r12
 212:	d0 83       	st	Z, r29
 214:	5f df       	rcall	.-322    	; 0xd4 <twi_start>
 216:	80 ee       	ldi	r24, 0xE0	; 224
 218:	66 df       	rcall	.-308    	; 0xe6 <twi_tx>
 21a:	88 2d       	mov	r24, r8
 21c:	64 df       	rcall	.-312    	; 0xe6 <twi_tx>
 21e:	8c 2f       	mov	r24, r28
 220:	80 95       	com	r24
 222:	80 fb       	bst	r24, 0
 224:	87 95       	ror	r24
 226:	87 f9       	bld	r24, 7
 228:	5e df       	rcall	.-324    	; 0xe6 <twi_tx>
 22a:	ce 29       	or	r28, r14
 22c:	f6 01       	movw	r30, r12
 22e:	d0 83       	st	Z, r29
 230:	8d e4       	ldi	r24, 0x4D	; 77
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	ab df       	rcall	.-170    	; 0x18c <wait>
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	09 30       	cpi	r16, 0x09	; 9
 23c:	11 05       	cpc	r17, r1
 23e:	a9 f6       	brne	.-86     	; 0x1ea <theCoolFullRowAnimation+0x3c>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	08 95       	ret

0000025a <setupDisplayArray>:
 25a:	7f 92       	push	r7
}blockLocation;
int score = 0;

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
 25c:	8f 92       	push	r8
 25e:	9f 92       	push	r9
 260:	af 92       	push	r10
 262:	bf 92       	push	r11
 264:	cf 92       	push	r12
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	04 e0       	ldi	r16, 0x04	; 4
 276:	11 e0       	ldi	r17, 0x01	; 1
 278:	4c 01       	movw	r8, r24
	int row;
	for(row = 0; row < 8; row++) {
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 27e:	0f 2e       	mov	r0, r31
 280:	fa e5       	ldi	r31, 0x5A	; 90
 282:	af 2e       	mov	r10, r31
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	bf 2e       	mov	r11, r31
 288:	f0 2d       	mov	r31, r0
				if(col == blockLocation.column || col == blockLocation.column + 1) {
					tempRow = tempRow | (128 >> col);
 28a:	68 94       	set
 28c:	cc 24       	eor	r12, r12
 28e:	c7 f8       	bld	r12, 7
 290:	d1 2c       	mov	r13, r1

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
 292:	f8 01       	movw	r30, r16
 294:	77 80       	ldd	r7, Z+7	; 0x07
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 296:	f5 01       	movw	r30, r10
 298:	60 81       	ld	r22, Z
 29a:	71 81       	ldd	r23, Z+1	; 0x01
 29c:	db 01       	movw	r26, r22
 29e:	11 97       	sbiw	r26, 0x01	; 1
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 2a0:	c2 81       	ldd	r28, Z+2	; 0x02
 2a2:	d3 81       	ldd	r29, Z+3	; 0x03
 2a4:	7e 01       	movw	r14, r28
 2a6:	ff ef       	ldi	r31, 0xFF	; 255
 2a8:	ef 1a       	sub	r14, r31
 2aa:	ff 0a       	sbc	r15, r31
 2ac:	08 5f       	subi	r16, 0xF8	; 248
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	f8 01       	movw	r30, r16
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 2b6:	64 17       	cp	r22, r20
 2b8:	75 07       	cpc	r23, r21
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <setupDisplayArray+0x68>
 2bc:	a4 17       	cp	r26, r20
 2be:	b5 07       	cpc	r27, r21
 2c0:	71 f4       	brne	.+28     	; 0x2de <setupDisplayArray+0x84>
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 2c2:	c2 17       	cp	r28, r18
 2c4:	d3 07       	cpc	r29, r19
 2c6:	19 f0       	breq	.+6      	; 0x2ce <setupDisplayArray+0x74>
 2c8:	e2 16       	cp	r14, r18
 2ca:	f3 06       	cpc	r15, r19
 2cc:	41 f4       	brne	.+16     	; 0x2de <setupDisplayArray+0x84>
					tempRow = tempRow | (128 >> col);
 2ce:	c6 01       	movw	r24, r12
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <setupDisplayArray+0x7e>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <setupDisplayArray+0x7a>
 2dc:	78 2a       	or	r7, r24
				}
			}
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
 2de:	82 91       	ld	r24, -Z
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <setupDisplayArray+0x90>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <setupDisplayArray+0x8c>
 2ee:	78 2a       	or	r7, r24
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	28 30       	cpi	r18, 0x08	; 8
 2f6:	31 05       	cpc	r19, r1
 2f8:	f1 f6       	brne	.-68     	; 0x2b6 <setupDisplayArray+0x5c>
				}
			}
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
 2fa:	f4 01       	movw	r30, r8
 2fc:	71 92       	st	Z+, r7
 2fe:	4f 01       	movw	r8, r30

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
 300:	4f 5f       	subi	r20, 0xFF	; 255
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	48 30       	cpi	r20, 0x08	; 8
 306:	51 05       	cpc	r21, r1
 308:	21 f6       	brne	.-120    	; 0x292 <setupDisplayArray+0x38>
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
	}
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	bf 90       	pop	r11
 31c:	af 90       	pop	r10
 31e:	9f 90       	pop	r9
 320:	8f 90       	pop	r8
 322:	7f 90       	pop	r7
 324:	08 95       	ret

00000326 <__vector_3>:
	
	checkForFullRows();
}

/******************************************************************/
ISR(INT2_vect) {
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	
	
	if(PIND == 0x0C){
 334:	80 b3       	in	r24, 0x10	; 16
 336:	8c 30       	cpi	r24, 0x0C	; 12
 338:	61 f0       	breq	.+24     	; 0x352 <__vector_3+0x2c>
		//Reset Game
		return;
	}
	if(blockLocation.column < 7){
 33a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <blockLocation+0x2>
 33e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <blockLocation+0x3>
 342:	87 30       	cpi	r24, 0x07	; 7
 344:	91 05       	cpc	r25, r1
 346:	2c f4       	brge	.+10     	; 0x352 <__vector_3+0x2c>
		blockLocation.column++;
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <blockLocation+0x3>
 34e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <blockLocation+0x2>
	}
	
}
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_4>:

/******************************************************************/
ISR(INT3_vect) {
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
	notes:			Set PORTC
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	
		if(PIND == 0x0C){
 36e:	80 b3       	in	r24, 0x10	; 16
 370:	8c 30       	cpi	r24, 0x0C	; 12
 372:	61 f0       	breq	.+24     	; 0x38c <__vector_4+0x2c>
			//Reset Game
			return;
		}
		if(blockLocation.column > 0){
 374:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <blockLocation+0x2>
 378:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <blockLocation+0x3>
 37c:	18 16       	cp	r1, r24
 37e:	19 06       	cpc	r1, r25
 380:	2c f4       	brge	.+10     	; 0x38c <__vector_4+0x2c>
			blockLocation.column--;
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <blockLocation+0x3>
 388:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <blockLocation+0x2>
		}
}
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <shoveDown>:
score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 39a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <i+0x1>
 39e:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <i>
 3a2:	9c 01       	movw	r18, r24
 3a4:	22 50       	subi	r18, 0x02	; 2
 3a6:	31 09       	sbc	r19, r1
 3a8:	fa f0       	brmi	.+62     	; 0x3e8 <shoveDown+0x4e>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	8c 5f       	subi	r24, 0xFC	; 252
 3b8:	9e 4f       	sbci	r25, 0xFE	; 254
		int rowToShove = x - 2;
		memcpy(display_array[x],display_array[rowToShove],sizeof(unsigned char) * 8);	//cpy the upper row to this row
 3ba:	ac 01       	movw	r20, r24
 3bc:	40 51       	subi	r20, 0x10	; 16
 3be:	51 09       	sbc	r21, r1
 3c0:	68 e0       	ldi	r22, 0x08	; 8
 3c2:	fa 01       	movw	r30, r20
 3c4:	dc 01       	movw	r26, r24
 3c6:	01 90       	ld	r0, Z+
 3c8:	0d 92       	st	X+, r0
 3ca:	6a 95       	dec	r22
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <shoveDown+0x2c>
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
 3ce:	dc 01       	movw	r26, r24
 3d0:	18 97       	sbiw	r26, 0x08	; 8
 3d2:	fc 01       	movw	r30, r24
 3d4:	78 97       	sbiw	r30, 0x18	; 24
 3d6:	88 e0       	ldi	r24, 0x08	; 8
 3d8:	01 90       	ld	r0, Z+
 3da:	0d 92       	st	X+, r0
 3dc:	8a 95       	dec	r24
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <shoveDown+0x3e>
score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 3e0:	22 50       	subi	r18, 0x02	; 2
 3e2:	31 09       	sbc	r19, r1
 3e4:	ca 01       	movw	r24, r20
 3e6:	4a f7       	brpl	.-46     	; 0x3ba <shoveDown+0x20>
 3e8:	08 95       	ret

000003ea <checkForFullRows>:
		}
	}
	return 1;
}

void checkForFullRows(void){
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	e4 e0       	ldi	r30, 0x04	; 4
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 3fa:	00 e0       	ldi	r16, 0x00	; 0
 3fc:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 1;
}

void checkForFullRows(void){
	int tempscore = 0;
 3fe:	e1 2c       	mov	r14, r1
 400:	f1 2c       	mov	r15, r1
 402:	1d c0       	rjmp	.+58     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
 404:	91 91       	ld	r25, Z+
 406:	91 30       	cpi	r25, 0x01	; 1
 408:	39 f4       	brne	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	df 01       	movw	r26, r30
 40c:	19 97       	sbiw	r26, 0x09	; 9
 40e:	9c 91       	ld	r25, X
 410:	91 30       	cpi	r25, 0x01	; 1
 412:	11 f4       	brne	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	2f 5f       	subi	r18, 0xFF	; 255
 416:	3f 4f       	sbci	r19, 0xFF	; 255
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
 418:	ec 17       	cp	r30, r28
 41a:	fd 07       	cpc	r31, r29
 41c:	99 f7       	brne	.-26     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
		}
		if(8 == count){	//whole row filled
 41e:	28 30       	cpi	r18, 0x08	; 8
 420:	31 05       	cpc	r19, r1
 422:	39 f4       	brne	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			tempscore += 10;
 424:	8a e0       	ldi	r24, 0x0A	; 10
 426:	e8 0e       	add	r14, r24
 428:	f1 1c       	adc	r15, r1
			theCoolFullRowAnimation(x);
 42a:	c8 01       	movw	r24, r16
 42c:	c0 de       	rcall	.-640    	; 0x1ae <theCoolFullRowAnimation>
			shoveDown(x);
 42e:	c8 01       	movw	r24, r16
 430:	b4 df       	rcall	.-152    	; 0x39a <shoveDown>
}

void checkForFullRows(void){
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 432:	0f 5f       	subi	r16, 0xFF	; 255
 434:	1f 4f       	sbci	r17, 0xFF	; 255
 436:	fe 01       	movw	r30, r28
 438:	08 30       	cpi	r16, 0x08	; 8
 43a:	11 05       	cpc	r17, r1
 43c:	29 f0       	breq	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 43e:	ef 01       	movw	r28, r30
 440:	28 96       	adiw	r28, 0x08	; 8
		}
	}
	return 1;
}

void checkForFullRows(void){
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	de cf       	rjmp	.-68     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			tempscore += 10;
			theCoolFullRowAnimation(x);
			shoveDown(x);
		}
	}
score += tempscore;
 448:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
 44c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
 450:	8e 0d       	add	r24, r14
 452:	9f 1d       	adc	r25, r15
 454:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
 458:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
	showDigit(score);
 45c:	32 d1       	rcall	.+612    	; 0x6c2 <showDigit>
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	08 95       	ret

0000046c <animateGame>:
		showDigit(9999);
	}
	i = rand() % 7;
}

void animateGame() {
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	28 97       	sbiw	r28, 0x08	; 8
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 && display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 484:	0a e5       	ldi	r16, 0x5A	; 90
 486:	11 e0       	ldi	r17, 0x01	; 1
}

void animateGame() {
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	e6 de       	rcall	.-564    	; 0x25a <setupDisplayArray>
		drawArray(displayBuffer);
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	34 de       	rcall	.-920    	; 0xfc <drawArray>
		wait(2000);
 494:	80 ed       	ldi	r24, 0xD0	; 208
 496:	97 e0       	ldi	r25, 0x07	; 7
 498:	79 de       	rcall	.-782    	; 0x18c <wait>
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 && display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 49a:	f8 01       	movw	r30, r16
 49c:	40 81       	ld	r20, Z
 49e:	51 81       	ldd	r21, Z+1	; 0x01
 4a0:	ca 01       	movw	r24, r20
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	22 81       	ldd	r18, Z+2	; 0x02
 4a6:	33 81       	ldd	r19, Z+3	; 0x03
 4a8:	fc 01       	movw	r30, r24
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	ec 5f       	subi	r30, 0xFC	; 252
 4b8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ba:	e2 0f       	add	r30, r18
 4bc:	f3 1f       	adc	r31, r19
 4be:	60 81       	ld	r22, Z
 4c0:	61 30       	cpi	r22, 0x01	; 1
 4c2:	91 f0       	breq	.+36     	; 0x4e8 <animateGame+0x7c>
 4c4:	fc 01       	movw	r30, r24
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	ec 5f       	subi	r30, 0xFC	; 252
 4d4:	fe 4f       	sbci	r31, 0xFE	; 254
 4d6:	e2 0f       	add	r30, r18
 4d8:	f3 1f       	adc	r31, r19
 4da:	61 81       	ldd	r22, Z+1	; 0x01
 4dc:	61 30       	cpi	r22, 0x01	; 1
 4de:	21 f0       	breq	.+8      	; 0x4e8 <animateGame+0x7c>
				blockLocation.row++;
 4e0:	f8 01       	movw	r30, r16
 4e2:	91 83       	std	Z+1, r25	; 0x01
 4e4:	80 83       	st	Z, r24
		 }else {
			 break;
		 }
		
	}
 4e6:	d0 cf       	rjmp	.-96     	; 0x488 <animateGame+0x1c>
	display_array[blockLocation.row][blockLocation.column] = 1;
 4e8:	ca 01       	movw	r24, r20
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	8c 5f       	subi	r24, 0xFC	; 252
 4f8:	9e 4f       	sbci	r25, 0xFE	; 254
 4fa:	fc 01       	movw	r30, r24
 4fc:	e2 0f       	add	r30, r18
 4fe:	f3 1f       	adc	r31, r19
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column] = 1;
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	44 0f       	add	r20, r20
 50a:	55 1f       	adc	r21, r21
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	44 50       	subi	r20, 0x04	; 4
 512:	5f 4f       	sbci	r21, 0xFF	; 255
 514:	fa 01       	movw	r30, r20
 516:	e2 0f       	add	r30, r18
 518:	f3 1f       	adc	r31, r19
 51a:	60 83       	st	Z, r22
	display_array[blockLocation.row][blockLocation.column + 1] = 1;
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	3f 4f       	sbci	r19, 0xFF	; 255
 520:	fc 01       	movw	r30, r24
 522:	e2 0f       	add	r30, r18
 524:	f3 1f       	adc	r31, r19
 526:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column + 1] = 1;
 528:	fa 01       	movw	r30, r20
 52a:	e2 0f       	add	r30, r18
 52c:	f3 1f       	adc	r31, r19
 52e:	60 83       	st	Z, r22
	blockLocation.isAnimating = 0;
 530:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <blockLocation+0x5>
 534:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <blockLocation+0x4>
	
	checkForFullRows();
 538:	58 df       	rcall	.-336    	; 0x3ea <checkForFullRows>
}
 53a:	28 96       	adiw	r28, 0x08	; 8
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	08 95       	ret

00000550 <startGame>:
		}
		displayBuffer[row] = tempRow; 
	}
}
void startGame(){
	blockLocation.isAnimating = 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <blockLocation+0x5>
 558:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <blockLocation+0x4>
	if ((display_array[0][i] != 1) && (display_array[0][i+1] != 1)) { 
 55c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <i>
 560:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <i+0x1>
 564:	fc 01       	movw	r30, r24
 566:	ec 5f       	subi	r30, 0xFC	; 252
 568:	fe 4f       	sbci	r31, 0xFE	; 254
 56a:	20 81       	ld	r18, Z
 56c:	21 30       	cpi	r18, 0x01	; 1
 56e:	71 f0       	breq	.+28     	; 0x58c <startGame+0x3c>
 570:	fc 01       	movw	r30, r24
 572:	ec 5f       	subi	r30, 0xFC	; 252
 574:	fe 4f       	sbci	r31, 0xFE	; 254
 576:	21 81       	ldd	r18, Z+1	; 0x01
 578:	21 30       	cpi	r18, 0x01	; 1
 57a:	41 f0       	breq	.+16     	; 0x58c <startGame+0x3c>
		blockLocation.row = 0;
 57c:	ea e5       	ldi	r30, 0x5A	; 90
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	11 82       	std	Z+1, r1	; 0x01
 582:	10 82       	st	Z, r1
		blockLocation.column = i;
 584:	93 83       	std	Z+3, r25	; 0x03
 586:	82 83       	std	Z+2, r24	; 0x02
		animateGame();
 588:	71 df       	rcall	.-286    	; 0x46c <animateGame>
 58a:	03 c0       	rjmp	.+6      	; 0x592 <startGame+0x42>
	}else {
		//Game over
		showDigit(9999);
 58c:	8f e0       	ldi	r24, 0x0F	; 15
 58e:	97 e2       	ldi	r25, 0x27	; 39
	}
	i = rand() % 7;
 590:	98 d0       	rcall	.+304    	; 0x6c2 <showDigit>
 592:	34 d1       	rcall	.+616    	; 0x7fc <rand>
 594:	67 e0       	ldi	r22, 0x07	; 7
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	c3 d0       	rcall	.+390    	; 0x720 <__divmodhi4>
 59a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <i+0x1>
 59e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <i>
 5a2:	08 95       	ret

000005a4 <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{	
	DDRD = 0x0C;
 5a4:	8c e0       	ldi	r24, 0x0C	; 12
 5a6:	81 bb       	out	0x11, r24	; 17
	
	EICRA |= 0xF0;
 5a8:	ea e6       	ldi	r30, 0x6A	; 106
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	80 6f       	ori	r24, 0xF0	; 240
 5b0:	80 83       	st	Z, r24
	EIMSK |= 0x0C;
 5b2:	89 b7       	in	r24, 0x39	; 57
 5b4:	8c 60       	ori	r24, 0x0C	; 12
 5b6:	89 bf       	out	0x39, r24	; 57
	
	sei();
 5b8:	78 94       	sei
	
	srand(2344);
 5ba:	88 e2       	ldi	r24, 0x28	; 40
 5bc:	99 e0       	ldi	r25, 0x09	; 9
 5be:	21 d1       	rcall	.+578    	; 0x802 <srand>
	displayInit();
 5c0:	e1 dd       	rcall	.-1086   	; 0x184 <displayInit>
	sevenSegInit();
 5c2:	a9 d0       	rcall	.+338    	; 0x716 <sevenSegInit>
 5c4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
	showDigit(score);
 5c8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
 5cc:	7a d0       	rcall	.+244    	; 0x6c2 <showDigit>
	wait(500);
 5ce:	84 ef       	ldi	r24, 0xF4	; 244
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	dc dd       	rcall	.-1096   	; 0x18c <wait>
 5d4:	ca e5       	ldi	r28, 0x5A	; 90
	
	//displayChar('1', 0, 0);
	//display();
	while(1==1) {
		if (blockLocation.isAnimating == 0) {
 5d6:	d1 e0       	ldi	r29, 0x01	; 1
 5d8:	8c 81       	ldd	r24, Y+4	; 0x04
 5da:	9d 81       	ldd	r25, Y+5	; 0x05
 5dc:	00 97       	sbiw	r24, 0x00	; 0
			startGame();
 5de:	f1 f7       	brne	.-4      	; 0x5dc <main+0x38>
 5e0:	b7 df       	rcall	.-146    	; 0x550 <startGame>
			wait(500);
 5e2:	84 ef       	ldi	r24, 0xF4	; 244
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	d2 dd       	rcall	.-1116   	; 0x18c <wait>
 5e8:	f7 cf       	rjmp	.-18     	; 0x5d8 <main+0x34>

000005ea <wait_us>:
 5ea:	18 16       	cp	r1, r24
 5ec:	19 06       	cpc	r1, r25
 5ee:	5c f4       	brge	.+22     	; 0x606 <wait_us+0x1c>
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f4:	42 e0       	ldi	r20, 0x02	; 2
 5f6:	4a 95       	dec	r20
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <wait_us+0xc>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <wait_us+0x12>
 5fc:	2f 5f       	subi	r18, 0xFF	; 255
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	82 17       	cp	r24, r18
 602:	93 07       	cpc	r25, r19
 604:	b9 f7       	brne	.-18     	; 0x5f4 <wait_us+0xa>
 606:	08 95       	ret

00000608 <sevenSegWriteByte>:
 608:	1f 93       	push	r17
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	18 2f       	mov	r17, r24
 610:	c8 e0       	ldi	r28, 0x08	; 8
 612:	d0 e0       	ldi	r29, 0x00	; 0
 614:	c1 98       	cbi	0x18, 1	; 24
 616:	82 e3       	ldi	r24, 0x32	; 50
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	e7 df       	rcall	.-50     	; 0x5ea <wait_us>
 61c:	10 ff       	sbrs	r17, 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <sevenSegWriteByte+0x1c>
 620:	c0 9a       	sbi	0x18, 0	; 24
 622:	01 c0       	rjmp	.+2      	; 0x626 <sevenSegWriteByte+0x1e>
 624:	c0 98       	cbi	0x18, 0	; 24
 626:	c1 9a       	sbi	0x18, 1	; 24
 628:	82 e3       	ldi	r24, 0x32	; 50
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	de df       	rcall	.-68     	; 0x5ea <wait_us>
 62e:	16 95       	lsr	r17
 630:	21 97       	sbiw	r28, 0x01	; 1
 632:	81 f7       	brne	.-32     	; 0x614 <sevenSegWriteByte+0xc>
 634:	c1 98       	cbi	0x18, 1	; 24
 636:	b8 98       	cbi	0x17, 0	; 23
 638:	c0 9a       	sbi	0x18, 0	; 24
 63a:	82 e3       	ldi	r24, 0x32	; 50
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	d5 df       	rcall	.-86     	; 0x5ea <wait_us>
 640:	86 b3       	in	r24, 0x16	; 22
 642:	b8 9a       	sbi	0x17, 0	; 23
 644:	c0 98       	cbi	0x18, 0	; 24
 646:	82 e3       	ldi	r24, 0x32	; 50
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	cf df       	rcall	.-98     	; 0x5ea <wait_us>
 64c:	c1 9a       	sbi	0x18, 1	; 24
 64e:	82 e3       	ldi	r24, 0x32	; 50
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	cb df       	rcall	.-106    	; 0x5ea <wait_us>
 654:	c1 98       	cbi	0x18, 1	; 24
 656:	88 9a       	sbi	0x11, 0	; 17
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	08 95       	ret

00000660 <sevenSegStart>:
 660:	c0 9a       	sbi	0x18, 0	; 24
 662:	c1 9a       	sbi	0x18, 1	; 24
 664:	82 e3       	ldi	r24, 0x32	; 50
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	c0 df       	rcall	.-128    	; 0x5ea <wait_us>
 66a:	c0 98       	cbi	0x18, 0	; 24
 66c:	08 95       	ret

0000066e <sevenSegStop>:
 66e:	c1 98       	cbi	0x18, 1	; 24
 670:	82 e3       	ldi	r24, 0x32	; 50
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	ba df       	rcall	.-140    	; 0x5ea <wait_us>
 676:	c0 98       	cbi	0x18, 0	; 24
 678:	82 e3       	ldi	r24, 0x32	; 50
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	b6 df       	rcall	.-148    	; 0x5ea <wait_us>
 67e:	c1 9a       	sbi	0x18, 1	; 24
 680:	82 e3       	ldi	r24, 0x32	; 50
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	b2 df       	rcall	.-156    	; 0x5ea <wait_us>
 686:	c0 9a       	sbi	0x18, 0	; 24
 688:	08 95       	ret

0000068a <sevenSegCmd>:
 68a:	cf 93       	push	r28
 68c:	c8 2f       	mov	r28, r24
 68e:	e8 df       	rcall	.-48     	; 0x660 <sevenSegStart>
 690:	8c 2f       	mov	r24, r28
 692:	ba df       	rcall	.-140    	; 0x608 <sevenSegWriteByte>
 694:	ec df       	rcall	.-40     	; 0x66e <sevenSegStop>
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <sevenSegConf>:
 69a:	8b e8       	ldi	r24, 0x8B	; 139
 69c:	f6 cf       	rjmp	.-20     	; 0x68a <sevenSegCmd>
 69e:	08 95       	ret

000006a0 <sevenSegDisplaySegs>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	d8 2f       	mov	r29, r24
 6a6:	c6 2f       	mov	r28, r22
 6a8:	84 e4       	ldi	r24, 0x44	; 68
 6aa:	ef df       	rcall	.-34     	; 0x68a <sevenSegCmd>
 6ac:	d9 df       	rcall	.-78     	; 0x660 <sevenSegStart>
 6ae:	8d 2f       	mov	r24, r29
 6b0:	80 6c       	ori	r24, 0xC0	; 192
 6b2:	aa df       	rcall	.-172    	; 0x608 <sevenSegWriteByte>
 6b4:	8c 2f       	mov	r24, r28
 6b6:	a8 df       	rcall	.-176    	; 0x608 <sevenSegWriteByte>
 6b8:	da df       	rcall	.-76     	; 0x66e <sevenSegStop>
 6ba:	ef df       	rcall	.-34     	; 0x69a <sevenSegConf>
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <showDigit>:
 6c2:	ff 92       	push	r15
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	c3 e0       	ldi	r28, 0x03	; 3
 6ce:	0a e0       	ldi	r16, 0x0A	; 10
 6d0:	10 e0       	ldi	r17, 0x00	; 0
 6d2:	b8 01       	movw	r22, r16
 6d4:	25 d0       	rcall	.+74     	; 0x720 <__divmodhi4>
 6d6:	f6 2e       	mov	r15, r22
 6d8:	d7 2f       	mov	r29, r23
 6da:	fc 01       	movw	r30, r24
 6dc:	ff 27       	eor	r31, r31
 6de:	e4 5b       	subi	r30, 0xB4	; 180
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	60 81       	ld	r22, Z
 6e4:	8c 2f       	mov	r24, r28
 6e6:	dc df       	rcall	.-72     	; 0x6a0 <sevenSegDisplaySegs>
 6e8:	8f 2d       	mov	r24, r15
 6ea:	9d 2f       	mov	r25, r29
 6ec:	c1 50       	subi	r28, 0x01	; 1
 6ee:	88 f7       	brcc	.-30     	; 0x6d2 <showDigit+0x10>
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	ff 90       	pop	r15
 6fa:	08 95       	ret

000006fc <sevenSegCleanup>:
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	cf df       	rcall	.-98     	; 0x6a0 <sevenSegDisplaySegs>
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	cc df       	rcall	.-104    	; 0x6a0 <sevenSegDisplaySegs>
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	82 e0       	ldi	r24, 0x02	; 2
 70c:	c9 df       	rcall	.-110    	; 0x6a0 <sevenSegDisplaySegs>
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	83 e0       	ldi	r24, 0x03	; 3
 712:	c6 cf       	rjmp	.-116    	; 0x6a0 <sevenSegDisplaySegs>
 714:	08 95       	ret

00000716 <sevenSegInit>:
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	87 bb       	out	0x17, r24	; 23
 71a:	18 ba       	out	0x18, r1	; 24
 71c:	ef cf       	rjmp	.-34     	; 0x6fc <sevenSegCleanup>
 71e:	08 95       	ret

00000720 <__divmodhi4>:
 720:	97 fb       	bst	r25, 7
 722:	07 2e       	mov	r0, r23
 724:	16 f4       	brtc	.+4      	; 0x72a <__divmodhi4+0xa>
 726:	00 94       	com	r0
 728:	06 d0       	rcall	.+12     	; 0x736 <__divmodhi4_neg1>
 72a:	77 fd       	sbrc	r23, 7
 72c:	08 d0       	rcall	.+16     	; 0x73e <__divmodhi4_neg2>
 72e:	0b d0       	rcall	.+22     	; 0x746 <__udivmodhi4>
 730:	07 fc       	sbrc	r0, 7
 732:	05 d0       	rcall	.+10     	; 0x73e <__divmodhi4_neg2>
 734:	3e f4       	brtc	.+14     	; 0x744 <__divmodhi4_exit>

00000736 <__divmodhi4_neg1>:
 736:	90 95       	com	r25
 738:	81 95       	neg	r24
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	08 95       	ret

0000073e <__divmodhi4_neg2>:
 73e:	70 95       	com	r23
 740:	61 95       	neg	r22
 742:	7f 4f       	sbci	r23, 0xFF	; 255

00000744 <__divmodhi4_exit>:
 744:	08 95       	ret

00000746 <__udivmodhi4>:
 746:	aa 1b       	sub	r26, r26
 748:	bb 1b       	sub	r27, r27
 74a:	51 e1       	ldi	r21, 0x11	; 17
 74c:	07 c0       	rjmp	.+14     	; 0x75c <__udivmodhi4_ep>

0000074e <__udivmodhi4_loop>:
 74e:	aa 1f       	adc	r26, r26
 750:	bb 1f       	adc	r27, r27
 752:	a6 17       	cp	r26, r22
 754:	b7 07       	cpc	r27, r23
 756:	10 f0       	brcs	.+4      	; 0x75c <__udivmodhi4_ep>
 758:	a6 1b       	sub	r26, r22
 75a:	b7 0b       	sbc	r27, r23

0000075c <__udivmodhi4_ep>:
 75c:	88 1f       	adc	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	5a 95       	dec	r21
 762:	a9 f7       	brne	.-22     	; 0x74e <__udivmodhi4_loop>
 764:	80 95       	com	r24
 766:	90 95       	com	r25
 768:	bc 01       	movw	r22, r24
 76a:	cd 01       	movw	r24, r26
 76c:	08 95       	ret

0000076e <do_rand>:
 76e:	8f 92       	push	r8
 770:	9f 92       	push	r9
 772:	af 92       	push	r10
 774:	bf 92       	push	r11
 776:	cf 92       	push	r12
 778:	df 92       	push	r13
 77a:	ef 92       	push	r14
 77c:	ff 92       	push	r15
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	ec 01       	movw	r28, r24
 784:	68 81       	ld	r22, Y
 786:	79 81       	ldd	r23, Y+1	; 0x01
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	9b 81       	ldd	r25, Y+3	; 0x03
 78c:	61 15       	cp	r22, r1
 78e:	71 05       	cpc	r23, r1
 790:	81 05       	cpc	r24, r1
 792:	91 05       	cpc	r25, r1
 794:	21 f4       	brne	.+8      	; 0x79e <do_rand+0x30>
 796:	64 e2       	ldi	r22, 0x24	; 36
 798:	79 ed       	ldi	r23, 0xD9	; 217
 79a:	8b e5       	ldi	r24, 0x5B	; 91
 79c:	97 e0       	ldi	r25, 0x07	; 7
 79e:	2d e1       	ldi	r18, 0x1D	; 29
 7a0:	33 ef       	ldi	r19, 0xF3	; 243
 7a2:	41 e0       	ldi	r20, 0x01	; 1
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	38 d0       	rcall	.+112    	; 0x818 <__divmodsi4>
 7a8:	49 01       	movw	r8, r18
 7aa:	5a 01       	movw	r10, r20
 7ac:	9b 01       	movw	r18, r22
 7ae:	ac 01       	movw	r20, r24
 7b0:	a7 ea       	ldi	r26, 0xA7	; 167
 7b2:	b1 e4       	ldi	r27, 0x41	; 65
 7b4:	4d d0       	rcall	.+154    	; 0x850 <__muluhisi3>
 7b6:	6b 01       	movw	r12, r22
 7b8:	7c 01       	movw	r14, r24
 7ba:	ac ee       	ldi	r26, 0xEC	; 236
 7bc:	b4 ef       	ldi	r27, 0xF4	; 244
 7be:	a5 01       	movw	r20, r10
 7c0:	94 01       	movw	r18, r8
 7c2:	52 d0       	rcall	.+164    	; 0x868 <__mulohisi3>
 7c4:	dc 01       	movw	r26, r24
 7c6:	cb 01       	movw	r24, r22
 7c8:	8c 0d       	add	r24, r12
 7ca:	9d 1d       	adc	r25, r13
 7cc:	ae 1d       	adc	r26, r14
 7ce:	bf 1d       	adc	r27, r15
 7d0:	b7 ff       	sbrs	r27, 7
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <do_rand+0x6c>
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	a1 09       	sbc	r26, r1
 7d8:	b0 48       	sbci	r27, 0x80	; 128
 7da:	88 83       	st	Y, r24
 7dc:	99 83       	std	Y+1, r25	; 0x01
 7de:	aa 83       	std	Y+2, r26	; 0x02
 7e0:	bb 83       	std	Y+3, r27	; 0x03
 7e2:	9f 77       	andi	r25, 0x7F	; 127
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	ff 90       	pop	r15
 7ea:	ef 90       	pop	r14
 7ec:	df 90       	pop	r13
 7ee:	cf 90       	pop	r12
 7f0:	bf 90       	pop	r11
 7f2:	af 90       	pop	r10
 7f4:	9f 90       	pop	r9
 7f6:	8f 90       	pop	r8
 7f8:	08 95       	ret

000007fa <rand_r>:
 7fa:	b9 cf       	rjmp	.-142    	; 0x76e <do_rand>

000007fc <rand>:
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	b6 cf       	rjmp	.-148    	; 0x76e <do_rand>

00000802 <srand>:
 802:	a0 e0       	ldi	r26, 0x00	; 0
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 80a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 80e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 812:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 816:	08 95       	ret

00000818 <__divmodsi4>:
 818:	05 2e       	mov	r0, r21
 81a:	97 fb       	bst	r25, 7
 81c:	16 f4       	brtc	.+4      	; 0x822 <__divmodsi4+0xa>
 81e:	00 94       	com	r0
 820:	0f d0       	rcall	.+30     	; 0x840 <__negsi2>
 822:	57 fd       	sbrc	r21, 7
 824:	05 d0       	rcall	.+10     	; 0x830 <__divmodsi4_neg2>
 826:	24 d0       	rcall	.+72     	; 0x870 <__udivmodsi4>
 828:	07 fc       	sbrc	r0, 7
 82a:	02 d0       	rcall	.+4      	; 0x830 <__divmodsi4_neg2>
 82c:	46 f4       	brtc	.+16     	; 0x83e <__divmodsi4_exit>
 82e:	08 c0       	rjmp	.+16     	; 0x840 <__negsi2>

00000830 <__divmodsi4_neg2>:
 830:	50 95       	com	r21
 832:	40 95       	com	r20
 834:	30 95       	com	r19
 836:	21 95       	neg	r18
 838:	3f 4f       	sbci	r19, 0xFF	; 255
 83a:	4f 4f       	sbci	r20, 0xFF	; 255
 83c:	5f 4f       	sbci	r21, 0xFF	; 255

0000083e <__divmodsi4_exit>:
 83e:	08 95       	ret

00000840 <__negsi2>:
 840:	90 95       	com	r25
 842:	80 95       	com	r24
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__muluhisi3>:
 850:	31 d0       	rcall	.+98     	; 0x8b4 <__umulhisi3>
 852:	a5 9f       	mul	r26, r21
 854:	90 0d       	add	r25, r0
 856:	b4 9f       	mul	r27, r20
 858:	90 0d       	add	r25, r0
 85a:	a4 9f       	mul	r26, r20
 85c:	80 0d       	add	r24, r0
 85e:	91 1d       	adc	r25, r1
 860:	11 24       	eor	r1, r1
 862:	08 95       	ret

00000864 <__mulshisi3>:
 864:	b7 ff       	sbrs	r27, 7
 866:	f4 cf       	rjmp	.-24     	; 0x850 <__muluhisi3>

00000868 <__mulohisi3>:
 868:	f3 df       	rcall	.-26     	; 0x850 <__muluhisi3>
 86a:	82 1b       	sub	r24, r18
 86c:	93 0b       	sbc	r25, r19
 86e:	08 95       	ret

00000870 <__udivmodsi4>:
 870:	a1 e2       	ldi	r26, 0x21	; 33
 872:	1a 2e       	mov	r1, r26
 874:	aa 1b       	sub	r26, r26
 876:	bb 1b       	sub	r27, r27
 878:	fd 01       	movw	r30, r26
 87a:	0d c0       	rjmp	.+26     	; 0x896 <__udivmodsi4_ep>

0000087c <__udivmodsi4_loop>:
 87c:	aa 1f       	adc	r26, r26
 87e:	bb 1f       	adc	r27, r27
 880:	ee 1f       	adc	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	a2 17       	cp	r26, r18
 886:	b3 07       	cpc	r27, r19
 888:	e4 07       	cpc	r30, r20
 88a:	f5 07       	cpc	r31, r21
 88c:	20 f0       	brcs	.+8      	; 0x896 <__udivmodsi4_ep>
 88e:	a2 1b       	sub	r26, r18
 890:	b3 0b       	sbc	r27, r19
 892:	e4 0b       	sbc	r30, r20
 894:	f5 0b       	sbc	r31, r21

00000896 <__udivmodsi4_ep>:
 896:	66 1f       	adc	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	1a 94       	dec	r1
 8a0:	69 f7       	brne	.-38     	; 0x87c <__udivmodsi4_loop>
 8a2:	60 95       	com	r22
 8a4:	70 95       	com	r23
 8a6:	80 95       	com	r24
 8a8:	90 95       	com	r25
 8aa:	9b 01       	movw	r18, r22
 8ac:	ac 01       	movw	r20, r24
 8ae:	bd 01       	movw	r22, r26
 8b0:	cf 01       	movw	r24, r30
 8b2:	08 95       	ret

000008b4 <__umulhisi3>:
 8b4:	a2 9f       	mul	r26, r18
 8b6:	b0 01       	movw	r22, r0
 8b8:	b3 9f       	mul	r27, r19
 8ba:	c0 01       	movw	r24, r0
 8bc:	a3 9f       	mul	r26, r19
 8be:	70 0d       	add	r23, r0
 8c0:	81 1d       	adc	r24, r1
 8c2:	11 24       	eor	r1, r1
 8c4:	91 1d       	adc	r25, r1
 8c6:	b2 9f       	mul	r27, r18
 8c8:	70 0d       	add	r23, r0
 8ca:	81 1d       	adc	r24, r1
 8cc:	11 24       	eor	r1, r1
 8ce:	91 1d       	adc	r25, r1
 8d0:	08 95       	ret

000008d2 <_exit>:
 8d2:	f8 94       	cli

000008d4 <__stop_program>:
 8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <__stop_program>
