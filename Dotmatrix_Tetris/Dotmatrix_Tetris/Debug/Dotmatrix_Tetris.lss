
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e37  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e7  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090e  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009c19  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025c  00000000  00000000  0000c199  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000c3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002ebd  00000000  00000000  0000c485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6a d0       	rcall	.+212    	; 0x17e <main>
  aa:	72 c0       	rjmp	.+228    	; 0x190 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <displayChar>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  ae:	08 95       	ret

000000b0 <twi_init>:
  b0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  ba:	08 95       	ret

000000bc <twi_start>:
  bc:	84 ea       	ldi	r24, 0xA4	; 164
  be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  c2:	e4 e7       	ldi	r30, 0x74	; 116
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <twi_start+0xa>
  cc:	08 95       	ret

000000ce <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
  ce:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
  d8:	e4 e7       	ldi	r30, 0x74	; 116
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	ec f7       	brge	.-6      	; 0xdc <twi_tx+0xe>
}
  e2:	08 95       	ret

000000e4 <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	c8 2f       	mov	r28, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
  ee:	e6 df       	rcall	.-52     	; 0xbc <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
  f0:	8c 2f       	mov	r24, r28
  f2:	ed df       	rcall	.-38     	; 0xce <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
  f4:	81 e2       	ldi	r24, 0x21	; 33
  f6:	eb df       	rcall	.-42     	; 0xce <twi_tx>
  f8:	04 e7       	ldi	r16, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	d4 e9       	ldi	r29, 0x94	; 148
  fe:	f8 01       	movw	r30, r16
 100:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 102:	dc df       	rcall	.-72     	; 0xbc <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 104:	8c 2f       	mov	r24, r28
 106:	e3 df       	rcall	.-58     	; 0xce <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 108:	80 ea       	ldi	r24, 0xA0	; 160
 10a:	e1 df       	rcall	.-62     	; 0xce <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 10c:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 10e:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 110:	d5 df       	rcall	.-86     	; 0xbc <twi_start>
 112:	8c 2f       	mov	r24, r28
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 114:	dc df       	rcall	.-72     	; 0xce <twi_tx>
 116:	81 ee       	ldi	r24, 0xE1	; 225
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 118:	da df       	rcall	.-76     	; 0xce <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 11a:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 11c:	d0 83       	st	Z, r29
 11e:	ce df       	rcall	.-100    	; 0xbc <twi_start>
	twi_tx(0x81);			// Display ON, Blinking OFF
 120:	8c 2f       	mov	r24, r28
 122:	d5 df       	rcall	.-86     	; 0xce <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 124:	81 e8       	ldi	r24, 0x81	; 129
 126:	d3 df       	rcall	.-90     	; 0xce <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0x81);			// Display ON, Blinking OFF
	twi_stop();
	
	// Beeld een patroon af op display (test)
	twi_start();
 128:	f8 01       	movw	r30, r16
 12a:	d0 83       	st	Z, r29
	twi_tx(i2c_address);
 12c:	c7 df       	rcall	.-114    	; 0xbc <twi_start>
 12e:	8c 2f       	mov	r24, r28
 130:	ce df       	rcall	.-100    	; 0xce <twi_tx>
	twi_tx(0x00);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	cc df       	rcall	.-104    	; 0xce <twi_tx>
 136:	c8 e0       	ldi	r28, 0x08	; 8
 138:	80 e4       	ldi	r24, 0x40	; 64
	uint8_t a = 0x55;
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		a ^= 0xFF;
		uint8_t data =0x80>>1 | 0x40<<7;
		twi_tx( data);
 13a:	c9 df       	rcall	.-110    	; 0xce <twi_tx>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	c7 df       	rcall	.-114    	; 0xce <twi_tx>
		twi_tx( 0x00);
 140:	c1 50       	subi	r28, 0x01	; 1
 142:	d1 f7       	brne	.-12     	; 0x138 <displayInitHT16K33+0x54>
 144:	84 e9       	ldi	r24, 0x94	; 148
 146:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
		uint8_t data =0x80>>1 | 0x40<<7;
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <displayInit>:
 154:	ad df       	rcall	.-166    	; 0xb0 <twi_init>
 156:	80 ee       	ldi	r24, 0xE0	; 224
 158:	c5 cf       	rjmp	.-118    	; 0xe4 <displayInitHT16K33>
notes:			Init display
Version :    	DMK, Initial code
*******************************************************************/
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
 15a:	08 95       	ret

0000015c <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 15c:	18 16       	cp	r1, r24
 15e:	19 06       	cpc	r1, r25
 160:	6c f4       	brge	.+26     	; 0x17c <wait+0x20>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	e9 ef       	ldi	r30, 0xF9	; 249
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <wait+0xe>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <wait+0x14>
 170:	00 00       	nop
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	82 17       	cp	r24, r18
 178:	93 07       	cpc	r25, r19
 17a:	a9 f7       	brne	.-22     	; 0x166 <wait+0xa>
 17c:	08 95       	ret

0000017e <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	displayInit();
 17e:	ea df       	rcall	.-44     	; 0x154 <displayInit>
	wait(500);
 180:	84 ef       	ldi	r24, 0xF4	; 244
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	eb df       	rcall	.-42     	; 0x15c <wait>

	displayChar('1', 0, 0);
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	81 e3       	ldi	r24, 0x31	; 49
 18c:	90 df       	rcall	.-224    	; 0xae <displayChar>
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x10>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
