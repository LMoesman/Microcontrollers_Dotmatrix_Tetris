
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800148  00800148  00000476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec3  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a46  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e6  00000000  00000000  00001e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009c3b  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ee  00000000  00000000  0000c653  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000cb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d25  00000000  00000000  0000cbc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 34       	cpi	r26, 0x48	; 72
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e4       	ldi	r26, 0x48	; 72
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	59 d1       	rcall	.+690    	; 0x376 <main>
  c4:	68 c1       	rjmp	.+720    	; 0x396 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
}
  fa:	08 95       	ret

000000fc <drawArray>:
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
}

void drawArray(unsigned char* buffer){
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
	twi_start();
 106:	e6 df       	rcall	.-52     	; 0xd4 <twi_start>
	twi_tx(D0_I2C_ADDR);
 108:	80 ee       	ldi	r24, 0xE0	; 224
 10a:	ed df       	rcall	.-38     	; 0xe6 <twi_tx>
	twi_tx(0x00);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	eb df       	rcall	.-42     	; 0xe6 <twi_tx>
 110:	e8 01       	movw	r28, r16
 112:	08 5f       	subi	r16, 0xF8	; 248
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	89 91       	ld	r24, Y+
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buffer[idx];
 118:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 11a:	87 95       	ror	r24
 11c:	87 f9       	bld	r24, 7
 11e:	e3 df       	rcall	.-58     	; 0xe6 <twi_tx>
		twi_tx( 0x00);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e1 df       	rcall	.-62     	; 0xe6 <twi_tx>
 124:	c0 17       	cp	r28, r16

void drawArray(unsigned char* buffer){
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 126:	d1 07       	cpc	r29, r17
 128:	b1 f7       	brne	.-20     	; 0x116 <drawArray+0x1a>
 12a:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 12c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	df 91       	pop	r29
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
	
}
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <displayInitHT16K33>:
 13a:	0f 93       	push	r16
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	08 2f       	mov	r16, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
 144:	c7 df       	rcall	.-114    	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
 146:	80 2f       	mov	r24, r16
 148:	ce df       	rcall	.-100    	; 0xe6 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	cc df       	rcall	.-104    	; 0xe6 <twi_tx>
 14e:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	14 e9       	ldi	r17, 0x94	; 148
 154:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 156:	be df       	rcall	.-132    	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 158:	80 2f       	mov	r24, r16
 15a:	c5 df       	rcall	.-118    	; 0xe6 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	c3 df       	rcall	.-122    	; 0xe6 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 160:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 162:	b8 df       	rcall	.-144    	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 164:	80 2f       	mov	r24, r16
 166:	bf df       	rcall	.-130    	; 0xe6 <twi_tx>
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	bd df       	rcall	.-134    	; 0xe6 <twi_tx>
 16c:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 16e:	b2 df       	rcall	.-156    	; 0xd4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 170:	80 2f       	mov	r24, r16
 172:	b9 df       	rcall	.-142    	; 0xe6 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	b7 df       	rcall	.-146    	; 0xe6 <twi_tx>
 178:	18 83       	st	Y, r17
	twi_tx(0x81);			// Display ON, Blinking OFF
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 180:	0f 91       	pop	r16
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
*/
}
 182:	08 95       	ret

00000184 <displayInit>:
 184:	a1 df       	rcall	.-190    	; 0xc8 <twi_init>
 186:	80 ee       	ldi	r24, 0xE0	; 224
 188:	d8 cf       	rjmp	.-80     	; 0x13a <displayInitHT16K33>
 18a:	08 95       	ret

0000018c <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 18c:	18 16       	cp	r1, r24
 18e:	19 06       	cpc	r1, r25
 190:	6c f4       	brge	.+26     	; 0x1ac <wait+0x20>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	e9 ef       	ldi	r30, 0xF9	; 249
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <wait+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <wait+0x14>
 1a0:	00 00       	nop
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	a9 f7       	brne	.-22     	; 0x196 <wait+0xa>
 1ac:	08 95       	ret

000001ae <setupDisplayArray>:
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

void setupDisplayArray(unsigned char* displayBuffer){
 1ae:	7f 92       	push	r7
 1b0:	8f 92       	push	r8
 1b2:	9f 92       	push	r9
 1b4:	af 92       	push	r10
 1b6:	bf 92       	push	r11
 1b8:	cf 92       	push	r12
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 e0       	ldi	r16, 0x00	; 0
 1ca:	11 e0       	ldi	r17, 0x01	; 1
 1cc:	4c 01       	movw	r8, r24
	int row;
	for(row = 0; row < 8; row++) {
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f8 e4       	ldi	r31, 0x48	; 72
 1d6:	af 2e       	mov	r10, r31
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	bf 2e       	mov	r11, r31
 1dc:	f0 2d       	mov	r31, r0
				if(col == blockLocation.column || col == blockLocation.column + 1) {
					tempRow = tempRow | (1 << col);
 1de:	cc 24       	eor	r12, r12
 1e0:	c3 94       	inc	r12
 1e2:	d1 2c       	mov	r13, r1

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
 1e4:	f8 01       	movw	r30, r16
 1e6:	77 80       	ldd	r7, Z+7	; 0x07
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 1e8:	f5 01       	movw	r30, r10
 1ea:	60 81       	ld	r22, Z
 1ec:	71 81       	ldd	r23, Z+1	; 0x01
 1ee:	db 01       	movw	r26, r22
 1f0:	11 97       	sbiw	r26, 0x01	; 1
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 1f2:	c2 81       	ldd	r28, Z+2	; 0x02
 1f4:	d3 81       	ldd	r29, Z+3	; 0x03
 1f6:	7e 01       	movw	r14, r28
 1f8:	ff ef       	ldi	r31, 0xFF	; 255
 1fa:	ef 1a       	sub	r14, r31
 1fc:	ff 0a       	sbc	r15, r31
 1fe:	08 5f       	subi	r16, 0xF8	; 248
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	f8 01       	movw	r30, r16
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 208:	64 17       	cp	r22, r20
 20a:	75 07       	cpc	r23, r21
 20c:	19 f0       	breq	.+6      	; 0x214 <setupDisplayArray+0x66>
 20e:	a4 17       	cp	r26, r20
 210:	b5 07       	cpc	r27, r21
 212:	71 f4       	brne	.+28     	; 0x230 <setupDisplayArray+0x82>
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 214:	c2 17       	cp	r28, r18
 216:	d3 07       	cpc	r29, r19
 218:	19 f0       	breq	.+6      	; 0x220 <setupDisplayArray+0x72>
 21a:	e2 16       	cp	r14, r18
 21c:	f3 06       	cpc	r15, r19
 21e:	41 f4       	brne	.+16     	; 0x230 <setupDisplayArray+0x82>
					tempRow = tempRow | (1 << col);
 220:	c6 01       	movw	r24, r12
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <setupDisplayArray+0x7c>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <setupDisplayArray+0x78>
 22e:	78 2a       	or	r7, r24
				}
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
 230:	82 91       	ld	r24, -Z
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 2e       	mov	r0, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <setupDisplayArray+0x8e>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <setupDisplayArray+0x8a>
 240:	78 2a       	or	r7, r24
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	3f 4f       	sbci	r19, 0xFF	; 255
 246:	28 30       	cpi	r18, 0x08	; 8
 248:	31 05       	cpc	r19, r1
 24a:	f1 f6       	brne	.-68     	; 0x208 <setupDisplayArray+0x5a>
					tempRow = tempRow | (1 << col);
				}
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
 24c:	f4 01       	movw	r30, r8
 24e:	71 92       	st	Z+, r7
 250:	4f 01       	movw	r8, r30
	}
}

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
 252:	4f 5f       	subi	r20, 0xFF	; 255
 254:	5f 4f       	sbci	r21, 0xFF	; 255
 256:	48 30       	cpi	r20, 0x08	; 8
 258:	51 05       	cpc	r21, r1
 25a:	21 f6       	brne	.-120    	; 0x1e4 <setupDisplayArray+0x36>
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
	}
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	bf 90       	pop	r11
 26e:	af 90       	pop	r10
 270:	9f 90       	pop	r9
 272:	8f 90       	pop	r8
 274:	7f 90       	pop	r7
 276:	08 95       	ret

00000278 <animateGame>:
	blockLocation.column = 3;
	blockLocation.isAnimating = 1;
	animateGame();
}

void animateGame() {
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	28 97       	sbiw	r28, 0x08	; 8
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		 if (display_array[blockLocation.row+1][blockLocation.column] && display_array[blockLocation.row+1][blockLocation.column - 1]!= 1) {
 290:	08 e4       	ldi	r16, 0x48	; 72
 292:	11 e0       	ldi	r17, 0x01	; 1
}

void animateGame() {
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
 294:	ce 01       	movw	r24, r28
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	8a df       	rcall	.-236    	; 0x1ae <setupDisplayArray>
		drawArray(displayBuffer);
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	2e df       	rcall	.-420    	; 0xfc <drawArray>
		wait(2000);
 2a0:	80 ed       	ldi	r24, 0xD0	; 208
 2a2:	97 e0       	ldi	r25, 0x07	; 7
 2a4:	73 df       	rcall	.-282    	; 0x18c <wait>
		 if (display_array[blockLocation.row+1][blockLocation.column] && display_array[blockLocation.row+1][blockLocation.column - 1]!= 1) {
 2a6:	f8 01       	movw	r30, r16
 2a8:	40 81       	ld	r20, Z
 2aa:	51 81       	ldd	r21, Z+1	; 0x01
 2ac:	ca 01       	movw	r24, r20
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	22 81       	ldd	r18, Z+2	; 0x02
 2b2:	33 81       	ldd	r19, Z+3	; 0x03
 2b4:	fc 01       	movw	r30, r24
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e0 50       	subi	r30, 0x00	; 0
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	e2 0f       	add	r30, r18
 2c8:	f3 1f       	adc	r31, r19
 2ca:	60 81       	ld	r22, Z
 2cc:	66 23       	and	r22, r22
 2ce:	91 f0       	breq	.+36     	; 0x2f4 <animateGame+0x7c>
 2d0:	fc 01       	movw	r30, r24
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	e2 0f       	add	r30, r18
 2e0:	f3 1f       	adc	r31, r19
 2e2:	e1 50       	subi	r30, 0x01	; 1
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	60 81       	ld	r22, Z
 2e8:	61 30       	cpi	r22, 0x01	; 1
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <animateGame+0x7c>
			 blockLocation.row++;
 2ec:	f8 01       	movw	r30, r16
 2ee:	91 83       	std	Z+1, r25	; 0x01
 2f0:	80 83       	st	Z, r24
		 }else {
			 break;
		 }
	}
 2f2:	d0 cf       	rjmp	.-96     	; 0x294 <animateGame+0x1c>
	display_array[blockLocation.row][blockLocation.column] = 1;
 2f4:	ca 01       	movw	r24, r20
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	80 50       	subi	r24, 0x00	; 0
 304:	9f 4f       	sbci	r25, 0xFF	; 255
 306:	fc 01       	movw	r30, r24
 308:	e2 0f       	add	r30, r18
 30a:	f3 1f       	adc	r31, r19
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column] = 1;
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	44 0f       	add	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	48 50       	subi	r20, 0x08	; 8
 31e:	5f 4f       	sbci	r21, 0xFF	; 255
 320:	fa 01       	movw	r30, r20
 322:	e2 0f       	add	r30, r18
 324:	f3 1f       	adc	r31, r19
 326:	60 83       	st	Z, r22
	display_array[blockLocation.row][blockLocation.column + 1] = 1;
 328:	2f 5f       	subi	r18, 0xFF	; 255
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
 32c:	fc 01       	movw	r30, r24
 32e:	e2 0f       	add	r30, r18
 330:	f3 1f       	adc	r31, r19
 332:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column + 1] = 1;
 334:	fa 01       	movw	r30, r20
 336:	e2 0f       	add	r30, r18
 338:	f3 1f       	adc	r31, r19
 33a:	60 83       	st	Z, r22
	blockLocation.isAnimating = 0;
 33c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x5>
 340:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end+0x4>
}
 344:	28 96       	adiw	r28, 0x08	; 8
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <startGame>:
		}
		displayBuffer[row] = tempRow; 
	}
}
void startGame(){
	blockLocation.row = 1;
 35a:	e8 e4       	ldi	r30, 0x48	; 72
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
	blockLocation.column = 3;
 366:	23 e0       	ldi	r18, 0x03	; 3
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	33 83       	std	Z+3, r19	; 0x03
 36c:	22 83       	std	Z+2, r18	; 0x02
	blockLocation.isAnimating = 1;
 36e:	95 83       	std	Z+5, r25	; 0x05
 370:	84 83       	std	Z+4, r24	; 0x04
	animateGame();
 372:	82 cf       	rjmp	.-252    	; 0x278 <animateGame>
 374:	08 95       	ret

00000376 <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	displayInit();
 376:	06 df       	rcall	.-500    	; 0x184 <displayInit>
	startGame();
 378:	f0 df       	rcall	.-32     	; 0x35a <startGame>
 37a:	84 ef       	ldi	r24, 0xF4	; 244
	wait(500);
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	06 df       	rcall	.-500    	; 0x18c <wait>
 380:	c8 e4       	ldi	r28, 0x48	; 72

	//displayChar('1', 0, 0);
	//display();
	while(1==1) {
		if (blockLocation.isAnimating == 0) {
 382:	d1 e0       	ldi	r29, 0x01	; 1
 384:	8c 81       	ldd	r24, Y+4	; 0x04
 386:	9d 81       	ldd	r25, Y+5	; 0x05
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	f1 f7       	brne	.-4      	; 0x388 <main+0x12>
			startGame();
 38c:	e6 df       	rcall	.-52     	; 0x35a <startGame>
			wait(500);
 38e:	84 ef       	ldi	r24, 0xF4	; 244
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	fc de       	rcall	.-520    	; 0x18c <wait>
 394:	f7 cf       	rjmp	.-18     	; 0x384 <main+0xe>

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
