
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000c80  00000d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080015e  0080015e  00000d72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001810  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7b  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012bf  00000000  00000000  000033ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  0000466c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a675  00000000  00000000  00004a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dcc  00000000  00000000  0000f0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000fec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000304d  00000000  00000000  00010019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	de c1       	rjmp	.+956    	; 0x3ca <__vector_3>
   e:	00 00       	nop
  10:	33 c2       	rjmp	.+1126   	; 0x478 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 35       	cpi	r26, 0x5E	; 94
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e5       	ldi	r26, 0x5E	; 94
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 37       	cpi	r26, 0x72	; 114
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d4       	rcall	.+2052   	; 0x8c8 <main>
  c4:	db c5       	rjmp	.+2998   	; 0xc7c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
  fa:	08 95       	ret

000000fc <drawArray>:
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	e6 df       	rcall	.-52     	; 0xd4 <twi_start>
 108:	80 ee       	ldi	r24, 0xE0	; 224
 10a:	ed df       	rcall	.-38     	; 0xe6 <twi_tx>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	eb df       	rcall	.-42     	; 0xe6 <twi_tx>
 110:	e8 01       	movw	r28, r16
 112:	08 5f       	subi	r16, 0xF8	; 248
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	89 91       	ld	r24, Y+
 118:	80 fb       	bst	r24, 0
 11a:	87 95       	ror	r24
 11c:	87 f9       	bld	r24, 7
 11e:	e3 df       	rcall	.-58     	; 0xe6 <twi_tx>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e1 df       	rcall	.-62     	; 0xe6 <twi_tx>
 124:	c0 17       	cp	r28, r16
 126:	d1 07       	cpc	r29, r17
 128:	b1 f7       	brne	.-20     	; 0x116 <drawArray+0x1a>
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <displayInitHT16K33>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	08 2f       	mov	r16, r24
 144:	c7 df       	rcall	.-114    	; 0xd4 <twi_start>
 146:	80 2f       	mov	r24, r16
 148:	ce df       	rcall	.-100    	; 0xe6 <twi_tx>
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	cc df       	rcall	.-104    	; 0xe6 <twi_tx>
 14e:	c4 e7       	ldi	r28, 0x74	; 116
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	14 e9       	ldi	r17, 0x94	; 148
 154:	18 83       	st	Y, r17
 156:	be df       	rcall	.-132    	; 0xd4 <twi_start>
 158:	80 2f       	mov	r24, r16
 15a:	c5 df       	rcall	.-118    	; 0xe6 <twi_tx>
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	c3 df       	rcall	.-122    	; 0xe6 <twi_tx>
 160:	18 83       	st	Y, r17
 162:	b8 df       	rcall	.-144    	; 0xd4 <twi_start>
 164:	80 2f       	mov	r24, r16
 166:	bf df       	rcall	.-130    	; 0xe6 <twi_tx>
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	bd df       	rcall	.-134    	; 0xe6 <twi_tx>
 16c:	18 83       	st	Y, r17
 16e:	b2 df       	rcall	.-156    	; 0xd4 <twi_start>
 170:	80 2f       	mov	r24, r16
 172:	b9 df       	rcall	.-142    	; 0xe6 <twi_tx>
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	b7 df       	rcall	.-146    	; 0xe6 <twi_tx>
 178:	18 83       	st	Y, r17
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <displayInit>:
 184:	a1 df       	rcall	.-190    	; 0xc8 <twi_init>
 186:	80 ee       	ldi	r24, 0xE0	; 224
 188:	d8 cf       	rjmp	.-80     	; 0x13a <displayInitHT16K33>
 18a:	08 95       	ret

0000018c <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 18c:	18 16       	cp	r1, r24
 18e:	19 06       	cpc	r1, r25
 190:	6c f4       	brge	.+26     	; 0x1ac <wait+0x20>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	e9 ef       	ldi	r30, 0xF9	; 249
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <wait+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <wait+0x14>
 1a0:	00 00       	nop
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	a9 f7       	brne	.-22     	; 0x196 <wait+0xa>
 1ac:	08 95       	ret

000001ae <theCoolFullRowAnimation>:
		twi_tx( 0x00);
	}
	twi_stop();
}

void theCoolFullRowAnimation(int row){
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	for( uint8_t idy = 0; idy < 9; idy++ ) {
		
		//low row
		twi_start();
		twi_tx(D0_I2C_ADDR);
		twi_tx(row * 2);	//skip uneven number because those are for 8*16
 1c6:	98 2e       	mov	r9, r24
 1c8:	99 0c       	add	r9, r9
		twi_stop();
		
		//high row
		twi_start();
		twi_tx(D0_I2C_ADDR);
		twi_tx((row-1) * 2);	//skip uneven number because those are for 8*16
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	88 2e       	mov	r8, r24
 1ce:	88 0c       	add	r8, r8
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
	}
	twi_stop();
}

void theCoolFullRowAnimation(int row){
	uint8_t value = 0;
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
		twi_tx(D0_I2C_ADDR);
		twi_tx(row * 2);	//skip uneven number because those are for 8*16
		uint8_t a = ~value;
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		value |= 128 >> idy;
 1d6:	68 94       	set
 1d8:	aa 24       	eor	r10, r10
 1da:	a7 f8       	bld	r10, 7
 1dc:	b1 2c       	mov	r11, r1
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1de:	0f 2e       	mov	r0, r31
 1e0:	f4 e7       	ldi	r31, 0x74	; 116
 1e2:	cf 2e       	mov	r12, r31
 1e4:	d1 2c       	mov	r13, r1
 1e6:	f0 2d       	mov	r31, r0
 1e8:	d4 e9       	ldi	r29, 0x94	; 148
void theCoolFullRowAnimation(int row){
	uint8_t value = 0;
	for( uint8_t idy = 0; idy < 9; idy++ ) {
		
		//low row
		twi_start();
 1ea:	74 df       	rcall	.-280    	; 0xd4 <twi_start>
		twi_tx(D0_I2C_ADDR);
 1ec:	80 ee       	ldi	r24, 0xE0	; 224
 1ee:	7b df       	rcall	.-266    	; 0xe6 <twi_tx>
		twi_tx(row * 2);	//skip uneven number because those are for 8*16
 1f0:	89 2d       	mov	r24, r9
 1f2:	79 df       	rcall	.-270    	; 0xe6 <twi_tx>
 1f4:	8c 2f       	mov	r24, r28
		uint8_t a = ~value;
 1f6:	80 95       	com	r24
 1f8:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 1fa:	87 95       	ror	r24
 1fc:	87 f9       	bld	r24, 7
 1fe:	73 df       	rcall	.-282    	; 0xe6 <twi_tx>
 200:	75 01       	movw	r14, r10
		value |= 128 >> idy;
 202:	00 2e       	mov	r0, r16
 204:	02 c0       	rjmp	.+4      	; 0x20a <theCoolFullRowAnimation+0x5c>
 206:	f5 94       	asr	r15
 208:	e7 94       	ror	r14
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <theCoolFullRowAnimation+0x58>
 20e:	ce 29       	or	r28, r14
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 210:	f6 01       	movw	r30, r12
		twi_tx( data);
		value |= 128 >> idy;
		twi_stop();
		
		//high row
		twi_start();
 212:	d0 83       	st	Z, r29
		twi_tx(D0_I2C_ADDR);
 214:	5f df       	rcall	.-322    	; 0xd4 <twi_start>
 216:	80 ee       	ldi	r24, 0xE0	; 224
 218:	66 df       	rcall	.-308    	; 0xe6 <twi_tx>
		twi_tx((row-1) * 2);	//skip uneven number because those are for 8*16
 21a:	88 2d       	mov	r24, r8
 21c:	64 df       	rcall	.-312    	; 0xe6 <twi_tx>
		a = ~value;
 21e:	8c 2f       	mov	r24, r28
 220:	80 95       	com	r24
		data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 222:	80 fb       	bst	r24, 0
 224:	87 95       	ror	r24
 226:	87 f9       	bld	r24, 7
 228:	5e df       	rcall	.-324    	; 0xe6 <twi_tx>
		value |= 128 >> idy;
 22a:	ce 29       	or	r28, r14
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 22c:	f6 01       	movw	r30, r12
 22e:	d0 83       	st	Z, r29
		a = ~value;
		data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		value |= 128 >> idy;
		twi_stop();
		wait(333);
 230:	8d e4       	ldi	r24, 0x4D	; 77
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	ab df       	rcall	.-170    	; 0x18c <wait>
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	09 30       	cpi	r16, 0x09	; 9
	twi_stop();
}

void theCoolFullRowAnimation(int row){
	uint8_t value = 0;
	for( uint8_t idy = 0; idy < 9; idy++ ) {
 23c:	11 05       	cpc	r17, r1
 23e:	a9 f6       	brne	.-86     	; 0x1ea <theCoolFullRowAnimation+0x3c>
 240:	df 91       	pop	r29
		value |= 128 >> idy;
		twi_stop();
		wait(333);
	}
	
}
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	08 95       	ret

0000025a <setupDisplayArray>:
 25a:	4f 92       	push	r4
int score = 0;
int shouldReset = 0;

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
 25c:	5f 92       	push	r5
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	0f 2e       	mov	r0, r31
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	ef 2e       	mov	r14, r31
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	ff 2e       	mov	r15, r31
 282:	f0 2d       	mov	r31, r0
 284:	2c 01       	movw	r4, r24
	int row;
	for(row = 0; row < 8; row++) {
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
			if(!blockLocation.oneWidth){
 28a:	0f 2e       	mov	r0, r31
 28c:	fa e6       	ldi	r31, 0x6A	; 106
 28e:	cf 2e       	mov	r12, r31
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	df 2e       	mov	r13, r31
 294:	f0 2d       	mov	r31, r0
					}
				}	
			}else{
				if (row == blockLocation.row || row == blockLocation.row - 1) {
					if(col == blockLocation.column) {
						tempRow = tempRow | (128 >> col);
 296:	68 94       	set
 298:	66 24       	eor	r6, r6
 29a:	67 f8       	bld	r6, 7
 29c:	71 2c       	mov	r7, r1

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
 29e:	f7 01       	movw	r30, r14
 2a0:	97 80       	ldd	r9, Z+7	; 0x07
		for(col = 0; col < 8; col++) {
			if(!blockLocation.oneWidth){
 2a2:	f6 01       	movw	r30, r12
 2a4:	a6 81       	ldd	r26, Z+6	; 0x06
 2a6:	b7 81       	ldd	r27, Z+7	; 0x07
				if (row == blockLocation.row || row == blockLocation.row - 1) {
 2a8:	60 81       	ld	r22, Z
 2aa:	71 81       	ldd	r23, Z+1	; 0x01
 2ac:	eb 01       	movw	r28, r22
 2ae:	21 97       	sbiw	r28, 0x01	; 1
					if(col == blockLocation.column || col == blockLocation.column + 1) {
 2b0:	02 81       	ldd	r16, Z+2	; 0x02
 2b2:	13 81       	ldd	r17, Z+3	; 0x03
 2b4:	58 01       	movw	r10, r16
 2b6:	ff ef       	ldi	r31, 0xFF	; 255
 2b8:	af 1a       	sub	r10, r31
 2ba:	bf 0a       	sbc	r11, r31
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	e8 0e       	add	r14, r24
 2c0:	f1 1c       	adc	r15, r1
 2c2:	f7 01       	movw	r30, r14
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
			if(!blockLocation.oneWidth){
 2c8:	10 97       	sbiw	r26, 0x00	; 0
 2ca:	a9 f4       	brne	.+42     	; 0x2f6 <setupDisplayArray+0x9c>
				if (row == blockLocation.row || row == blockLocation.row - 1) {
 2cc:	64 17       	cp	r22, r20
 2ce:	75 07       	cpc	r23, r21
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <setupDisplayArray+0x7e>
 2d2:	c4 17       	cp	r28, r20
 2d4:	d5 07       	cpc	r29, r21
 2d6:	01 f5       	brne	.+64     	; 0x318 <setupDisplayArray+0xbe>
					if(col == blockLocation.column || col == blockLocation.column + 1) {
 2d8:	02 17       	cp	r16, r18
 2da:	13 07       	cpc	r17, r19
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <setupDisplayArray+0x8a>
 2de:	a2 16       	cp	r10, r18
 2e0:	b3 06       	cpc	r11, r19
 2e2:	d1 f4       	brne	.+52     	; 0x318 <setupDisplayArray+0xbe>
						tempRow = tempRow | (128 >> col);
 2e4:	c3 01       	movw	r24, r6
 2e6:	02 2e       	mov	r0, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <setupDisplayArray+0x94>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <setupDisplayArray+0x90>
 2f2:	98 2a       	or	r9, r24
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <setupDisplayArray+0xbe>
					}
				}	
			}else{
				if (row == blockLocation.row || row == blockLocation.row - 1) {
 2f6:	64 17       	cp	r22, r20
 2f8:	75 07       	cpc	r23, r21
 2fa:	19 f0       	breq	.+6      	; 0x302 <setupDisplayArray+0xa8>
 2fc:	c4 17       	cp	r28, r20
 2fe:	d5 07       	cpc	r29, r21
 300:	59 f4       	brne	.+22     	; 0x318 <setupDisplayArray+0xbe>
					if(col == blockLocation.column) {
 302:	02 17       	cp	r16, r18
 304:	13 07       	cpc	r17, r19
 306:	41 f4       	brne	.+16     	; 0x318 <setupDisplayArray+0xbe>
						tempRow = tempRow | (128 >> col);
 308:	c3 01       	movw	r24, r6
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <setupDisplayArray+0xb8>
 30e:	95 95       	asr	r25
 310:	87 95       	ror	r24
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <setupDisplayArray+0xb4>
 316:	98 2a       	or	r9, r24
					}
				}
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
 318:	82 91       	ld	r24, -Z
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <setupDisplayArray+0xca>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <setupDisplayArray+0xc6>
 328:	98 2a       	or	r9, r24
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	28 30       	cpi	r18, 0x08	; 8
 330:	31 05       	cpc	r19, r1
 332:	51 f6       	brne	.-108    	; 0x2c8 <setupDisplayArray+0x6e>
					}
				}
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
 334:	f2 01       	movw	r30, r4
 336:	91 92       	st	Z+, r9
 338:	2f 01       	movw	r4, r30

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
 33a:	4f 5f       	subi	r20, 0xFF	; 255
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	48 30       	cpi	r20, 0x08	; 8
 340:	51 05       	cpc	r21, r1
 342:	09 f0       	breq	.+2      	; 0x346 <setupDisplayArray+0xec>
 344:	ac cf       	rjmp	.-168    	; 0x29e <setupDisplayArray+0x44>
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
	}
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	9f 90       	pop	r9
 35c:	7f 90       	pop	r7
 35e:	6f 90       	pop	r6
 360:	5f 90       	pop	r5
 362:	4f 90       	pop	r4
 364:	08 95       	ret

00000366 <resetGame>:
		showDigit(9999);
	}
	i = rand() % 7;
}

void resetGame(){
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	60 97       	sbiw	r28, 0x10	; 16
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
	showDigit(0);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	76 d3       	rcall	.+1772   	; 0xa6c <showDigit>
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	64 e4       	ldi	r22, 0x44	; 68
 386:	71 e0       	ldi	r23, 0x01	; 1
	int row;
	for (row = 0;row < 8;row++) {
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
 388:	30 e1       	ldi	r19, 0x10	; 16
 38a:	ae 01       	movw	r20, r28
 38c:	4f 5f       	subi	r20, 0xFF	; 255
 38e:	5f 4f       	sbci	r21, 0xFF	; 255
 390:	fa 01       	movw	r30, r20
 392:	23 2f       	mov	r18, r19
 394:	11 92       	st	Z+, r1
 396:	2a 95       	dec	r18
 398:	e9 f7       	brne	.-6      	; 0x394 <resetGame+0x2e>
 39a:	28 e0       	ldi	r18, 0x08	; 8
 39c:	fa 01       	movw	r30, r20
 39e:	dc 01       	movw	r26, r24
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	2a 95       	dec	r18
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <resetGame+0x3a>
 3a8:	08 96       	adiw	r24, 0x08	; 8
}

void resetGame(){
	showDigit(0);
	int row;
	for (row = 0;row < 8;row++) {
 3aa:	86 17       	cp	r24, r22
 3ac:	97 07       	cpc	r25, r23
 3ae:	81 f7       	brne	.-32     	; 0x390 <resetGame+0x2a>
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
	}
	shouldReset = 0;
 3b0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <__data_end+0x1>
 3b4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
}
 3b8:	60 96       	adiw	r28, 0x10	; 16
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <__vector_3>:
	checkForFullRows();
}


/******************************************************************/
ISR(INT2_vect) {
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	0b b6       	in	r0, 0x3b	; 59
 3d6:	0f 92       	push	r0
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	outputs:
	notes:			Moves block to the left if no collision occurred
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	if((PIND & 0x0C) == 0x0C){
 3e6:	80 b3       	in	r24, 0x10	; 16
 3e8:	8c 70       	andi	r24, 0x0C	; 12
 3ea:	8c 30       	cpi	r24, 0x0C	; 12
 3ec:	59 f4       	brne	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		powerdOn = 1;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <powerdOn+0x1>
 3f6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <powerdOn>
		shouldReset = 1;
 3fa:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
 3fe:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
		return;
 402:	2c c0       	rjmp	.+88     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	}
	if(blockLocation.column > 0){
 404:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <blockLocation+0x2>
 408:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <blockLocation+0x3>
 40c:	18 16       	cp	r1, r24
 40e:	19 06       	cpc	r1, r25
 410:	2c f5       	brge	.+74     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		if(display_array[blockLocation.row][blockLocation.column-1] == 0 &&
 412:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <blockLocation>
 416:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <blockLocation+0x1>
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f9 01       	movw	r30, r18
 41e:	ee 0f       	add	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	ee 0f       	add	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	ec 5f       	subi	r30, 0xFC	; 252
 42c:	fe 4f       	sbci	r31, 0xFE	; 254
 42e:	e8 0f       	add	r30, r24
 430:	f9 1f       	adc	r31, r25
 432:	40 81       	ld	r20, Z
 434:	41 11       	cpse	r20, r1
 436:	12 c0       	rjmp	.+36     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		   display_array[blockLocation.row - 1][blockLocation.column-1] == 0) {
 438:	f9 01       	movw	r30, r18
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e4 50       	subi	r30, 0x04	; 4
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	e8 0f       	add	r30, r24
 44c:	f9 1f       	adc	r31, r25
		powerdOn = 1;
		shouldReset = 1;
		return;
	}
	if(blockLocation.column > 0){
		if(display_array[blockLocation.row][blockLocation.column-1] == 0 &&
 44e:	20 81       	ld	r18, Z
 450:	21 11       	cpse	r18, r1
 452:	04 c0       	rjmp	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		   display_array[blockLocation.row - 1][blockLocation.column-1] == 0) {
				blockLocation.column--;
 454:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <blockLocation+0x3>
 458:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <blockLocation+0x2>
		}
	}
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0b be       	out	0x3b, r0	; 59
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_4>:

/******************************************************************/
ISR(INT3_vect) {
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	0b b6       	in	r0, 0x3b	; 59
 484:	0f 92       	push	r0
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	outputs:
	notes:			Moves block to the right if no collision occurred
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	if((PIND & 0x0C) == 0x0C){
 498:	80 b3       	in	r24, 0x10	; 16
 49a:	8c 70       	andi	r24, 0x0C	; 12
 49c:	8c 30       	cpi	r24, 0x0C	; 12
 49e:	59 f4       	brne	.+22     	; 0x4b6 <__vector_4+0x3e>
		powerdOn = 1;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <powerdOn+0x1>
 4a8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <powerdOn>
		shouldReset = 1;
 4ac:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
 4b0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
		return;
 4b4:	63 c0       	rjmp	.+198    	; 0x57c <__vector_4+0x104>
	}
	if(!blockLocation.oneWidth){
 4b6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <blockLocation+0x6>
 4ba:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <blockLocation+0x7>
 4be:	89 2b       	or	r24, r25
 4c0:	89 f5       	brne	.+98     	; 0x524 <__vector_4+0xac>
		if(blockLocation.column < 6){
 4c2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <blockLocation+0x2>
 4c6:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <blockLocation+0x3>
 4ca:	86 30       	cpi	r24, 0x06	; 6
 4cc:	91 05       	cpc	r25, r1
 4ce:	0c f0       	brlt	.+2      	; 0x4d2 <__vector_4+0x5a>
 4d0:	55 c0       	rjmp	.+170    	; 0x57c <__vector_4+0x104>
			if(display_array[blockLocation.row][blockLocation.column+2] == 0 &&
 4d2:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <blockLocation>
 4d6:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <blockLocation+0x1>
 4da:	ac 01       	movw	r20, r24
 4dc:	4e 5f       	subi	r20, 0xFE	; 254
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	f9 01       	movw	r30, r18
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	ec 5f       	subi	r30, 0xFC	; 252
 4f0:	fe 4f       	sbci	r31, 0xFE	; 254
 4f2:	e4 0f       	add	r30, r20
 4f4:	f5 1f       	adc	r31, r21
 4f6:	60 81       	ld	r22, Z
 4f8:	61 11       	cpse	r22, r1
 4fa:	40 c0       	rjmp	.+128    	; 0x57c <__vector_4+0x104>
			display_array[blockLocation.row - 1][blockLocation.column+2] == 0) {
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	24 50       	subi	r18, 0x04	; 4
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	f9 01       	movw	r30, r18
 50e:	e4 0f       	add	r30, r20
 510:	f5 1f       	adc	r31, r21
		shouldReset = 1;
		return;
	}
	if(!blockLocation.oneWidth){
		if(blockLocation.column < 6){
			if(display_array[blockLocation.row][blockLocation.column+2] == 0 &&
 512:	20 81       	ld	r18, Z
 514:	21 11       	cpse	r18, r1
 516:	32 c0       	rjmp	.+100    	; 0x57c <__vector_4+0x104>
			display_array[blockLocation.row - 1][blockLocation.column+2] == 0) {
				blockLocation.column++;
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <blockLocation+0x3>
 51e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <blockLocation+0x2>
 522:	2c c0       	rjmp	.+88     	; 0x57c <__vector_4+0x104>
			}
		}
	}else{
		if(blockLocation.column < 7){
 524:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <blockLocation+0x2>
 528:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <blockLocation+0x3>
 52c:	87 30       	cpi	r24, 0x07	; 7
 52e:	91 05       	cpc	r25, r1
 530:	2c f5       	brge	.+74     	; 0x57c <__vector_4+0x104>
			if(display_array[blockLocation.row][blockLocation.column+1] == 0 &&
 532:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <blockLocation>
 536:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <blockLocation+0x1>
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	f9 01       	movw	r30, r18
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	ec 5f       	subi	r30, 0xFC	; 252
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	e8 0f       	add	r30, r24
 550:	f9 1f       	adc	r31, r25
 552:	40 81       	ld	r20, Z
 554:	41 11       	cpse	r20, r1
 556:	12 c0       	rjmp	.+36     	; 0x57c <__vector_4+0x104>
   			   display_array[blockLocation.row - 1][blockLocation.column+1] == 0) {
 558:	f9 01       	movw	r30, r18
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	e4 50       	subi	r30, 0x04	; 4
 568:	ff 4f       	sbci	r31, 0xFF	; 255
 56a:	e8 0f       	add	r30, r24
 56c:	f9 1f       	adc	r31, r25
				blockLocation.column++;
			}
		}
	}else{
		if(blockLocation.column < 7){
			if(display_array[blockLocation.row][blockLocation.column+1] == 0 &&
 56e:	20 81       	ld	r18, Z
 570:	21 11       	cpse	r18, r1
 572:	04 c0       	rjmp	.+8      	; 0x57c <__vector_4+0x104>
   			   display_array[blockLocation.row - 1][blockLocation.column+1] == 0) {
					blockLocation.column++;
 574:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <blockLocation+0x3>
 578:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <blockLocation+0x2>
			}
		}
	}
}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	6f 91       	pop	r22
 586:	5f 91       	pop	r21
 588:	4f 91       	pop	r20
 58a:	3f 91       	pop	r19
 58c:	2f 91       	pop	r18
 58e:	0f 90       	pop	r0
 590:	0b be       	out	0x3b, r0	; 59
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <shoveDown>:
	}
	score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
 5a4:	28 97       	sbiw	r28, 0x08	; 8
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	cd bf       	out	0x3d, r28	; 61
	for(i = 0; i<= (x -2); x -= 2){
 5b0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <i+0x1>
 5b4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <i>
 5b8:	9c 01       	movw	r18, r24
 5ba:	22 50       	subi	r18, 0x02	; 2
 5bc:	31 09       	sbc	r19, r1
 5be:	fa f0       	brmi	.+62     	; 0x5fe <shoveDown+0x62>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	8c 5f       	subi	r24, 0xFC	; 252
 5ce:	9e 4f       	sbci	r25, 0xFE	; 254
		int rowToShove = x - 2;
		memcpy(display_array[x],display_array[rowToShove],sizeof(unsigned char) * 8);	//cpy the upper row to this row
 5d0:	ac 01       	movw	r20, r24
 5d2:	40 51       	subi	r20, 0x10	; 16
 5d4:	51 09       	sbc	r21, r1
 5d6:	68 e0       	ldi	r22, 0x08	; 8
 5d8:	fa 01       	movw	r30, r20
 5da:	dc 01       	movw	r26, r24
 5dc:	01 90       	ld	r0, Z+
 5de:	0d 92       	st	X+, r0
 5e0:	6a 95       	dec	r22
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <shoveDown+0x40>
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
 5e4:	dc 01       	movw	r26, r24
 5e6:	18 97       	sbiw	r26, 0x08	; 8
 5e8:	fc 01       	movw	r30, r24
 5ea:	78 97       	sbiw	r30, 0x18	; 24
 5ec:	88 e0       	ldi	r24, 0x08	; 8
 5ee:	01 90       	ld	r0, Z+
 5f0:	0d 92       	st	X+, r0
 5f2:	8a 95       	dec	r24
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <shoveDown+0x52>
	score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 5f6:	22 50       	subi	r18, 0x02	; 2
 5f8:	31 09       	sbc	r19, r1
 5fa:	ca 01       	movw	r24, r20
 5fc:	4a f7       	brpl	.-46     	; 0x5d0 <shoveDown+0x34>
		int rowToShove = x - 2;
		memcpy(display_array[x],display_array[rowToShove],sizeof(unsigned char) * 8);	//cpy the upper row to this row
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
	}
	uint8_t empty[8] = {0,0,0,0,0,0,0,0};
 5fe:	ce 01       	movw	r24, r28
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	28 e0       	ldi	r18, 0x08	; 8
 604:	fc 01       	movw	r30, r24
 606:	11 92       	st	Z+, r1
 608:	2a 95       	dec	r18
 60a:	e9 f7       	brne	.-6      	; 0x606 <shoveDown+0x6a>
	memcpy(display_array[0],empty,sizeof(unsigned char) * 8);		//clear the upper row
 60c:	28 e0       	ldi	r18, 0x08	; 8
 60e:	fc 01       	movw	r30, r24
 610:	a4 e0       	ldi	r26, 0x04	; 4
 612:	b1 e0       	ldi	r27, 0x01	; 1
 614:	01 90       	ld	r0, Z+
 616:	0d 92       	st	X+, r0
 618:	2a 95       	dec	r18
 61a:	e1 f7       	brne	.-8      	; 0x614 <shoveDown+0x78>
	memcpy(display_array[1],empty,sizeof(unsigned char) * 8);
 61c:	28 e0       	ldi	r18, 0x08	; 8
 61e:	fc 01       	movw	r30, r24
 620:	ac e0       	ldi	r26, 0x0C	; 12
 622:	b1 e0       	ldi	r27, 0x01	; 1
 624:	01 90       	ld	r0, Z+
 626:	0d 92       	st	X+, r0
 628:	2a 95       	dec	r18
 62a:	e1 f7       	brne	.-8      	; 0x624 <shoveDown+0x88>
}
 62c:	28 96       	adiw	r28, 0x08	; 8
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret

0000063e <checkForFullRows>:
		}
	}
	return 1;
}

void checkForFullRows(void){
 63e:	ef 92       	push	r14
 640:	ff 92       	push	r15
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	e4 e0       	ldi	r30, 0x04	; 4
 64c:	f1 e0       	ldi	r31, 0x01	; 1
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 64e:	00 e0       	ldi	r16, 0x00	; 0
 650:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 1;
}

void checkForFullRows(void){
	int tempscore = 0;
 652:	e1 2c       	mov	r14, r1
 654:	f1 2c       	mov	r15, r1
 656:	1d c0       	rjmp	.+58     	; 0x692 <checkForFullRows+0x54>
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
 658:	91 91       	ld	r25, Z+
 65a:	91 30       	cpi	r25, 0x01	; 1
 65c:	39 f4       	brne	.+14     	; 0x66c <checkForFullRows+0x2e>
 65e:	df 01       	movw	r26, r30
 660:	19 97       	sbiw	r26, 0x09	; 9
 662:	9c 91       	ld	r25, X
 664:	91 30       	cpi	r25, 0x01	; 1
 666:	11 f4       	brne	.+4      	; 0x66c <checkForFullRows+0x2e>
 668:	2f 5f       	subi	r18, 0xFF	; 255
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
 66c:	ec 17       	cp	r30, r28
 66e:	fd 07       	cpc	r31, r29
 670:	99 f7       	brne	.-26     	; 0x658 <checkForFullRows+0x1a>
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
		}
		if(8 == count){	//whole row filled
 672:	28 30       	cpi	r18, 0x08	; 8
 674:	31 05       	cpc	r19, r1
 676:	39 f4       	brne	.+14     	; 0x686 <checkForFullRows+0x48>
			tempscore += 10;
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	e8 0e       	add	r14, r24
 67c:	f1 1c       	adc	r15, r1
			theCoolFullRowAnimation(x);
 67e:	c8 01       	movw	r24, r16
 680:	96 dd       	rcall	.-1236   	; 0x1ae <theCoolFullRowAnimation>
			shoveDown(x);
 682:	c8 01       	movw	r24, r16
 684:	8b df       	rcall	.-234    	; 0x59c <shoveDown>
}

void checkForFullRows(void){
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 686:	0f 5f       	subi	r16, 0xFF	; 255
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	fe 01       	movw	r30, r28
 68c:	08 30       	cpi	r16, 0x08	; 8
 68e:	11 05       	cpc	r17, r1
 690:	29 f0       	breq	.+10     	; 0x69c <checkForFullRows+0x5e>
 692:	ef 01       	movw	r28, r30
 694:	28 96       	adiw	r28, 0x08	; 8
		}
	}
	return 1;
}

void checkForFullRows(void){
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	de cf       	rjmp	.-68     	; 0x658 <checkForFullRows+0x1a>
			tempscore += 10;
			theCoolFullRowAnimation(x);
			shoveDown(x);
		}
	}
	score += tempscore;
 69c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <score>
 6a0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <score+0x1>
 6a4:	8e 0d       	add	r24, r14
 6a6:	9f 1d       	adc	r25, r15
 6a8:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <score+0x1>
 6ac:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <score>
	showDigit(score);
 6b0:	dd d1       	rcall	.+954    	; 0xa6c <showDigit>
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	08 95       	ret

000006c0 <animateGame>:
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
	}
	shouldReset = 0;
}

void animateGame() {
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	cd b7       	in	r28, 0x3d	; 61
 6ca:	de b7       	in	r29, 0x3e	; 62
 6cc:	28 97       	sbiw	r28, 0x08	; 8
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	de bf       	out	0x3e, r29	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	cd bf       	out	0x3d, r28	; 61
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		if(!blockLocation.oneWidth){
 6d8:	0a e6       	ldi	r16, 0x6A	; 106
 6da:	11 e0       	ldi	r17, 0x01	; 1
}

void animateGame() {
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
 6dc:	ce 01       	movw	r24, r28
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	bc dd       	rcall	.-1160   	; 0x25a <setupDisplayArray>
		drawArray(displayBuffer);
 6e2:	ce 01       	movw	r24, r28
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	0a dd       	rcall	.-1516   	; 0xfc <drawArray>
		wait(2000);
 6e8:	80 ed       	ldi	r24, 0xD0	; 208
 6ea:	97 e0       	ldi	r25, 0x07	; 7
 6ec:	4f dd       	rcall	.-1378   	; 0x18c <wait>
		if(!blockLocation.oneWidth){
 6ee:	f8 01       	movw	r30, r16
 6f0:	86 81       	ldd	r24, Z+6	; 0x06
 6f2:	97 81       	ldd	r25, Z+7	; 0x07
 6f4:	89 2b       	or	r24, r25
 6f6:	31 f5       	brne	.+76     	; 0x744 <animateGame+0x84>
			if (display_array[blockLocation.row+1][blockLocation.column] != 1 &&
 6f8:	40 81       	ld	r20, Z
 6fa:	51 81       	ldd	r21, Z+1	; 0x01
 6fc:	ca 01       	movw	r24, r20
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	22 81       	ldd	r18, Z+2	; 0x02
 702:	33 81       	ldd	r19, Z+3	; 0x03
 704:	fc 01       	movw	r30, r24
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	ee 0f       	add	r30, r30
 70c:	ff 1f       	adc	r31, r31
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	ec 5f       	subi	r30, 0xFC	; 252
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	e2 0f       	add	r30, r18
 718:	f3 1f       	adc	r31, r19
 71a:	60 81       	ld	r22, Z
 71c:	61 30       	cpi	r22, 0x01	; 1
 71e:	59 f1       	breq	.+86     	; 0x776 <animateGame+0xb6>
		   	    display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 720:	fc 01       	movw	r30, r24
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	ec 5f       	subi	r30, 0xFC	; 252
 730:	fe 4f       	sbci	r31, 0xFE	; 254
 732:	e2 0f       	add	r30, r18
 734:	f3 1f       	adc	r31, r19
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		if(!blockLocation.oneWidth){
			if (display_array[blockLocation.row+1][blockLocation.column] != 1 &&
 736:	61 81       	ldd	r22, Z+1	; 0x01
 738:	61 30       	cpi	r22, 0x01	; 1
 73a:	e9 f0       	breq	.+58     	; 0x776 <animateGame+0xb6>
		   	    display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
					blockLocation.row++;
 73c:	f8 01       	movw	r30, r16
 73e:	91 83       	std	Z+1, r25	; 0x01
 740:	80 83       	st	Z, r24
 742:	cc cf       	rjmp	.-104    	; 0x6dc <animateGame+0x1c>
			 }else {
				 break;
			 }
		}else{
			if (display_array[blockLocation.row+1][blockLocation.column] != 1) {
 744:	f8 01       	movw	r30, r16
 746:	20 81       	ld	r18, Z
 748:	31 81       	ldd	r19, Z+1	; 0x01
 74a:	c9 01       	movw	r24, r18
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	42 81       	ldd	r20, Z+2	; 0x02
 750:	53 81       	ldd	r21, Z+3	; 0x03
 752:	fc 01       	movw	r30, r24
 754:	ee 0f       	add	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	ee 0f       	add	r30, r30
 75a:	ff 1f       	adc	r31, r31
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	ec 5f       	subi	r30, 0xFC	; 252
 762:	fe 4f       	sbci	r31, 0xFE	; 254
 764:	e4 0f       	add	r30, r20
 766:	f5 1f       	adc	r31, r21
 768:	60 81       	ld	r22, Z
 76a:	61 30       	cpi	r22, 0x01	; 1
 76c:	69 f1       	breq	.+90     	; 0x7c8 <animateGame+0x108>
				blockLocation.row++;
 76e:	f8 01       	movw	r30, r16
 770:	91 83       	std	Z+1, r25	; 0x01
 772:	80 83       	st	Z, r24
 774:	b3 cf       	rjmp	.-154    	; 0x6dc <animateGame+0x1c>
				break;
			}
		}
	}
	if(!blockLocation.oneWidth){
		display_array[blockLocation.row][blockLocation.column] = 1;
 776:	ca 01       	movw	r24, r20
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	8c 5f       	subi	r24, 0xFC	; 252
 786:	9e 4f       	sbci	r25, 0xFE	; 254
 788:	fc 01       	movw	r30, r24
 78a:	e2 0f       	add	r30, r18
 78c:	f3 1f       	adc	r31, r19
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	60 83       	st	Z, r22
		display_array[blockLocation.row - 1][blockLocation.column] = 1;
 792:	44 0f       	add	r20, r20
 794:	55 1f       	adc	r21, r21
 796:	44 0f       	add	r20, r20
 798:	55 1f       	adc	r21, r21
 79a:	44 0f       	add	r20, r20
 79c:	55 1f       	adc	r21, r21
 79e:	44 50       	subi	r20, 0x04	; 4
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255
 7a2:	fa 01       	movw	r30, r20
 7a4:	e2 0f       	add	r30, r18
 7a6:	f3 1f       	adc	r31, r19
 7a8:	60 83       	st	Z, r22
		display_array[blockLocation.row][blockLocation.column + 1] = 1;
 7aa:	2f 5f       	subi	r18, 0xFF	; 255
 7ac:	3f 4f       	sbci	r19, 0xFF	; 255
 7ae:	fc 01       	movw	r30, r24
 7b0:	e2 0f       	add	r30, r18
 7b2:	f3 1f       	adc	r31, r19
 7b4:	60 83       	st	Z, r22
		display_array[blockLocation.row - 1][blockLocation.column + 1] = 1;
 7b6:	fa 01       	movw	r30, r20
 7b8:	e2 0f       	add	r30, r18
 7ba:	f3 1f       	adc	r31, r19
 7bc:	60 83       	st	Z, r22
		blockLocation.isAnimating = 0;
 7be:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <blockLocation+0x5>
 7c2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <blockLocation+0x4>
 7c6:	1d c0       	rjmp	.+58     	; 0x802 <animateGame+0x142>
	}else{
		display_array[blockLocation.row][blockLocation.column] = 1;
 7c8:	f9 01       	movw	r30, r18
 7ca:	ee 0f       	add	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	ee 0f       	add	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	ec 5f       	subi	r30, 0xFC	; 252
 7d8:	fe 4f       	sbci	r31, 0xFE	; 254
 7da:	e4 0f       	add	r30, r20
 7dc:	f5 1f       	adc	r31, r21
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	80 83       	st	Z, r24
		display_array[blockLocation.row - 1][blockLocation.column] = 1;	
 7e2:	22 0f       	add	r18, r18
 7e4:	33 1f       	adc	r19, r19
 7e6:	22 0f       	add	r18, r18
 7e8:	33 1f       	adc	r19, r19
 7ea:	22 0f       	add	r18, r18
 7ec:	33 1f       	adc	r19, r19
 7ee:	24 50       	subi	r18, 0x04	; 4
 7f0:	3f 4f       	sbci	r19, 0xFF	; 255
 7f2:	f9 01       	movw	r30, r18
 7f4:	e4 0f       	add	r30, r20
 7f6:	f5 1f       	adc	r31, r21
 7f8:	80 83       	st	Z, r24
		blockLocation.isAnimating = 0;
 7fa:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <blockLocation+0x5>
 7fe:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <blockLocation+0x4>
	}
	checkForFullRows();
 802:	1d df       	rcall	.-454    	; 0x63e <checkForFullRows>
}
 804:	28 96       	adiw	r28, 0x08	; 8
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	f8 94       	cli
 80a:	de bf       	out	0x3e, r29	; 62
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	cd bf       	out	0x3d, r28	; 61
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	08 95       	ret

0000081a <gameOver>:
	memcpy(display_array[0],empty,sizeof(unsigned char) * 8);		//clear the upper row
	memcpy(display_array[1],empty,sizeof(unsigned char) * 8);
}


void gameOver(){
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
 822:	28 97       	sbiw	r28, 0x08	; 8
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	f8 94       	cli
 828:	de bf       	out	0x3e, r29	; 62
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	cd bf       	out	0x3d, r28	; 61
	uint8_t deadFace[8] = {0b00000000,
 82e:	88 e0       	ldi	r24, 0x08	; 8
 830:	ec e4       	ldi	r30, 0x4C	; 76
 832:	f1 e0       	ldi	r31, 0x01	; 1
 834:	de 01       	movw	r26, r28
 836:	11 96       	adiw	r26, 0x01	; 1
 838:	01 90       	ld	r0, Z+
 83a:	0d 92       	st	X+, r0
 83c:	8a 95       	dec	r24
 83e:	e1 f7       	brne	.-8      	; 0x838 <gameOver+0x1e>
					   0b10100101,
					   0b00000000,
					   0b00111100,
					   0b01000010,
					   0b01000010};
	drawArray(deadFace);
 840:	ce 01       	movw	r24, r28
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	5b dc       	rcall	.-1866   	; 0xfc <drawArray>
 846:	28 96       	adiw	r28, 0x08	; 8
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <startGame>:
		}
		displayBuffer[row] = tempRow; 
	}
}
void startGame(){
	blockLocation.isAnimating = 1;
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <blockLocation+0x5>
 860:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <blockLocation+0x4>
	if ((display_array[0][i] != 1) && (display_array[0][i+1] != 1)) { 
 864:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <i>
 868:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <i+0x1>
 86c:	fc 01       	movw	r30, r24
 86e:	ec 5f       	subi	r30, 0xFC	; 252
 870:	fe 4f       	sbci	r31, 0xFE	; 254
 872:	20 81       	ld	r18, Z
 874:	21 30       	cpi	r18, 0x01	; 1
 876:	d9 f0       	breq	.+54     	; 0x8ae <startGame+0x56>
 878:	fc 01       	movw	r30, r24
 87a:	ec 5f       	subi	r30, 0xFC	; 252
 87c:	fe 4f       	sbci	r31, 0xFE	; 254
 87e:	21 81       	ldd	r18, Z+1	; 0x01
 880:	21 30       	cpi	r18, 0x01	; 1
 882:	a9 f0       	breq	.+42     	; 0x8ae <startGame+0x56>
		blockLocation.row = 0;
 884:	ea e6       	ldi	r30, 0x6A	; 106
 886:	f1 e0       	ldi	r31, 0x01	; 1
 888:	11 82       	std	Z+1, r1	; 0x01
 88a:	10 82       	st	Z, r1
		blockLocation.column = i;
 88c:	93 83       	std	Z+3, r25	; 0x03
 88e:	82 83       	std	Z+2, r24	; 0x02
		blockLocation.oneWidth = rand() % 2;
 890:	8a d1       	rcall	.+788    	; 0xba6 <rand>
 892:	81 70       	andi	r24, 0x01	; 1
 894:	90 78       	andi	r25, 0x80	; 128
 896:	99 23       	and	r25, r25
 898:	24 f4       	brge	.+8      	; 0x8a2 <startGame+0x4a>
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	8e 6f       	ori	r24, 0xFE	; 254
 89e:	9f 6f       	ori	r25, 0xFF	; 255
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <blockLocation+0x7>
 8a6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <blockLocation+0x6>
		animateGame();
 8aa:	0a df       	rcall	.-492    	; 0x6c0 <animateGame>
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <startGame+0x5e>
	}else {
		//Game over
		gameOver();
 8ae:	b5 df       	rcall	.-150    	; 0x81a <gameOver>
		showDigit(9999);
 8b0:	8f e0       	ldi	r24, 0x0F	; 15
 8b2:	97 e2       	ldi	r25, 0x27	; 39
 8b4:	db d0       	rcall	.+438    	; 0xa6c <showDigit>
	}
	i = rand() % 7;
 8b6:	77 d1       	rcall	.+750    	; 0xba6 <rand>
 8b8:	67 e0       	ldi	r22, 0x07	; 7
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	06 d1       	rcall	.+524    	; 0xaca <__divmodhi4>
 8be:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <i+0x1>
 8c2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <i>
 8c6:	08 95       	ret

000008c8 <main>:
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
inputs:			
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{	
 8cc:	cd b7       	in	r28, 0x3d	; 61
 8ce:	de b7       	in	r29, 0x3e	; 62
 8d0:	28 97       	sbiw	r28, 0x08	; 8
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	f8 94       	cli
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0x0C;
 8dc:	8c e0       	ldi	r24, 0x0C	; 12
 8de:	81 bb       	out	0x11, r24	; 17
	
	EICRA |= 0xF0;
 8e0:	ea e6       	ldi	r30, 0x6A	; 106
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	80 6f       	ori	r24, 0xF0	; 240
 8e8:	80 83       	st	Z, r24
	EIMSK |= 0x0C;
 8ea:	89 b7       	in	r24, 0x39	; 57
 8ec:	8c 60       	ori	r24, 0x0C	; 12
 8ee:	89 bf       	out	0x39, r24	; 57
	
	sei();
 8f0:	78 94       	sei
	
	displayInit();
 8f2:	48 dc       	rcall	.-1904   	; 0x184 <displayInit>
	sevenSegInit();
 8f4:	e5 d0       	rcall	.+458    	; 0xac0 <sevenSegInit>
 8f6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <score>
	showDigit(score);
 8fa:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <score+0x1>
 8fe:	b6 d0       	rcall	.+364    	; 0xa6c <showDigit>
 900:	84 ef       	ldi	r24, 0xF4	; 244
	wait(500);
 902:	91 e0       	ldi	r25, 0x01	; 1
 904:	43 dc       	rcall	.-1914   	; 0x18c <wait>
 906:	ce 01       	movw	r24, r28
 908:	01 96       	adiw	r24, 0x01	; 1
	uint8_t displayinit[8] = {0,0,0,0,0,0,0,0};
 90a:	28 e0       	ldi	r18, 0x08	; 8
 90c:	fc 01       	movw	r30, r24
 90e:	11 92       	st	Z+, r1
 910:	2a 95       	dec	r18
 912:	e9 f7       	brne	.-6      	; 0x90e <main+0x46>
 914:	f3 db       	rcall	.-2074   	; 0xfc <drawArray>
	drawArray(displayinit);
 916:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <powerdOn>
	while(!powerdOn){
 91a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <powerdOn+0x1>
 91e:	89 2b       	or	r24, r25
 920:	e9 f4       	brne	.+58     	; 0x95c <main+0x94>
 922:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <randomSeed>
		randomSeed++;
 926:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <randomSeed+0x1>
 92a:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <randomSeed+0x2>
 92e:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <randomSeed+0x3>
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	a1 1d       	adc	r26, r1
 936:	b1 1d       	adc	r27, r1
 938:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <randomSeed>
 93c:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <randomSeed+0x1>
 940:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <randomSeed+0x2>
 944:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <randomSeed+0x3>
		showDigit(randomSeed);
 948:	91 d0       	rcall	.+290    	; 0xa6c <showDigit>
 94a:	84 e6       	ldi	r24, 0x64	; 100
		wait(100);
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	1e dc       	rcall	.-1988   	; 0x18c <wait>
 950:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <powerdOn>
	sevenSegInit();
	showDigit(score);
	wait(500);
	uint8_t displayinit[8] = {0,0,0,0,0,0,0,0};
	drawArray(displayinit);
	while(!powerdOn){
 954:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <powerdOn+0x1>
 958:	89 2b       	or	r24, r25
 95a:	19 f3       	breq	.-58     	; 0x922 <main+0x5a>
 95c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <randomSeed>
		randomSeed++;
		showDigit(randomSeed);
		wait(100);
	}
	srand(randomSeed);
 960:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <randomSeed+0x1>
 964:	23 d1       	rcall	.+582    	; 0xbac <srand>
 966:	0a e6       	ldi	r16, 0x6A	; 106
 968:	11 e0       	ldi	r17, 0x01	; 1
	while(1==1) {
		if (blockLocation.isAnimating == 0) {
 96a:	f8 01       	movw	r30, r16
 96c:	84 81       	ldd	r24, Z+4	; 0x04
 96e:	95 81       	ldd	r25, Z+5	; 0x05
 970:	00 97       	sbiw	r24, 0x00	; 0
 972:	f1 f7       	brne	.-4      	; 0x970 <main+0xa8>
 974:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
			if(shouldReset == 0) {
 978:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
 97c:	89 2b       	or	r24, r25
				startGame();
 97e:	29 f4       	brne	.+10     	; 0x98a <main+0xc2>
				wait(500);
 980:	6b df       	rcall	.-298    	; 0x858 <startGame>
 982:	84 ef       	ldi	r24, 0xF4	; 244
 984:	91 e0       	ldi	r25, 0x01	; 1
 986:	02 dc       	rcall	.-2044   	; 0x18c <wait>
 988:	f0 cf       	rjmp	.-32     	; 0x96a <main+0xa2>
			}else{
				resetGame();
 98a:	ed dc       	rcall	.-1574   	; 0x366 <resetGame>
 98c:	88 ee       	ldi	r24, 0xE8	; 232
				wait(1000);
 98e:	93 e0       	ldi	r25, 0x03	; 3
 990:	fd db       	rcall	.-2054   	; 0x18c <wait>
 992:	eb cf       	rjmp	.-42     	; 0x96a <main+0xa2>

00000994 <wait_us>:
	PORTB |= 0x01;	//DIO high
}

void wait_us( int us )
{
	for (int i=0; i<us; i++)
 994:	18 16       	cp	r1, r24
 996:	19 06       	cpc	r1, r25
 998:	5c f4       	brge	.+22     	; 0x9b0 <wait_us+0x1c>
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 99e:	42 e0       	ldi	r20, 0x02	; 2
 9a0:	4a 95       	dec	r20
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <wait_us+0xc>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <wait_us+0x12>
 9a6:	2f 5f       	subi	r18, 0xFF	; 255
 9a8:	3f 4f       	sbci	r19, 0xFF	; 255
 9aa:	82 17       	cp	r24, r18
 9ac:	93 07       	cpc	r25, r19
 9ae:	b9 f7       	brne	.-18     	; 0x99e <wait_us+0xa>
 9b0:	08 95       	ret

000009b2 <sevenSegWriteByte>:
void sevenSegCmd(uint8_t cmd){
	sevenSegStart();
	sevenSegWriteByte(cmd);
	sevenSegStop();
}
void sevenSegWriteByte(uint8_t byteval){
 9b2:	1f 93       	push	r17
 9b4:	cf 93       	push	r28
 9b6:	df 93       	push	r29
 9b8:	18 2f       	mov	r17, r24
 9ba:	c8 e0       	ldi	r28, 0x08	; 8
 9bc:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ack;
	int i;
	for(i = 0; i < 8; i++){			//writes the data
		PORTB &= ~0x02;	//clk low
 9be:	c1 98       	cbi	0x18, 1	; 24
		wait_us(50);
 9c0:	82 e3       	ldi	r24, 0x32	; 50
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	e7 df       	rcall	.-50     	; 0x994 <wait_us>
		if(0x01 & byteval){	// dio should send high
 9c6:	10 ff       	sbrs	r17, 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <sevenSegWriteByte+0x1c>
			PORTB |= 0x01;
 9ca:	c0 9a       	sbi	0x18, 0	; 24
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <sevenSegWriteByte+0x1e>
			}else{				// dio should send low
			PORTB &= ~0x01;
 9ce:	c0 98       	cbi	0x18, 0	; 24
		}
		PORTB |= 0x02;	//clk high
 9d0:	c1 9a       	sbi	0x18, 1	; 24
		wait_us(50);
 9d2:	82 e3       	ldi	r24, 0x32	; 50
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	de df       	rcall	.-68     	; 0x994 <wait_us>
		byteval = byteval >> 1;
 9d8:	16 95       	lsr	r17
 9da:	21 97       	sbiw	r28, 0x01	; 1
	sevenSegStop();
}
void sevenSegWriteByte(uint8_t byteval){
	uint8_t ack;
	int i;
	for(i = 0; i < 8; i++){			//writes the data
 9dc:	81 f7       	brne	.-32     	; 0x9be <sevenSegWriteByte+0xc>
		PORTB |= 0x02;	//clk high
		wait_us(50);
		byteval = byteval >> 1;
	}
	//ack
	PORTB &= ~0x02;	//clk low
 9de:	c1 98       	cbi	0x18, 1	; 24
	DDRB &=  ~0x01; //dio is input
 9e0:	b8 98       	cbi	0x17, 0	; 23
	PORTB |=  0x01; //dio is high, ack should pull it low
 9e2:	c0 9a       	sbi	0x18, 0	; 24
	wait_us(50);
 9e4:	82 e3       	ldi	r24, 0x32	; 50
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	d5 df       	rcall	.-86     	; 0x994 <wait_us>
	
	if((PINB | 0x01) > 0){
 9ea:	86 b3       	in	r24, 0x16	; 22
		ack = 1;
		}else{
		ack = 0;
	}
	if(1 == ack){	//if not ack pull DIO down yourself
		DDRB |= 0x01;
 9ec:	b8 9a       	sbi	0x17, 0	; 23
		PORTB &= ~0x01;
	}
	wait_us(50);
 9ee:	c0 98       	cbi	0x18, 0	; 24
 9f0:	82 e3       	ldi	r24, 0x32	; 50
 9f2:	90 e0       	ldi	r25, 0x00	; 0
	PORTB |= 0x02;	//clk high   falling edge 9th clock
 9f4:	cf df       	rcall	.-98     	; 0x994 <wait_us>
	wait_us(50);
 9f6:	c1 9a       	sbi	0x18, 1	; 24
 9f8:	82 e3       	ldi	r24, 0x32	; 50
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	cb df       	rcall	.-106    	; 0x994 <wait_us>
	PORTB &= ~0x02;	//clk low	properly ends the ack
 9fe:	c1 98       	cbi	0x18, 1	; 24
	DDRD |= 0x01;
 a00:	88 9a       	sbi	0x11, 0	; 17
	
}
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	08 95       	ret

00000a0a <sevenSegStart>:

void sevenSegStart(void){
	PORTB |= 0x01;	//DIO pin high	others left alone
 a0a:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 0x02;	//clk pin high
 a0c:	c1 9a       	sbi	0x18, 1	; 24
	wait_us(50);
 a0e:	82 e3       	ldi	r24, 0x32	; 50
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	c0 df       	rcall	.-128    	; 0x994 <wait_us>
	PORTB &= ~0x01;	// DIO  pin low
 a14:	c0 98       	cbi	0x18, 0	; 24
 a16:	08 95       	ret

00000a18 <sevenSegStop>:
}

void sevenSegStop(void){
	PORTB &= ~0x02; // CLK pin low	others left alone
 a18:	c1 98       	cbi	0x18, 1	; 24
	wait_us(50);
 a1a:	82 e3       	ldi	r24, 0x32	; 50
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	ba df       	rcall	.-140    	; 0x994 <wait_us>
	PORTB &= ~0x01;	// DIO  pin low
 a20:	c0 98       	cbi	0x18, 0	; 24
	wait_us(50);
 a22:	82 e3       	ldi	r24, 0x32	; 50
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	b6 df       	rcall	.-148    	; 0x994 <wait_us>
	PORTB |= 0x02;	//CLK high
 a28:	c1 9a       	sbi	0x18, 1	; 24
	wait_us(50);
 a2a:	82 e3       	ldi	r24, 0x32	; 50
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	b2 df       	rcall	.-156    	; 0x994 <wait_us>
	PORTB |= 0x01;	//DIO high
 a30:	c0 9a       	sbi	0x18, 0	; 24
 a32:	08 95       	ret

00000a34 <sevenSegCmd>:
	sevenSegWriteByte(FIRSTSEGMENT | segAddress);	//address to write to
	sevenSegWriteByte(value);						//value to write
	sevenSegStop();
	sevenSegConf();
}
void sevenSegCmd(uint8_t cmd){
 a34:	cf 93       	push	r28
 a36:	c8 2f       	mov	r28, r24
	sevenSegStart();
 a38:	e8 df       	rcall	.-48     	; 0xa0a <sevenSegStart>
	sevenSegWriteByte(cmd);
 a3a:	8c 2f       	mov	r24, r28
	sevenSegStop();
 a3c:	ba df       	rcall	.-140    	; 0x9b2 <sevenSegWriteByte>
 a3e:	ec df       	rcall	.-40     	; 0xa18 <sevenSegStop>
}
 a40:	cf 91       	pop	r28
 a42:	08 95       	ret

00000a44 <sevenSegConf>:

void sevenSegConf(void){
	uint8_t command;
	command = DISPLAY_ON;
	command |= 0x03;	//brightness
	sevenSegCmd(command);
 a44:	8b e8       	ldi	r24, 0x8B	; 139
 a46:	f6 cf       	rjmp	.-20     	; 0xa34 <sevenSegCmd>
 a48:	08 95       	ret

00000a4a <sevenSegDisplaySegs>:
}
void sevenSegDisplaySegs(uint8_t segAddress, uint8_t value){
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	d8 2f       	mov	r29, r24
 a50:	c6 2f       	mov	r28, r22
	sevenSegCmd(BASEDATACMD | 0x04);	//fixed addresses
 a52:	84 e4       	ldi	r24, 0x44	; 68
 a54:	ef df       	rcall	.-34     	; 0xa34 <sevenSegCmd>
	sevenSegStart();
 a56:	d9 df       	rcall	.-78     	; 0xa0a <sevenSegStart>
 a58:	8d 2f       	mov	r24, r29
	sevenSegWriteByte(FIRSTSEGMENT | segAddress);	//address to write to
 a5a:	80 6c       	ori	r24, 0xC0	; 192
 a5c:	aa df       	rcall	.-172    	; 0x9b2 <sevenSegWriteByte>
	sevenSegWriteByte(value);						//value to write
 a5e:	8c 2f       	mov	r24, r28
 a60:	a8 df       	rcall	.-176    	; 0x9b2 <sevenSegWriteByte>
	sevenSegStop();
 a62:	da df       	rcall	.-76     	; 0xa18 <sevenSegStop>
 a64:	ef df       	rcall	.-34     	; 0xa44 <sevenSegConf>
	sevenSegConf();
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
}
 a6a:	08 95       	ret

00000a6c <showDigit>:
 a6c:	ff 92       	push	r15
 a6e:	0f 93       	push	r16
	DDRB = 0x03;	//pd0 and pd1 are output
	PORTB = 0x00;	//all pins are low
	sevenSegCleanup();
}
 
void showDigit(int digit){
 a70:	1f 93       	push	r17
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t segments, i;
	for(i = 1; i <= MAXDIGITS; i ++){	//start at 1 because you count from 0
		segments = digit % 10;
		sevenSegDisplaySegs(MAXDIGITS - i,_digitInSegments[segments]);
 a78:	0a e0       	ldi	r16, 0x0A	; 10
 a7a:	10 e0       	ldi	r17, 0x00	; 0
 a7c:	b8 01       	movw	r22, r16
 a7e:	25 d0       	rcall	.+74     	; 0xaca <__divmodhi4>
 a80:	f6 2e       	mov	r15, r22
 a82:	d7 2f       	mov	r29, r23
 a84:	fc 01       	movw	r30, r24
 a86:	ff 27       	eor	r31, r31
 a88:	ec 5a       	subi	r30, 0xAC	; 172
 a8a:	fe 4f       	sbci	r31, 0xFE	; 254
 a8c:	60 81       	ld	r22, Z
 a8e:	8c 2f       	mov	r24, r28
 a90:	dc df       	rcall	.-72     	; 0xa4a <sevenSegDisplaySegs>
		digit /= 10;
 a92:	8f 2d       	mov	r24, r15
 a94:	9d 2f       	mov	r25, r29
 a96:	c1 50       	subi	r28, 0x01	; 1
 a98:	88 f7       	brcc	.-30     	; 0xa7c <showDigit+0x10>
	}
}
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	ff 90       	pop	r15
 aa4:	08 95       	ret

00000aa6 <sevenSegCleanup>:

void sevenSegCleanup(void){
	sevenSegDisplaySegs(segOne ,0x00);	
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	cf df       	rcall	.-98     	; 0xa4a <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segTwo ,0x00);
 aac:	60 e0       	ldi	r22, 0x00	; 0
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	cc df       	rcall	.-104    	; 0xa4a <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segThree ,0x00);
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	82 e0       	ldi	r24, 0x02	; 2
 ab6:	c9 df       	rcall	.-110    	; 0xa4a <sevenSegDisplaySegs>
	sevenSegDisplaySegs(segFour ,0x00);
 ab8:	60 e0       	ldi	r22, 0x00	; 0
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	c6 cf       	rjmp	.-116    	; 0xa4a <sevenSegDisplaySegs>
 abe:	08 95       	ret

00000ac0 <sevenSegInit>:
 ac0:	83 e0       	ldi	r24, 0x03	; 3
	0x7F, // 8
	0x6F  // 9
};

void sevenSegInit(void){
	DDRB = 0x03;	//pd0 and pd1 are output
 ac2:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;	//all pins are low
 ac4:	18 ba       	out	0x18, r1	; 24
	sevenSegCleanup();
 ac6:	ef cf       	rjmp	.-34     	; 0xaa6 <sevenSegCleanup>
 ac8:	08 95       	ret

00000aca <__divmodhi4>:
 aca:	97 fb       	bst	r25, 7
 acc:	07 2e       	mov	r0, r23
 ace:	16 f4       	brtc	.+4      	; 0xad4 <__divmodhi4+0xa>
 ad0:	00 94       	com	r0
 ad2:	06 d0       	rcall	.+12     	; 0xae0 <__divmodhi4_neg1>
 ad4:	77 fd       	sbrc	r23, 7
 ad6:	08 d0       	rcall	.+16     	; 0xae8 <__divmodhi4_neg2>
 ad8:	0b d0       	rcall	.+22     	; 0xaf0 <__udivmodhi4>
 ada:	07 fc       	sbrc	r0, 7
 adc:	05 d0       	rcall	.+10     	; 0xae8 <__divmodhi4_neg2>
 ade:	3e f4       	brtc	.+14     	; 0xaee <__divmodhi4_exit>

00000ae0 <__divmodhi4_neg1>:
 ae0:	90 95       	com	r25
 ae2:	81 95       	neg	r24
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	08 95       	ret

00000ae8 <__divmodhi4_neg2>:
 ae8:	70 95       	com	r23
 aea:	61 95       	neg	r22
 aec:	7f 4f       	sbci	r23, 0xFF	; 255

00000aee <__divmodhi4_exit>:
 aee:	08 95       	ret

00000af0 <__udivmodhi4>:
 af0:	aa 1b       	sub	r26, r26
 af2:	bb 1b       	sub	r27, r27
 af4:	51 e1       	ldi	r21, 0x11	; 17
 af6:	07 c0       	rjmp	.+14     	; 0xb06 <__udivmodhi4_ep>

00000af8 <__udivmodhi4_loop>:
 af8:	aa 1f       	adc	r26, r26
 afa:	bb 1f       	adc	r27, r27
 afc:	a6 17       	cp	r26, r22
 afe:	b7 07       	cpc	r27, r23
 b00:	10 f0       	brcs	.+4      	; 0xb06 <__udivmodhi4_ep>
 b02:	a6 1b       	sub	r26, r22
 b04:	b7 0b       	sbc	r27, r23

00000b06 <__udivmodhi4_ep>:
 b06:	88 1f       	adc	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	5a 95       	dec	r21
 b0c:	a9 f7       	brne	.-22     	; 0xaf8 <__udivmodhi4_loop>
 b0e:	80 95       	com	r24
 b10:	90 95       	com	r25
 b12:	bc 01       	movw	r22, r24
 b14:	cd 01       	movw	r24, r26
 b16:	08 95       	ret

00000b18 <do_rand>:
 b18:	8f 92       	push	r8
 b1a:	9f 92       	push	r9
 b1c:	af 92       	push	r10
 b1e:	bf 92       	push	r11
 b20:	cf 92       	push	r12
 b22:	df 92       	push	r13
 b24:	ef 92       	push	r14
 b26:	ff 92       	push	r15
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
 b2c:	ec 01       	movw	r28, r24
 b2e:	68 81       	ld	r22, Y
 b30:	79 81       	ldd	r23, Y+1	; 0x01
 b32:	8a 81       	ldd	r24, Y+2	; 0x02
 b34:	9b 81       	ldd	r25, Y+3	; 0x03
 b36:	61 15       	cp	r22, r1
 b38:	71 05       	cpc	r23, r1
 b3a:	81 05       	cpc	r24, r1
 b3c:	91 05       	cpc	r25, r1
 b3e:	21 f4       	brne	.+8      	; 0xb48 <do_rand+0x30>
 b40:	64 e2       	ldi	r22, 0x24	; 36
 b42:	79 ed       	ldi	r23, 0xD9	; 217
 b44:	8b e5       	ldi	r24, 0x5B	; 91
 b46:	97 e0       	ldi	r25, 0x07	; 7
 b48:	2d e1       	ldi	r18, 0x1D	; 29
 b4a:	33 ef       	ldi	r19, 0xF3	; 243
 b4c:	41 e0       	ldi	r20, 0x01	; 1
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	38 d0       	rcall	.+112    	; 0xbc2 <__divmodsi4>
 b52:	49 01       	movw	r8, r18
 b54:	5a 01       	movw	r10, r20
 b56:	9b 01       	movw	r18, r22
 b58:	ac 01       	movw	r20, r24
 b5a:	a7 ea       	ldi	r26, 0xA7	; 167
 b5c:	b1 e4       	ldi	r27, 0x41	; 65
 b5e:	4d d0       	rcall	.+154    	; 0xbfa <__muluhisi3>
 b60:	6b 01       	movw	r12, r22
 b62:	7c 01       	movw	r14, r24
 b64:	ac ee       	ldi	r26, 0xEC	; 236
 b66:	b4 ef       	ldi	r27, 0xF4	; 244
 b68:	a5 01       	movw	r20, r10
 b6a:	94 01       	movw	r18, r8
 b6c:	52 d0       	rcall	.+164    	; 0xc12 <__mulohisi3>
 b6e:	dc 01       	movw	r26, r24
 b70:	cb 01       	movw	r24, r22
 b72:	8c 0d       	add	r24, r12
 b74:	9d 1d       	adc	r25, r13
 b76:	ae 1d       	adc	r26, r14
 b78:	bf 1d       	adc	r27, r15
 b7a:	b7 ff       	sbrs	r27, 7
 b7c:	03 c0       	rjmp	.+6      	; 0xb84 <do_rand+0x6c>
 b7e:	01 97       	sbiw	r24, 0x01	; 1
 b80:	a1 09       	sbc	r26, r1
 b82:	b0 48       	sbci	r27, 0x80	; 128
 b84:	88 83       	st	Y, r24
 b86:	99 83       	std	Y+1, r25	; 0x01
 b88:	aa 83       	std	Y+2, r26	; 0x02
 b8a:	bb 83       	std	Y+3, r27	; 0x03
 b8c:	9f 77       	andi	r25, 0x7F	; 127
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	ff 90       	pop	r15
 b94:	ef 90       	pop	r14
 b96:	df 90       	pop	r13
 b98:	cf 90       	pop	r12
 b9a:	bf 90       	pop	r11
 b9c:	af 90       	pop	r10
 b9e:	9f 90       	pop	r9
 ba0:	8f 90       	pop	r8
 ba2:	08 95       	ret

00000ba4 <rand_r>:
 ba4:	b9 cf       	rjmp	.-142    	; 0xb18 <do_rand>

00000ba6 <rand>:
 ba6:	80 e0       	ldi	r24, 0x00	; 0
 ba8:	91 e0       	ldi	r25, 0x01	; 1
 baa:	b6 cf       	rjmp	.-148    	; 0xb18 <do_rand>

00000bac <srand>:
 bac:	a0 e0       	ldi	r26, 0x00	; 0
 bae:	b0 e0       	ldi	r27, 0x00	; 0
 bb0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 bb4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 bb8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 bbc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 bc0:	08 95       	ret

00000bc2 <__divmodsi4>:
 bc2:	05 2e       	mov	r0, r21
 bc4:	97 fb       	bst	r25, 7
 bc6:	16 f4       	brtc	.+4      	; 0xbcc <__divmodsi4+0xa>
 bc8:	00 94       	com	r0
 bca:	0f d0       	rcall	.+30     	; 0xbea <__negsi2>
 bcc:	57 fd       	sbrc	r21, 7
 bce:	05 d0       	rcall	.+10     	; 0xbda <__divmodsi4_neg2>
 bd0:	24 d0       	rcall	.+72     	; 0xc1a <__udivmodsi4>
 bd2:	07 fc       	sbrc	r0, 7
 bd4:	02 d0       	rcall	.+4      	; 0xbda <__divmodsi4_neg2>
 bd6:	46 f4       	brtc	.+16     	; 0xbe8 <__divmodsi4_exit>
 bd8:	08 c0       	rjmp	.+16     	; 0xbea <__negsi2>

00000bda <__divmodsi4_neg2>:
 bda:	50 95       	com	r21
 bdc:	40 95       	com	r20
 bde:	30 95       	com	r19
 be0:	21 95       	neg	r18
 be2:	3f 4f       	sbci	r19, 0xFF	; 255
 be4:	4f 4f       	sbci	r20, 0xFF	; 255
 be6:	5f 4f       	sbci	r21, 0xFF	; 255

00000be8 <__divmodsi4_exit>:
 be8:	08 95       	ret

00000bea <__negsi2>:
 bea:	90 95       	com	r25
 bec:	80 95       	com	r24
 bee:	70 95       	com	r23
 bf0:	61 95       	neg	r22
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255
 bf4:	8f 4f       	sbci	r24, 0xFF	; 255
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	08 95       	ret

00000bfa <__muluhisi3>:
 bfa:	31 d0       	rcall	.+98     	; 0xc5e <__umulhisi3>
 bfc:	a5 9f       	mul	r26, r21
 bfe:	90 0d       	add	r25, r0
 c00:	b4 9f       	mul	r27, r20
 c02:	90 0d       	add	r25, r0
 c04:	a4 9f       	mul	r26, r20
 c06:	80 0d       	add	r24, r0
 c08:	91 1d       	adc	r25, r1
 c0a:	11 24       	eor	r1, r1
 c0c:	08 95       	ret

00000c0e <__mulshisi3>:
 c0e:	b7 ff       	sbrs	r27, 7
 c10:	f4 cf       	rjmp	.-24     	; 0xbfa <__muluhisi3>

00000c12 <__mulohisi3>:
 c12:	f3 df       	rcall	.-26     	; 0xbfa <__muluhisi3>
 c14:	82 1b       	sub	r24, r18
 c16:	93 0b       	sbc	r25, r19
 c18:	08 95       	ret

00000c1a <__udivmodsi4>:
 c1a:	a1 e2       	ldi	r26, 0x21	; 33
 c1c:	1a 2e       	mov	r1, r26
 c1e:	aa 1b       	sub	r26, r26
 c20:	bb 1b       	sub	r27, r27
 c22:	fd 01       	movw	r30, r26
 c24:	0d c0       	rjmp	.+26     	; 0xc40 <__udivmodsi4_ep>

00000c26 <__udivmodsi4_loop>:
 c26:	aa 1f       	adc	r26, r26
 c28:	bb 1f       	adc	r27, r27
 c2a:	ee 1f       	adc	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	a2 17       	cp	r26, r18
 c30:	b3 07       	cpc	r27, r19
 c32:	e4 07       	cpc	r30, r20
 c34:	f5 07       	cpc	r31, r21
 c36:	20 f0       	brcs	.+8      	; 0xc40 <__udivmodsi4_ep>
 c38:	a2 1b       	sub	r26, r18
 c3a:	b3 0b       	sbc	r27, r19
 c3c:	e4 0b       	sbc	r30, r20
 c3e:	f5 0b       	sbc	r31, r21

00000c40 <__udivmodsi4_ep>:
 c40:	66 1f       	adc	r22, r22
 c42:	77 1f       	adc	r23, r23
 c44:	88 1f       	adc	r24, r24
 c46:	99 1f       	adc	r25, r25
 c48:	1a 94       	dec	r1
 c4a:	69 f7       	brne	.-38     	; 0xc26 <__udivmodsi4_loop>
 c4c:	60 95       	com	r22
 c4e:	70 95       	com	r23
 c50:	80 95       	com	r24
 c52:	90 95       	com	r25
 c54:	9b 01       	movw	r18, r22
 c56:	ac 01       	movw	r20, r24
 c58:	bd 01       	movw	r22, r26
 c5a:	cf 01       	movw	r24, r30
 c5c:	08 95       	ret

00000c5e <__umulhisi3>:
 c5e:	a2 9f       	mul	r26, r18
 c60:	b0 01       	movw	r22, r0
 c62:	b3 9f       	mul	r27, r19
 c64:	c0 01       	movw	r24, r0
 c66:	a3 9f       	mul	r26, r19
 c68:	70 0d       	add	r23, r0
 c6a:	81 1d       	adc	r24, r1
 c6c:	11 24       	eor	r1, r1
 c6e:	91 1d       	adc	r25, r1
 c70:	b2 9f       	mul	r27, r18
 c72:	70 0d       	add	r23, r0
 c74:	81 1d       	adc	r24, r1
 c76:	11 24       	eor	r1, r1
 c78:	91 1d       	adc	r25, r1
 c7a:	08 95       	ret

00000c7c <_exit>:
 c7c:	f8 94       	cli

00000c7e <__stop_program>:
 c7e:	ff cf       	rjmp	.-2      	; 0xc7e <__stop_program>
