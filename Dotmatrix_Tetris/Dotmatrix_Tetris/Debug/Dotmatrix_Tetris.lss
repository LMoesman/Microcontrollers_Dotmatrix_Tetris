
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000009de  00000a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800156  00800156  00000ac8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001705  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2b  00000000  00000000  00002371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001186  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a67f  00000000  00000000  00004518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d39  00000000  00000000  0000eb97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000304d  00000000  00000000  0000fa20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	ba c1       	rjmp	.+884    	; 0x382 <__vector_3>
   e:	00 00       	nop
  10:	00 c2       	rjmp	.+1024   	; 0x412 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 35       	cpi	r26, 0x56	; 86
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e5       	ldi	r26, 0x56	; 86
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 36       	cpi	r26, 0x60	; 96
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f4 d2       	rcall	.+1512   	; 0x6ac <main>
  c4:	8a c4       	rjmp	.+2324   	; 0x9da <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
  fa:	08 95       	ret

000000fc <drawArray>:
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	e6 df       	rcall	.-52     	; 0xd4 <twi_start>
 108:	80 ee       	ldi	r24, 0xE0	; 224
 10a:	ed df       	rcall	.-38     	; 0xe6 <twi_tx>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	eb df       	rcall	.-42     	; 0xe6 <twi_tx>
 110:	e8 01       	movw	r28, r16
 112:	08 5f       	subi	r16, 0xF8	; 248
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	89 91       	ld	r24, Y+
 118:	80 fb       	bst	r24, 0
 11a:	87 95       	ror	r24
 11c:	87 f9       	bld	r24, 7
 11e:	e3 df       	rcall	.-58     	; 0xe6 <twi_tx>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e1 df       	rcall	.-62     	; 0xe6 <twi_tx>
 124:	c0 17       	cp	r28, r16
 126:	d1 07       	cpc	r29, r17
 128:	b1 f7       	brne	.-20     	; 0x116 <drawArray+0x1a>
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <displayInitHT16K33>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	08 2f       	mov	r16, r24
 144:	c7 df       	rcall	.-114    	; 0xd4 <twi_start>
 146:	80 2f       	mov	r24, r16
 148:	ce df       	rcall	.-100    	; 0xe6 <twi_tx>
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	cc df       	rcall	.-104    	; 0xe6 <twi_tx>
 14e:	c4 e7       	ldi	r28, 0x74	; 116
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	14 e9       	ldi	r17, 0x94	; 148
 154:	18 83       	st	Y, r17
 156:	be df       	rcall	.-132    	; 0xd4 <twi_start>
 158:	80 2f       	mov	r24, r16
 15a:	c5 df       	rcall	.-118    	; 0xe6 <twi_tx>
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	c3 df       	rcall	.-122    	; 0xe6 <twi_tx>
 160:	18 83       	st	Y, r17
 162:	b8 df       	rcall	.-144    	; 0xd4 <twi_start>
 164:	80 2f       	mov	r24, r16
 166:	bf df       	rcall	.-130    	; 0xe6 <twi_tx>
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	bd df       	rcall	.-134    	; 0xe6 <twi_tx>
 16c:	18 83       	st	Y, r17
 16e:	b2 df       	rcall	.-156    	; 0xd4 <twi_start>
 170:	80 2f       	mov	r24, r16
 172:	b9 df       	rcall	.-142    	; 0xe6 <twi_tx>
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	b7 df       	rcall	.-146    	; 0xe6 <twi_tx>
 178:	18 83       	st	Y, r17
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <displayInit>:
 184:	a1 df       	rcall	.-190    	; 0xc8 <twi_init>
 186:	80 ee       	ldi	r24, 0xE0	; 224
 188:	d8 cf       	rjmp	.-80     	; 0x13a <displayInitHT16K33>
 18a:	08 95       	ret

0000018c <wait>:
 18c:	18 16       	cp	r1, r24
 18e:	19 06       	cpc	r1, r25
 190:	6c f4       	brge	.+26     	; 0x1ac <wait+0x20>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	e9 ef       	ldi	r30, 0xF9	; 249
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <wait+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <wait+0x14>
 1a0:	00 00       	nop
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	a9 f7       	brne	.-22     	; 0x196 <wait+0xa>
 1ac:	08 95       	ret

000001ae <theCoolFullRowAnimation>:
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	98 2e       	mov	r9, r24
 1c8:	99 0c       	add	r9, r9
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	88 2e       	mov	r8, r24
 1ce:	88 0c       	add	r8, r8
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	68 94       	set
 1d8:	aa 24       	eor	r10, r10
 1da:	a7 f8       	bld	r10, 7
 1dc:	b1 2c       	mov	r11, r1
 1de:	0f 2e       	mov	r0, r31
 1e0:	f4 e7       	ldi	r31, 0x74	; 116
 1e2:	cf 2e       	mov	r12, r31
 1e4:	d1 2c       	mov	r13, r1
 1e6:	f0 2d       	mov	r31, r0
 1e8:	d4 e9       	ldi	r29, 0x94	; 148
 1ea:	74 df       	rcall	.-280    	; 0xd4 <twi_start>
 1ec:	80 ee       	ldi	r24, 0xE0	; 224
 1ee:	7b df       	rcall	.-266    	; 0xe6 <twi_tx>
 1f0:	89 2d       	mov	r24, r9
 1f2:	79 df       	rcall	.-270    	; 0xe6 <twi_tx>
 1f4:	8c 2f       	mov	r24, r28
 1f6:	80 95       	com	r24
 1f8:	80 fb       	bst	r24, 0
 1fa:	87 95       	ror	r24
 1fc:	87 f9       	bld	r24, 7
 1fe:	73 df       	rcall	.-282    	; 0xe6 <twi_tx>
 200:	75 01       	movw	r14, r10
 202:	00 2e       	mov	r0, r16
 204:	02 c0       	rjmp	.+4      	; 0x20a <theCoolFullRowAnimation+0x5c>
 206:	f5 94       	asr	r15
 208:	e7 94       	ror	r14
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <theCoolFullRowAnimation+0x58>
 20e:	ce 29       	or	r28, r14
 210:	f6 01       	movw	r30, r12
 212:	d0 83       	st	Z, r29
 214:	5f df       	rcall	.-322    	; 0xd4 <twi_start>
 216:	80 ee       	ldi	r24, 0xE0	; 224
 218:	66 df       	rcall	.-308    	; 0xe6 <twi_tx>
 21a:	88 2d       	mov	r24, r8
 21c:	64 df       	rcall	.-312    	; 0xe6 <twi_tx>
 21e:	8c 2f       	mov	r24, r28
 220:	80 95       	com	r24
 222:	80 fb       	bst	r24, 0
 224:	87 95       	ror	r24
 226:	87 f9       	bld	r24, 7
 228:	5e df       	rcall	.-324    	; 0xe6 <twi_tx>
 22a:	ce 29       	or	r28, r14
 22c:	f6 01       	movw	r30, r12
 22e:	d0 83       	st	Z, r29
 230:	8d e4       	ldi	r24, 0x4D	; 77
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	ab df       	rcall	.-170    	; 0x18c <wait>
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	09 30       	cpi	r16, 0x09	; 9
 23c:	11 05       	cpc	r17, r1
 23e:	a9 f6       	brne	.-86     	; 0x1ea <theCoolFullRowAnimation+0x3c>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	08 95       	ret

0000025a <setupDisplayArray>:
 25a:	7f 92       	push	r7
}blockLocation;
int score = 0;

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
 25c:	8f 92       	push	r8
 25e:	9f 92       	push	r9
 260:	af 92       	push	r10
 262:	bf 92       	push	r11
 264:	cf 92       	push	r12
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	04 e0       	ldi	r16, 0x04	; 4
 276:	11 e0       	ldi	r17, 0x01	; 1
 278:	4c 01       	movw	r8, r24
	int row;
	for(row = 0; row < 8; row++) {
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 27e:	0f 2e       	mov	r0, r31
 280:	fa e5       	ldi	r31, 0x5A	; 90
 282:	af 2e       	mov	r10, r31
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	bf 2e       	mov	r11, r31
 288:	f0 2d       	mov	r31, r0
				if(col == blockLocation.column || col == blockLocation.column + 1) {
					tempRow = tempRow | (128 >> col);
 28a:	68 94       	set
 28c:	cc 24       	eor	r12, r12
 28e:	c7 f8       	bld	r12, 7
 290:	d1 2c       	mov	r13, r1

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
 292:	f8 01       	movw	r30, r16
 294:	77 80       	ldd	r7, Z+7	; 0x07
		for(col = 0; col < 8; col++) {
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 296:	f5 01       	movw	r30, r10
 298:	60 81       	ld	r22, Z
 29a:	71 81       	ldd	r23, Z+1	; 0x01
 29c:	db 01       	movw	r26, r22
 29e:	11 97       	sbiw	r26, 0x01	; 1
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 2a0:	c2 81       	ldd	r28, Z+2	; 0x02
 2a2:	d3 81       	ldd	r29, Z+3	; 0x03
 2a4:	7e 01       	movw	r14, r28
 2a6:	ff ef       	ldi	r31, 0xFF	; 255
 2a8:	ef 1a       	sub	r14, r31
 2aa:	ff 0a       	sbc	r15, r31
 2ac:	08 5f       	subi	r16, 0xF8	; 248
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	f8 01       	movw	r30, r16
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
			if (row == blockLocation.row || row == blockLocation.row - 1) {
 2b6:	64 17       	cp	r22, r20
 2b8:	75 07       	cpc	r23, r21
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <setupDisplayArray+0x68>
 2bc:	a4 17       	cp	r26, r20
 2be:	b5 07       	cpc	r27, r21
 2c0:	71 f4       	brne	.+28     	; 0x2de <setupDisplayArray+0x84>
				if(col == blockLocation.column || col == blockLocation.column + 1) {
 2c2:	c2 17       	cp	r28, r18
 2c4:	d3 07       	cpc	r29, r19
 2c6:	19 f0       	breq	.+6      	; 0x2ce <setupDisplayArray+0x74>
 2c8:	e2 16       	cp	r14, r18
 2ca:	f3 06       	cpc	r15, r19
 2cc:	41 f4       	brne	.+16     	; 0x2de <setupDisplayArray+0x84>
					tempRow = tempRow | (128 >> col);
 2ce:	c6 01       	movw	r24, r12
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <setupDisplayArray+0x7e>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <setupDisplayArray+0x7a>
 2dc:	78 2a       	or	r7, r24
				}
			}
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
 2de:	82 91       	ld	r24, -Z
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <setupDisplayArray+0x90>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <setupDisplayArray+0x8c>
 2ee:	78 2a       	or	r7, r24
void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	28 30       	cpi	r18, 0x08	; 8
 2f6:	31 05       	cpc	r19, r1
 2f8:	f1 f6       	brne	.-68     	; 0x2b6 <setupDisplayArray+0x5c>
				}
			}
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
 2fa:	f4 01       	movw	r30, r8
 2fc:	71 92       	st	Z+, r7
 2fe:	4f 01       	movw	r8, r30

/******************************************************************/

void setupDisplayArray(unsigned char* displayBuffer){
	int row;
	for(row = 0; row < 8; row++) {
 300:	4f 5f       	subi	r20, 0xFF	; 255
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	48 30       	cpi	r20, 0x08	; 8
 306:	51 05       	cpc	r21, r1
 308:	21 f6       	brne	.-120    	; 0x292 <setupDisplayArray+0x38>
			
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		displayBuffer[row] = tempRow; 
	}
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	bf 90       	pop	r11
 31c:	af 90       	pop	r10
 31e:	9f 90       	pop	r9
 320:	8f 90       	pop	r8
 322:	7f 90       	pop	r7
 324:	08 95       	ret

00000326 <resetGame>:
		showDigit(9999);
	}
	i = rand() % 7;
}

void resetGame(){
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	60 97       	sbiw	r28, 0x10	; 16
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
	showDigit(0);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	45 d2       	rcall	.+1162   	; 0x7ca <showDigit>
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	64 e4       	ldi	r22, 0x44	; 68
 346:	71 e0       	ldi	r23, 0x01	; 1
	int row;
	for (row = 0;row < 8;row++) {
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
 348:	30 e1       	ldi	r19, 0x10	; 16
 34a:	ae 01       	movw	r20, r28
 34c:	4f 5f       	subi	r20, 0xFF	; 255
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	fa 01       	movw	r30, r20
 352:	23 2f       	mov	r18, r19
 354:	11 92       	st	Z+, r1
 356:	2a 95       	dec	r18
 358:	e9 f7       	brne	.-6      	; 0x354 <resetGame+0x2e>
 35a:	28 e0       	ldi	r18, 0x08	; 8
 35c:	fa 01       	movw	r30, r20
 35e:	dc 01       	movw	r26, r24
 360:	01 90       	ld	r0, Z+
 362:	0d 92       	st	X+, r0
 364:	2a 95       	dec	r18
 366:	e1 f7       	brne	.-8      	; 0x360 <resetGame+0x3a>
 368:	08 96       	adiw	r24, 0x08	; 8
}

void resetGame(){
	showDigit(0);
	int row;
	for (row = 0;row < 8;row++) {
 36a:	86 17       	cp	r24, r22
 36c:	97 07       	cpc	r25, r23
 36e:	81 f7       	brne	.-32     	; 0x350 <resetGame+0x2a>
// 		{0, 0, 0, 0, 0, 0, 0, 0},
// 		{0, 0, 0, 0, 0, 0, 0, 0},
// 		{0, 0, 0, 0, 0, 0, 0, 0},
// 		{1, 1, 1, 1, 1, 1, 1, 1}
// 	};
}
 370:	60 96       	adiw	r28, 0x10	; 16
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <__vector_3>:
	
	checkForFullRows();
}

/******************************************************************/
ISR(INT2_vect) {
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	0b b6       	in	r0, 0x3b	; 59
 38e:	0f 92       	push	r0
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	
	
	if(PIND == 0x0C){
 3a8:	80 b3       	in	r24, 0x10	; 16
 3aa:	8c 30       	cpi	r24, 0x0C	; 12
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <__vector_3+0x30>
		resetGame();
 3ae:	bb df       	rcall	.-138    	; 0x326 <resetGame>
		return;
 3b0:	1d c0       	rjmp	.+58     	; 0x3ec <__vector_3+0x6a>
	}
	if(blockLocation.column < 6){
 3b2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <blockLocation+0x2>
 3b6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <blockLocation+0x3>
 3ba:	86 30       	cpi	r24, 0x06	; 6
 3bc:	91 05       	cpc	r25, r1
 3be:	b4 f4       	brge	.+44     	; 0x3ec <__vector_3+0x6a>
		if(display_array[blockLocation.row][blockLocation.column+2] == 0) {
 3c0:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <blockLocation>
 3c4:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <blockLocation+0x1>
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	ee 0f       	add	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	ec 5f       	subi	r30, 0xFC	; 252
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	e8 0f       	add	r30, r24
 3da:	f9 1f       	adc	r31, r25
 3dc:	22 81       	ldd	r18, Z+2	; 0x02
 3de:	21 11       	cpse	r18, r1
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <__vector_3+0x6a>
			blockLocation.column++;
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <blockLocation+0x3>
 3e8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <blockLocation+0x2>
		}
		
	}
	
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0b be       	out	0x3b, r0	; 59
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__vector_4>:

/******************************************************************/
ISR(INT3_vect) {
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	0b b6       	in	r0, 0x3b	; 59
 41e:	0f 92       	push	r0
 420:	2f 93       	push	r18
 422:	3f 93       	push	r19
 424:	4f 93       	push	r20
 426:	5f 93       	push	r21
 428:	6f 93       	push	r22
 42a:	7f 93       	push	r23
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	af 93       	push	r26
 432:	bf 93       	push	r27
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
	notes:			Moves block to the left if no collision occurred
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	
		if(PIND == 0x0C){
 438:	80 b3       	in	r24, 0x10	; 16
 43a:	8c 30       	cpi	r24, 0x0C	; 12
 43c:	11 f4       	brne	.+4      	; 0x442 <__vector_4+0x30>
			resetGame();
 43e:	73 df       	rcall	.-282    	; 0x326 <resetGame>
			return;
 440:	1d c0       	rjmp	.+58     	; 0x47c <__vector_4+0x6a>
		}
		if(blockLocation.column > 0){
 442:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <blockLocation+0x2>
 446:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <blockLocation+0x3>
 44a:	18 16       	cp	r1, r24
 44c:	19 06       	cpc	r1, r25
 44e:	b4 f4       	brge	.+44     	; 0x47c <__vector_4+0x6a>
			if(display_array[blockLocation.row][blockLocation.column-1] == 0) {
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <blockLocation>
 456:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <blockLocation+0x1>
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	ec 5f       	subi	r30, 0xFC	; 252
 468:	fe 4f       	sbci	r31, 0xFE	; 254
 46a:	e8 0f       	add	r30, r24
 46c:	f9 1f       	adc	r31, r25
 46e:	20 81       	ld	r18, Z
 470:	21 11       	cpse	r18, r1
 472:	04 c0       	rjmp	.+8      	; 0x47c <__vector_4+0x6a>
				blockLocation.column--;
 474:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <blockLocation+0x3>
 478:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <blockLocation+0x2>
			}
		}
}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0b be       	out	0x3b, r0	; 59
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <shoveDown>:
score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 4a2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <i+0x1>
 4a6:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <i>
 4aa:	9c 01       	movw	r18, r24
 4ac:	22 50       	subi	r18, 0x02	; 2
 4ae:	31 09       	sbc	r19, r1
 4b0:	fa f0       	brmi	.+62     	; 0x4f0 <shoveDown+0x4e>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	8c 5f       	subi	r24, 0xFC	; 252
 4c0:	9e 4f       	sbci	r25, 0xFE	; 254
		int rowToShove = x - 2;
		memcpy(display_array[x],display_array[rowToShove],sizeof(unsigned char) * 8);	//cpy the upper row to this row
 4c2:	ac 01       	movw	r20, r24
 4c4:	40 51       	subi	r20, 0x10	; 16
 4c6:	51 09       	sbc	r21, r1
 4c8:	68 e0       	ldi	r22, 0x08	; 8
 4ca:	fa 01       	movw	r30, r20
 4cc:	dc 01       	movw	r26, r24
 4ce:	01 90       	ld	r0, Z+
 4d0:	0d 92       	st	X+, r0
 4d2:	6a 95       	dec	r22
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <shoveDown+0x2c>
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
 4d6:	dc 01       	movw	r26, r24
 4d8:	18 97       	sbiw	r26, 0x08	; 8
 4da:	fc 01       	movw	r30, r24
 4dc:	78 97       	sbiw	r30, 0x18	; 24
 4de:	88 e0       	ldi	r24, 0x08	; 8
 4e0:	01 90       	ld	r0, Z+
 4e2:	0d 92       	st	X+, r0
 4e4:	8a 95       	dec	r24
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <shoveDown+0x3e>
score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 4e8:	22 50       	subi	r18, 0x02	; 2
 4ea:	31 09       	sbc	r19, r1
 4ec:	ca 01       	movw	r24, r20
 4ee:	4a f7       	brpl	.-46     	; 0x4c2 <shoveDown+0x20>
 4f0:	08 95       	ret

000004f2 <checkForFullRows>:
		}
	}
	return 1;
}

void checkForFullRows(void){
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	e4 e0       	ldi	r30, 0x04	; 4
 500:	f1 e0       	ldi	r31, 0x01	; 1
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 502:	00 e0       	ldi	r16, 0x00	; 0
 504:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 1;
}

void checkForFullRows(void){
	int tempscore = 0;
 506:	e1 2c       	mov	r14, r1
 508:	f1 2c       	mov	r15, r1
 50a:	1d c0       	rjmp	.+58     	; 0x546 <checkForFullRows+0x54>
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
 50c:	91 91       	ld	r25, Z+
 50e:	91 30       	cpi	r25, 0x01	; 1
 510:	39 f4       	brne	.+14     	; 0x520 <checkForFullRows+0x2e>
 512:	df 01       	movw	r26, r30
 514:	19 97       	sbiw	r26, 0x09	; 9
 516:	9c 91       	ld	r25, X
 518:	91 30       	cpi	r25, 0x01	; 1
 51a:	11 f4       	brne	.+4      	; 0x520 <checkForFullRows+0x2e>
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	3f 4f       	sbci	r19, 0xFF	; 255
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
 520:	ec 17       	cp	r30, r28
 522:	fd 07       	cpc	r31, r29
 524:	99 f7       	brne	.-26     	; 0x50c <checkForFullRows+0x1a>
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
		}
		if(8 == count){	//whole row filled
 526:	28 30       	cpi	r18, 0x08	; 8
 528:	31 05       	cpc	r19, r1
 52a:	39 f4       	brne	.+14     	; 0x53a <checkForFullRows+0x48>
			tempscore += 10;
 52c:	8a e0       	ldi	r24, 0x0A	; 10
 52e:	e8 0e       	add	r14, r24
 530:	f1 1c       	adc	r15, r1
			theCoolFullRowAnimation(x);
 532:	c8 01       	movw	r24, r16
 534:	3c de       	rcall	.-904    	; 0x1ae <theCoolFullRowAnimation>
			shoveDown(x);
 536:	c8 01       	movw	r24, r16
 538:	b4 df       	rcall	.-152    	; 0x4a2 <shoveDown>
}

void checkForFullRows(void){
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 53a:	0f 5f       	subi	r16, 0xFF	; 255
 53c:	1f 4f       	sbci	r17, 0xFF	; 255
 53e:	fe 01       	movw	r30, r28
 540:	08 30       	cpi	r16, 0x08	; 8
 542:	11 05       	cpc	r17, r1
 544:	29 f0       	breq	.+10     	; 0x550 <checkForFullRows+0x5e>
 546:	ef 01       	movw	r28, r30
 548:	28 96       	adiw	r28, 0x08	; 8
		}
	}
	return 1;
}

void checkForFullRows(void){
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	de cf       	rjmp	.-68     	; 0x50c <checkForFullRows+0x1a>
			tempscore += 10;
			theCoolFullRowAnimation(x);
			shoveDown(x);
		}
	}
score += tempscore;
 550:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
 554:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
 558:	8e 0d       	add	r24, r14
 55a:	9f 1d       	adc	r25, r15
 55c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
 560:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
	showDigit(score);
 564:	32 d1       	rcall	.+612    	; 0x7ca <showDigit>
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	08 95       	ret

00000574 <animateGame>:
// 		{0, 0, 0, 0, 0, 0, 0, 0},
// 		{1, 1, 1, 1, 1, 1, 1, 1}
// 	};
}

void animateGame() {
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	28 97       	sbiw	r28, 0x08	; 8
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 && display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 58c:	0a e5       	ldi	r16, 0x5A	; 90
 58e:	11 e0       	ldi	r17, 0x01	; 1
}

void animateGame() {
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	62 de       	rcall	.-828    	; 0x25a <setupDisplayArray>
		drawArray(displayBuffer);
 596:	ce 01       	movw	r24, r28
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	b0 dd       	rcall	.-1184   	; 0xfc <drawArray>
		wait(2000);
 59c:	80 ed       	ldi	r24, 0xD0	; 208
 59e:	97 e0       	ldi	r25, 0x07	; 7
 5a0:	f5 dd       	rcall	.-1046   	; 0x18c <wait>
		 if (display_array[blockLocation.row+1][blockLocation.column] != 1 && display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 5a2:	f8 01       	movw	r30, r16
 5a4:	40 81       	ld	r20, Z
 5a6:	51 81       	ldd	r21, Z+1	; 0x01
 5a8:	ca 01       	movw	r24, r20
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	22 81       	ldd	r18, Z+2	; 0x02
 5ae:	33 81       	ldd	r19, Z+3	; 0x03
 5b0:	fc 01       	movw	r30, r24
 5b2:	ee 0f       	add	r30, r30
 5b4:	ff 1f       	adc	r31, r31
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	ee 0f       	add	r30, r30
 5bc:	ff 1f       	adc	r31, r31
 5be:	ec 5f       	subi	r30, 0xFC	; 252
 5c0:	fe 4f       	sbci	r31, 0xFE	; 254
 5c2:	e2 0f       	add	r30, r18
 5c4:	f3 1f       	adc	r31, r19
 5c6:	60 81       	ld	r22, Z
 5c8:	61 30       	cpi	r22, 0x01	; 1
 5ca:	91 f0       	breq	.+36     	; 0x5f0 <animateGame+0x7c>
 5cc:	fc 01       	movw	r30, r24
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	ec 5f       	subi	r30, 0xFC	; 252
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	e2 0f       	add	r30, r18
 5e0:	f3 1f       	adc	r31, r19
 5e2:	61 81       	ldd	r22, Z+1	; 0x01
 5e4:	61 30       	cpi	r22, 0x01	; 1
 5e6:	21 f0       	breq	.+8      	; 0x5f0 <animateGame+0x7c>
				blockLocation.row++;
 5e8:	f8 01       	movw	r30, r16
 5ea:	91 83       	std	Z+1, r25	; 0x01
 5ec:	80 83       	st	Z, r24
		 }else {
			 break;
		 }
		
	}
 5ee:	d0 cf       	rjmp	.-96     	; 0x590 <animateGame+0x1c>
	display_array[blockLocation.row][blockLocation.column] = 1;
 5f0:	ca 01       	movw	r24, r20
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	8c 5f       	subi	r24, 0xFC	; 252
 600:	9e 4f       	sbci	r25, 0xFE	; 254
 602:	fc 01       	movw	r30, r24
 604:	e2 0f       	add	r30, r18
 606:	f3 1f       	adc	r31, r19
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column] = 1;
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	44 0f       	add	r20, r20
 612:	55 1f       	adc	r21, r21
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	44 50       	subi	r20, 0x04	; 4
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	fa 01       	movw	r30, r20
 61e:	e2 0f       	add	r30, r18
 620:	f3 1f       	adc	r31, r19
 622:	60 83       	st	Z, r22
	display_array[blockLocation.row][blockLocation.column + 1] = 1;
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	fc 01       	movw	r30, r24
 62a:	e2 0f       	add	r30, r18
 62c:	f3 1f       	adc	r31, r19
 62e:	60 83       	st	Z, r22
	display_array[blockLocation.row - 1][blockLocation.column + 1] = 1;
 630:	fa 01       	movw	r30, r20
 632:	e2 0f       	add	r30, r18
 634:	f3 1f       	adc	r31, r19
 636:	60 83       	st	Z, r22
	blockLocation.isAnimating = 0;
 638:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <blockLocation+0x5>
 63c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <blockLocation+0x4>
	
	checkForFullRows();
 640:	58 df       	rcall	.-336    	; 0x4f2 <checkForFullRows>
}
 642:	28 96       	adiw	r28, 0x08	; 8
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <startGame>:
		}
		displayBuffer[row] = tempRow; 
	}
}
void startGame(){
	blockLocation.isAnimating = 1;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <blockLocation+0x5>
 660:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <blockLocation+0x4>
	if ((display_array[0][i] != 1) && (display_array[0][i+1] != 1)) { 
 664:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <i>
 668:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <i+0x1>
 66c:	fc 01       	movw	r30, r24
 66e:	ec 5f       	subi	r30, 0xFC	; 252
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	20 81       	ld	r18, Z
 674:	21 30       	cpi	r18, 0x01	; 1
 676:	71 f0       	breq	.+28     	; 0x694 <startGame+0x3c>
 678:	fc 01       	movw	r30, r24
 67a:	ec 5f       	subi	r30, 0xFC	; 252
 67c:	fe 4f       	sbci	r31, 0xFE	; 254
 67e:	21 81       	ldd	r18, Z+1	; 0x01
 680:	21 30       	cpi	r18, 0x01	; 1
 682:	41 f0       	breq	.+16     	; 0x694 <startGame+0x3c>
		blockLocation.row = 0;
 684:	ea e5       	ldi	r30, 0x5A	; 90
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	11 82       	std	Z+1, r1	; 0x01
 68a:	10 82       	st	Z, r1
		blockLocation.column = i;
 68c:	93 83       	std	Z+3, r25	; 0x03
 68e:	82 83       	std	Z+2, r24	; 0x02
		animateGame();
 690:	71 df       	rcall	.-286    	; 0x574 <animateGame>
 692:	03 c0       	rjmp	.+6      	; 0x69a <startGame+0x42>
	}else {
		//Game over
		showDigit(9999);
 694:	8f e0       	ldi	r24, 0x0F	; 15
 696:	97 e2       	ldi	r25, 0x27	; 39
	}
	i = rand() % 7;
 698:	98 d0       	rcall	.+304    	; 0x7ca <showDigit>
 69a:	34 d1       	rcall	.+616    	; 0x904 <rand>
 69c:	67 e0       	ldi	r22, 0x07	; 7
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	c3 d0       	rcall	.+390    	; 0x828 <__divmodhi4>
 6a2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <i+0x1>
 6a6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <i>
 6aa:	08 95       	ret

000006ac <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{	
	DDRD = 0x0C;
 6ac:	8c e0       	ldi	r24, 0x0C	; 12
 6ae:	81 bb       	out	0x11, r24	; 17
	
	EICRA |= 0xF0;
 6b0:	ea e6       	ldi	r30, 0x6A	; 106
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	80 6f       	ori	r24, 0xF0	; 240
 6b8:	80 83       	st	Z, r24
	EIMSK |= 0x0C;
 6ba:	89 b7       	in	r24, 0x39	; 57
 6bc:	8c 60       	ori	r24, 0x0C	; 12
 6be:	89 bf       	out	0x39, r24	; 57
	
	sei();
 6c0:	78 94       	sei
	
	srand(2344);
 6c2:	88 e2       	ldi	r24, 0x28	; 40
 6c4:	99 e0       	ldi	r25, 0x09	; 9
 6c6:	21 d1       	rcall	.+578    	; 0x90a <srand>
	displayInit();
 6c8:	5d dd       	rcall	.-1350   	; 0x184 <displayInit>
	sevenSegInit();
 6ca:	a9 d0       	rcall	.+338    	; 0x81e <sevenSegInit>
 6cc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
	showDigit(score);
 6d0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
 6d4:	7a d0       	rcall	.+244    	; 0x7ca <showDigit>
	wait(500);
 6d6:	84 ef       	ldi	r24, 0xF4	; 244
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	58 dd       	rcall	.-1360   	; 0x18c <wait>
 6dc:	ca e5       	ldi	r28, 0x5A	; 90
	
	//displayChar('1', 0, 0);
	//display();
	while(1==1) {
		if (blockLocation.isAnimating == 0) {
 6de:	d1 e0       	ldi	r29, 0x01	; 1
 6e0:	8c 81       	ldd	r24, Y+4	; 0x04
 6e2:	9d 81       	ldd	r25, Y+5	; 0x05
 6e4:	00 97       	sbiw	r24, 0x00	; 0
			startGame();
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <main+0x38>
 6e8:	b7 df       	rcall	.-146    	; 0x658 <startGame>
			wait(500);
 6ea:	84 ef       	ldi	r24, 0xF4	; 244
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	4e dd       	rcall	.-1380   	; 0x18c <wait>
 6f0:	f7 cf       	rjmp	.-18     	; 0x6e0 <main+0x34>

000006f2 <wait_us>:
 6f2:	18 16       	cp	r1, r24
 6f4:	19 06       	cpc	r1, r25
 6f6:	5c f4       	brge	.+22     	; 0x70e <wait_us+0x1c>
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6fc:	42 e0       	ldi	r20, 0x02	; 2
 6fe:	4a 95       	dec	r20
 700:	f1 f7       	brne	.-4      	; 0x6fe <wait_us+0xc>
 702:	00 c0       	rjmp	.+0      	; 0x704 <wait_us+0x12>
 704:	2f 5f       	subi	r18, 0xFF	; 255
 706:	3f 4f       	sbci	r19, 0xFF	; 255
 708:	82 17       	cp	r24, r18
 70a:	93 07       	cpc	r25, r19
 70c:	b9 f7       	brne	.-18     	; 0x6fc <wait_us+0xa>
 70e:	08 95       	ret

00000710 <sevenSegWriteByte>:
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	18 2f       	mov	r17, r24
 718:	c8 e0       	ldi	r28, 0x08	; 8
 71a:	d0 e0       	ldi	r29, 0x00	; 0
 71c:	c1 98       	cbi	0x18, 1	; 24
 71e:	82 e3       	ldi	r24, 0x32	; 50
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	e7 df       	rcall	.-50     	; 0x6f2 <wait_us>
 724:	10 ff       	sbrs	r17, 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <sevenSegWriteByte+0x1c>
 728:	c0 9a       	sbi	0x18, 0	; 24
 72a:	01 c0       	rjmp	.+2      	; 0x72e <sevenSegWriteByte+0x1e>
 72c:	c0 98       	cbi	0x18, 0	; 24
 72e:	c1 9a       	sbi	0x18, 1	; 24
 730:	82 e3       	ldi	r24, 0x32	; 50
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	de df       	rcall	.-68     	; 0x6f2 <wait_us>
 736:	16 95       	lsr	r17
 738:	21 97       	sbiw	r28, 0x01	; 1
 73a:	81 f7       	brne	.-32     	; 0x71c <sevenSegWriteByte+0xc>
 73c:	c1 98       	cbi	0x18, 1	; 24
 73e:	b8 98       	cbi	0x17, 0	; 23
 740:	c0 9a       	sbi	0x18, 0	; 24
 742:	82 e3       	ldi	r24, 0x32	; 50
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	d5 df       	rcall	.-86     	; 0x6f2 <wait_us>
 748:	86 b3       	in	r24, 0x16	; 22
 74a:	b8 9a       	sbi	0x17, 0	; 23
 74c:	c0 98       	cbi	0x18, 0	; 24
 74e:	82 e3       	ldi	r24, 0x32	; 50
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	cf df       	rcall	.-98     	; 0x6f2 <wait_us>
 754:	c1 9a       	sbi	0x18, 1	; 24
 756:	82 e3       	ldi	r24, 0x32	; 50
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	cb df       	rcall	.-106    	; 0x6f2 <wait_us>
 75c:	c1 98       	cbi	0x18, 1	; 24
 75e:	88 9a       	sbi	0x11, 0	; 17
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	08 95       	ret

00000768 <sevenSegStart>:
 768:	c0 9a       	sbi	0x18, 0	; 24
 76a:	c1 9a       	sbi	0x18, 1	; 24
 76c:	82 e3       	ldi	r24, 0x32	; 50
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	c0 df       	rcall	.-128    	; 0x6f2 <wait_us>
 772:	c0 98       	cbi	0x18, 0	; 24
 774:	08 95       	ret

00000776 <sevenSegStop>:
 776:	c1 98       	cbi	0x18, 1	; 24
 778:	82 e3       	ldi	r24, 0x32	; 50
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	ba df       	rcall	.-140    	; 0x6f2 <wait_us>
 77e:	c0 98       	cbi	0x18, 0	; 24
 780:	82 e3       	ldi	r24, 0x32	; 50
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	b6 df       	rcall	.-148    	; 0x6f2 <wait_us>
 786:	c1 9a       	sbi	0x18, 1	; 24
 788:	82 e3       	ldi	r24, 0x32	; 50
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	b2 df       	rcall	.-156    	; 0x6f2 <wait_us>
 78e:	c0 9a       	sbi	0x18, 0	; 24
 790:	08 95       	ret

00000792 <sevenSegCmd>:
 792:	cf 93       	push	r28
 794:	c8 2f       	mov	r28, r24
 796:	e8 df       	rcall	.-48     	; 0x768 <sevenSegStart>
 798:	8c 2f       	mov	r24, r28
 79a:	ba df       	rcall	.-140    	; 0x710 <sevenSegWriteByte>
 79c:	ec df       	rcall	.-40     	; 0x776 <sevenSegStop>
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <sevenSegConf>:
 7a2:	8b e8       	ldi	r24, 0x8B	; 139
 7a4:	f6 cf       	rjmp	.-20     	; 0x792 <sevenSegCmd>
 7a6:	08 95       	ret

000007a8 <sevenSegDisplaySegs>:
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	d8 2f       	mov	r29, r24
 7ae:	c6 2f       	mov	r28, r22
 7b0:	84 e4       	ldi	r24, 0x44	; 68
 7b2:	ef df       	rcall	.-34     	; 0x792 <sevenSegCmd>
 7b4:	d9 df       	rcall	.-78     	; 0x768 <sevenSegStart>
 7b6:	8d 2f       	mov	r24, r29
 7b8:	80 6c       	ori	r24, 0xC0	; 192
 7ba:	aa df       	rcall	.-172    	; 0x710 <sevenSegWriteByte>
 7bc:	8c 2f       	mov	r24, r28
 7be:	a8 df       	rcall	.-176    	; 0x710 <sevenSegWriteByte>
 7c0:	da df       	rcall	.-76     	; 0x776 <sevenSegStop>
 7c2:	ef df       	rcall	.-34     	; 0x7a2 <sevenSegConf>
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <showDigit>:
 7ca:	ff 92       	push	r15
 7cc:	0f 93       	push	r16
 7ce:	1f 93       	push	r17
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	c3 e0       	ldi	r28, 0x03	; 3
 7d6:	0a e0       	ldi	r16, 0x0A	; 10
 7d8:	10 e0       	ldi	r17, 0x00	; 0
 7da:	b8 01       	movw	r22, r16
 7dc:	25 d0       	rcall	.+74     	; 0x828 <__divmodhi4>
 7de:	f6 2e       	mov	r15, r22
 7e0:	d7 2f       	mov	r29, r23
 7e2:	fc 01       	movw	r30, r24
 7e4:	ff 27       	eor	r31, r31
 7e6:	e4 5b       	subi	r30, 0xB4	; 180
 7e8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ea:	60 81       	ld	r22, Z
 7ec:	8c 2f       	mov	r24, r28
 7ee:	dc df       	rcall	.-72     	; 0x7a8 <sevenSegDisplaySegs>
 7f0:	8f 2d       	mov	r24, r15
 7f2:	9d 2f       	mov	r25, r29
 7f4:	c1 50       	subi	r28, 0x01	; 1
 7f6:	88 f7       	brcc	.-30     	; 0x7da <showDigit+0x10>
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	08 95       	ret

00000804 <sevenSegCleanup>:
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	cf df       	rcall	.-98     	; 0x7a8 <sevenSegDisplaySegs>
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	cc df       	rcall	.-104    	; 0x7a8 <sevenSegDisplaySegs>
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	c9 df       	rcall	.-110    	; 0x7a8 <sevenSegDisplaySegs>
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	c6 cf       	rjmp	.-116    	; 0x7a8 <sevenSegDisplaySegs>
 81c:	08 95       	ret

0000081e <sevenSegInit>:
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	87 bb       	out	0x17, r24	; 23
 822:	18 ba       	out	0x18, r1	; 24
 824:	ef cf       	rjmp	.-34     	; 0x804 <sevenSegCleanup>
 826:	08 95       	ret

00000828 <__divmodhi4>:
 828:	97 fb       	bst	r25, 7
 82a:	07 2e       	mov	r0, r23
 82c:	16 f4       	brtc	.+4      	; 0x832 <__divmodhi4+0xa>
 82e:	00 94       	com	r0
 830:	06 d0       	rcall	.+12     	; 0x83e <__divmodhi4_neg1>
 832:	77 fd       	sbrc	r23, 7
 834:	08 d0       	rcall	.+16     	; 0x846 <__divmodhi4_neg2>
 836:	0b d0       	rcall	.+22     	; 0x84e <__udivmodhi4>
 838:	07 fc       	sbrc	r0, 7
 83a:	05 d0       	rcall	.+10     	; 0x846 <__divmodhi4_neg2>
 83c:	3e f4       	brtc	.+14     	; 0x84c <__divmodhi4_exit>

0000083e <__divmodhi4_neg1>:
 83e:	90 95       	com	r25
 840:	81 95       	neg	r24
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	08 95       	ret

00000846 <__divmodhi4_neg2>:
 846:	70 95       	com	r23
 848:	61 95       	neg	r22
 84a:	7f 4f       	sbci	r23, 0xFF	; 255

0000084c <__divmodhi4_exit>:
 84c:	08 95       	ret

0000084e <__udivmodhi4>:
 84e:	aa 1b       	sub	r26, r26
 850:	bb 1b       	sub	r27, r27
 852:	51 e1       	ldi	r21, 0x11	; 17
 854:	07 c0       	rjmp	.+14     	; 0x864 <__udivmodhi4_ep>

00000856 <__udivmodhi4_loop>:
 856:	aa 1f       	adc	r26, r26
 858:	bb 1f       	adc	r27, r27
 85a:	a6 17       	cp	r26, r22
 85c:	b7 07       	cpc	r27, r23
 85e:	10 f0       	brcs	.+4      	; 0x864 <__udivmodhi4_ep>
 860:	a6 1b       	sub	r26, r22
 862:	b7 0b       	sbc	r27, r23

00000864 <__udivmodhi4_ep>:
 864:	88 1f       	adc	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	5a 95       	dec	r21
 86a:	a9 f7       	brne	.-22     	; 0x856 <__udivmodhi4_loop>
 86c:	80 95       	com	r24
 86e:	90 95       	com	r25
 870:	bc 01       	movw	r22, r24
 872:	cd 01       	movw	r24, r26
 874:	08 95       	ret

00000876 <do_rand>:
 876:	8f 92       	push	r8
 878:	9f 92       	push	r9
 87a:	af 92       	push	r10
 87c:	bf 92       	push	r11
 87e:	cf 92       	push	r12
 880:	df 92       	push	r13
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	ec 01       	movw	r28, r24
 88c:	68 81       	ld	r22, Y
 88e:	79 81       	ldd	r23, Y+1	; 0x01
 890:	8a 81       	ldd	r24, Y+2	; 0x02
 892:	9b 81       	ldd	r25, Y+3	; 0x03
 894:	61 15       	cp	r22, r1
 896:	71 05       	cpc	r23, r1
 898:	81 05       	cpc	r24, r1
 89a:	91 05       	cpc	r25, r1
 89c:	21 f4       	brne	.+8      	; 0x8a6 <do_rand+0x30>
 89e:	64 e2       	ldi	r22, 0x24	; 36
 8a0:	79 ed       	ldi	r23, 0xD9	; 217
 8a2:	8b e5       	ldi	r24, 0x5B	; 91
 8a4:	97 e0       	ldi	r25, 0x07	; 7
 8a6:	2d e1       	ldi	r18, 0x1D	; 29
 8a8:	33 ef       	ldi	r19, 0xF3	; 243
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	38 d0       	rcall	.+112    	; 0x920 <__divmodsi4>
 8b0:	49 01       	movw	r8, r18
 8b2:	5a 01       	movw	r10, r20
 8b4:	9b 01       	movw	r18, r22
 8b6:	ac 01       	movw	r20, r24
 8b8:	a7 ea       	ldi	r26, 0xA7	; 167
 8ba:	b1 e4       	ldi	r27, 0x41	; 65
 8bc:	4d d0       	rcall	.+154    	; 0x958 <__muluhisi3>
 8be:	6b 01       	movw	r12, r22
 8c0:	7c 01       	movw	r14, r24
 8c2:	ac ee       	ldi	r26, 0xEC	; 236
 8c4:	b4 ef       	ldi	r27, 0xF4	; 244
 8c6:	a5 01       	movw	r20, r10
 8c8:	94 01       	movw	r18, r8
 8ca:	52 d0       	rcall	.+164    	; 0x970 <__mulohisi3>
 8cc:	dc 01       	movw	r26, r24
 8ce:	cb 01       	movw	r24, r22
 8d0:	8c 0d       	add	r24, r12
 8d2:	9d 1d       	adc	r25, r13
 8d4:	ae 1d       	adc	r26, r14
 8d6:	bf 1d       	adc	r27, r15
 8d8:	b7 ff       	sbrs	r27, 7
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <do_rand+0x6c>
 8dc:	01 97       	sbiw	r24, 0x01	; 1
 8de:	a1 09       	sbc	r26, r1
 8e0:	b0 48       	sbci	r27, 0x80	; 128
 8e2:	88 83       	st	Y, r24
 8e4:	99 83       	std	Y+1, r25	; 0x01
 8e6:	aa 83       	std	Y+2, r26	; 0x02
 8e8:	bb 83       	std	Y+3, r27	; 0x03
 8ea:	9f 77       	andi	r25, 0x7F	; 127
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	ff 90       	pop	r15
 8f2:	ef 90       	pop	r14
 8f4:	df 90       	pop	r13
 8f6:	cf 90       	pop	r12
 8f8:	bf 90       	pop	r11
 8fa:	af 90       	pop	r10
 8fc:	9f 90       	pop	r9
 8fe:	8f 90       	pop	r8
 900:	08 95       	ret

00000902 <rand_r>:
 902:	b9 cf       	rjmp	.-142    	; 0x876 <do_rand>

00000904 <rand>:
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	91 e0       	ldi	r25, 0x01	; 1
 908:	b6 cf       	rjmp	.-148    	; 0x876 <do_rand>

0000090a <srand>:
 90a:	a0 e0       	ldi	r26, 0x00	; 0
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 912:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 916:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 91a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 91e:	08 95       	ret

00000920 <__divmodsi4>:
 920:	05 2e       	mov	r0, r21
 922:	97 fb       	bst	r25, 7
 924:	16 f4       	brtc	.+4      	; 0x92a <__divmodsi4+0xa>
 926:	00 94       	com	r0
 928:	0f d0       	rcall	.+30     	; 0x948 <__negsi2>
 92a:	57 fd       	sbrc	r21, 7
 92c:	05 d0       	rcall	.+10     	; 0x938 <__divmodsi4_neg2>
 92e:	24 d0       	rcall	.+72     	; 0x978 <__udivmodsi4>
 930:	07 fc       	sbrc	r0, 7
 932:	02 d0       	rcall	.+4      	; 0x938 <__divmodsi4_neg2>
 934:	46 f4       	brtc	.+16     	; 0x946 <__divmodsi4_exit>
 936:	08 c0       	rjmp	.+16     	; 0x948 <__negsi2>

00000938 <__divmodsi4_neg2>:
 938:	50 95       	com	r21
 93a:	40 95       	com	r20
 93c:	30 95       	com	r19
 93e:	21 95       	neg	r18
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	4f 4f       	sbci	r20, 0xFF	; 255
 944:	5f 4f       	sbci	r21, 0xFF	; 255

00000946 <__divmodsi4_exit>:
 946:	08 95       	ret

00000948 <__negsi2>:
 948:	90 95       	com	r25
 94a:	80 95       	com	r24
 94c:	70 95       	com	r23
 94e:	61 95       	neg	r22
 950:	7f 4f       	sbci	r23, 0xFF	; 255
 952:	8f 4f       	sbci	r24, 0xFF	; 255
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <__muluhisi3>:
 958:	31 d0       	rcall	.+98     	; 0x9bc <__umulhisi3>
 95a:	a5 9f       	mul	r26, r21
 95c:	90 0d       	add	r25, r0
 95e:	b4 9f       	mul	r27, r20
 960:	90 0d       	add	r25, r0
 962:	a4 9f       	mul	r26, r20
 964:	80 0d       	add	r24, r0
 966:	91 1d       	adc	r25, r1
 968:	11 24       	eor	r1, r1
 96a:	08 95       	ret

0000096c <__mulshisi3>:
 96c:	b7 ff       	sbrs	r27, 7
 96e:	f4 cf       	rjmp	.-24     	; 0x958 <__muluhisi3>

00000970 <__mulohisi3>:
 970:	f3 df       	rcall	.-26     	; 0x958 <__muluhisi3>
 972:	82 1b       	sub	r24, r18
 974:	93 0b       	sbc	r25, r19
 976:	08 95       	ret

00000978 <__udivmodsi4>:
 978:	a1 e2       	ldi	r26, 0x21	; 33
 97a:	1a 2e       	mov	r1, r26
 97c:	aa 1b       	sub	r26, r26
 97e:	bb 1b       	sub	r27, r27
 980:	fd 01       	movw	r30, r26
 982:	0d c0       	rjmp	.+26     	; 0x99e <__udivmodsi4_ep>

00000984 <__udivmodsi4_loop>:
 984:	aa 1f       	adc	r26, r26
 986:	bb 1f       	adc	r27, r27
 988:	ee 1f       	adc	r30, r30
 98a:	ff 1f       	adc	r31, r31
 98c:	a2 17       	cp	r26, r18
 98e:	b3 07       	cpc	r27, r19
 990:	e4 07       	cpc	r30, r20
 992:	f5 07       	cpc	r31, r21
 994:	20 f0       	brcs	.+8      	; 0x99e <__udivmodsi4_ep>
 996:	a2 1b       	sub	r26, r18
 998:	b3 0b       	sbc	r27, r19
 99a:	e4 0b       	sbc	r30, r20
 99c:	f5 0b       	sbc	r31, r21

0000099e <__udivmodsi4_ep>:
 99e:	66 1f       	adc	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	1a 94       	dec	r1
 9a8:	69 f7       	brne	.-38     	; 0x984 <__udivmodsi4_loop>
 9aa:	60 95       	com	r22
 9ac:	70 95       	com	r23
 9ae:	80 95       	com	r24
 9b0:	90 95       	com	r25
 9b2:	9b 01       	movw	r18, r22
 9b4:	ac 01       	movw	r20, r24
 9b6:	bd 01       	movw	r22, r26
 9b8:	cf 01       	movw	r24, r30
 9ba:	08 95       	ret

000009bc <__umulhisi3>:
 9bc:	a2 9f       	mul	r26, r18
 9be:	b0 01       	movw	r22, r0
 9c0:	b3 9f       	mul	r27, r19
 9c2:	c0 01       	movw	r24, r0
 9c4:	a3 9f       	mul	r26, r19
 9c6:	70 0d       	add	r23, r0
 9c8:	81 1d       	adc	r24, r1
 9ca:	11 24       	eor	r1, r1
 9cc:	91 1d       	adc	r25, r1
 9ce:	b2 9f       	mul	r27, r18
 9d0:	70 0d       	add	r23, r0
 9d2:	81 1d       	adc	r24, r1
 9d4:	11 24       	eor	r1, r1
 9d6:	91 1d       	adc	r25, r1
 9d8:	08 95       	ret

000009da <_exit>:
 9da:	f8 94       	cli

000009dc <__stop_program>:
 9dc:	ff cf       	rjmp	.-2      	; 0x9dc <__stop_program>
