
Dotmatrix_Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000bc2  00000c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080015e  0080015e  00000cb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b9  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca4  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001283  00000000  00000000  000032bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00004540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a6a6  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3e  00000000  00000000  0000efda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000fd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000304d  00000000  00000000  0000fe70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	de c1       	rjmp	.+956    	; 0x3ca <__vector_3>
   e:	00 00       	nop
  10:	2f c2       	rjmp	.+1118   	; 0x470 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 35       	cpi	r26, 0x5E	; 94
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e5       	ldi	r26, 0x5E	; 94
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 36       	cpi	r26, 0x6C	; 108
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	db d3       	rcall	.+1974   	; 0x87a <main>
  c4:	7c c5       	rjmp	.+2808   	; 0xbbe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
  fa:	08 95       	ret

000000fc <drawArray>:
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	e6 df       	rcall	.-52     	; 0xd4 <twi_start>
 108:	80 ee       	ldi	r24, 0xE0	; 224
 10a:	ed df       	rcall	.-38     	; 0xe6 <twi_tx>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	eb df       	rcall	.-42     	; 0xe6 <twi_tx>
 110:	e8 01       	movw	r28, r16
 112:	08 5f       	subi	r16, 0xF8	; 248
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	89 91       	ld	r24, Y+
 118:	80 fb       	bst	r24, 0
 11a:	87 95       	ror	r24
 11c:	87 f9       	bld	r24, 7
 11e:	e3 df       	rcall	.-58     	; 0xe6 <twi_tx>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e1 df       	rcall	.-62     	; 0xe6 <twi_tx>
 124:	c0 17       	cp	r28, r16
 126:	d1 07       	cpc	r29, r17
 128:	b1 f7       	brne	.-20     	; 0x116 <drawArray+0x1a>
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <displayInitHT16K33>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	08 2f       	mov	r16, r24
 144:	c7 df       	rcall	.-114    	; 0xd4 <twi_start>
 146:	80 2f       	mov	r24, r16
 148:	ce df       	rcall	.-100    	; 0xe6 <twi_tx>
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	cc df       	rcall	.-104    	; 0xe6 <twi_tx>
 14e:	c4 e7       	ldi	r28, 0x74	; 116
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	14 e9       	ldi	r17, 0x94	; 148
 154:	18 83       	st	Y, r17
 156:	be df       	rcall	.-132    	; 0xd4 <twi_start>
 158:	80 2f       	mov	r24, r16
 15a:	c5 df       	rcall	.-118    	; 0xe6 <twi_tx>
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	c3 df       	rcall	.-122    	; 0xe6 <twi_tx>
 160:	18 83       	st	Y, r17
 162:	b8 df       	rcall	.-144    	; 0xd4 <twi_start>
 164:	80 2f       	mov	r24, r16
 166:	bf df       	rcall	.-130    	; 0xe6 <twi_tx>
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	bd df       	rcall	.-134    	; 0xe6 <twi_tx>
 16c:	18 83       	st	Y, r17
 16e:	b2 df       	rcall	.-156    	; 0xd4 <twi_start>
 170:	80 2f       	mov	r24, r16
 172:	b9 df       	rcall	.-142    	; 0xe6 <twi_tx>
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	b7 df       	rcall	.-146    	; 0xe6 <twi_tx>
 178:	18 83       	st	Y, r17
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <displayInit>:
 184:	a1 df       	rcall	.-190    	; 0xc8 <twi_init>
 186:	80 ee       	ldi	r24, 0xE0	; 224
 188:	d8 cf       	rjmp	.-80     	; 0x13a <displayInitHT16K33>
 18a:	08 95       	ret

0000018c <wait>:
 18c:	18 16       	cp	r1, r24
 18e:	19 06       	cpc	r1, r25
 190:	6c f4       	brge	.+26     	; 0x1ac <wait+0x20>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	e9 ef       	ldi	r30, 0xF9	; 249
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <wait+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <wait+0x14>
 1a0:	00 00       	nop
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	a9 f7       	brne	.-22     	; 0x196 <wait+0xa>
 1ac:	08 95       	ret

000001ae <theCoolFullRowAnimation>:
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	98 2e       	mov	r9, r24
 1c8:	99 0c       	add	r9, r9
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	88 2e       	mov	r8, r24
 1ce:	88 0c       	add	r8, r8
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	68 94       	set
 1d8:	aa 24       	eor	r10, r10
 1da:	a7 f8       	bld	r10, 7
 1dc:	b1 2c       	mov	r11, r1
 1de:	0f 2e       	mov	r0, r31
 1e0:	f4 e7       	ldi	r31, 0x74	; 116
 1e2:	cf 2e       	mov	r12, r31
 1e4:	d1 2c       	mov	r13, r1
 1e6:	f0 2d       	mov	r31, r0
 1e8:	d4 e9       	ldi	r29, 0x94	; 148
 1ea:	74 df       	rcall	.-280    	; 0xd4 <twi_start>
 1ec:	80 ee       	ldi	r24, 0xE0	; 224
 1ee:	7b df       	rcall	.-266    	; 0xe6 <twi_tx>
 1f0:	89 2d       	mov	r24, r9
 1f2:	79 df       	rcall	.-270    	; 0xe6 <twi_tx>
 1f4:	8c 2f       	mov	r24, r28
 1f6:	80 95       	com	r24
 1f8:	80 fb       	bst	r24, 0
 1fa:	87 95       	ror	r24
 1fc:	87 f9       	bld	r24, 7
 1fe:	73 df       	rcall	.-282    	; 0xe6 <twi_tx>
 200:	75 01       	movw	r14, r10
 202:	00 2e       	mov	r0, r16
 204:	02 c0       	rjmp	.+4      	; 0x20a <theCoolFullRowAnimation+0x5c>
 206:	f5 94       	asr	r15
 208:	e7 94       	ror	r14
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <theCoolFullRowAnimation+0x58>
 20e:	ce 29       	or	r28, r14
 210:	f6 01       	movw	r30, r12
 212:	d0 83       	st	Z, r29
 214:	5f df       	rcall	.-322    	; 0xd4 <twi_start>
 216:	80 ee       	ldi	r24, 0xE0	; 224
 218:	66 df       	rcall	.-308    	; 0xe6 <twi_tx>
 21a:	88 2d       	mov	r24, r8
 21c:	64 df       	rcall	.-312    	; 0xe6 <twi_tx>
 21e:	8c 2f       	mov	r24, r28
 220:	80 95       	com	r24
 222:	80 fb       	bst	r24, 0
 224:	87 95       	ror	r24
 226:	87 f9       	bld	r24, 7
 228:	5e df       	rcall	.-324    	; 0xe6 <twi_tx>
 22a:	ce 29       	or	r28, r14
 22c:	f6 01       	movw	r30, r12
 22e:	d0 83       	st	Z, r29
 230:	8d e4       	ldi	r24, 0x4D	; 77
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	ab df       	rcall	.-170    	; 0x18c <wait>
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	09 30       	cpi	r16, 0x09	; 9
 23c:	11 05       	cpc	r17, r1
 23e:	a9 f6       	brne	.-86     	; 0x1ea <theCoolFullRowAnimation+0x3c>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	08 95       	ret

0000025a <setupDisplayArray>:
 25a:	4f 92       	push	r4
}blockLocation;
int score = 0;
int shouldReset = 0;

/******************************************************************/
void setupDisplayArray(unsigned char* displayBuffer){
 25c:	5f 92       	push	r5
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	0f 2e       	mov	r0, r31
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	ef 2e       	mov	r14, r31
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	ff 2e       	mov	r15, r31
 282:	f0 2d       	mov	r31, r0
 284:	2c 01       	movw	r4, r24
	notes:			Makes an temp array to display on the dotmatrix
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/	
	int row;
	for(row = 0; row < 8; row++) {
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
			if(!blockLocation.oneWidth){
 28a:	0f 2e       	mov	r0, r31
 28c:	f4 e6       	ldi	r31, 0x64	; 100
 28e:	cf 2e       	mov	r12, r31
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	df 2e       	mov	r13, r31
 294:	f0 2d       	mov	r31, r0
			}else{
				//Check if we are at the point where the block is
				if (row == blockLocation.row || row == blockLocation.row - 1) {
					if(col == blockLocation.column) {
						//Draw the block in bites
						tempRow = tempRow | (128 >> col);
 296:	68 94       	set
 298:	66 24       	eor	r6, r6
 29a:	67 f8       	bld	r6, 7
 29c:	71 2c       	mov	r7, r1
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/	
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
 29e:	f7 01       	movw	r30, r14
 2a0:	97 80       	ldd	r9, Z+7	; 0x07
		for(col = 0; col < 8; col++) {
			if(!blockLocation.oneWidth){
 2a2:	f6 01       	movw	r30, r12
 2a4:	a6 81       	ldd	r26, Z+6	; 0x06
 2a6:	b7 81       	ldd	r27, Z+7	; 0x07
				//Check if we are at the point where the block is
				if (row == blockLocation.row || row == blockLocation.row - 1) {
 2a8:	60 81       	ld	r22, Z
 2aa:	71 81       	ldd	r23, Z+1	; 0x01
 2ac:	eb 01       	movw	r28, r22
 2ae:	21 97       	sbiw	r28, 0x01	; 1
					if(col == blockLocation.column || col == blockLocation.column + 1) {
 2b0:	02 81       	ldd	r16, Z+2	; 0x02
 2b2:	13 81       	ldd	r17, Z+3	; 0x03
 2b4:	58 01       	movw	r10, r16
 2b6:	ff ef       	ldi	r31, 0xFF	; 255
 2b8:	af 1a       	sub	r10, r31
 2ba:	bf 0a       	sbc	r11, r31
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	e8 0e       	add	r14, r24
 2c0:	f1 1c       	adc	r15, r1
 2c2:	f7 01       	movw	r30, r14
	*******************************************************************/	
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
			if(!blockLocation.oneWidth){
 2c8:	10 97       	sbiw	r26, 0x00	; 0
 2ca:	a9 f4       	brne	.+42     	; 0x2f6 <setupDisplayArray+0x9c>
				//Check if we are at the point where the block is
				if (row == blockLocation.row || row == blockLocation.row - 1) {
 2cc:	64 17       	cp	r22, r20
 2ce:	75 07       	cpc	r23, r21
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <setupDisplayArray+0x7e>
 2d2:	c4 17       	cp	r28, r20
 2d4:	d5 07       	cpc	r29, r21
 2d6:	01 f5       	brne	.+64     	; 0x318 <setupDisplayArray+0xbe>
					if(col == blockLocation.column || col == blockLocation.column + 1) {
 2d8:	02 17       	cp	r16, r18
 2da:	13 07       	cpc	r17, r19
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <setupDisplayArray+0x8a>
 2de:	a2 16       	cp	r10, r18
 2e0:	b3 06       	cpc	r11, r19
 2e2:	d1 f4       	brne	.+52     	; 0x318 <setupDisplayArray+0xbe>
						//Draw the block in bites
						tempRow = tempRow | (128 >> col);
 2e4:	c3 01       	movw	r24, r6
 2e6:	02 2e       	mov	r0, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <setupDisplayArray+0x94>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <setupDisplayArray+0x90>
 2f2:	98 2a       	or	r9, r24
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <setupDisplayArray+0xbe>
					}
				}	
			}else{
				//Check if we are at the point where the block is
				if (row == blockLocation.row || row == blockLocation.row - 1) {
 2f6:	64 17       	cp	r22, r20
 2f8:	75 07       	cpc	r23, r21
 2fa:	19 f0       	breq	.+6      	; 0x302 <setupDisplayArray+0xa8>
 2fc:	c4 17       	cp	r28, r20
 2fe:	d5 07       	cpc	r29, r21
 300:	59 f4       	brne	.+22     	; 0x318 <setupDisplayArray+0xbe>
					if(col == blockLocation.column) {
 302:	02 17       	cp	r16, r18
 304:	13 07       	cpc	r17, r19
 306:	41 f4       	brne	.+16     	; 0x318 <setupDisplayArray+0xbe>
						//Draw the block in bites
						tempRow = tempRow | (128 >> col);
 308:	c3 01       	movw	r24, r6
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <setupDisplayArray+0xb8>
 30e:	95 95       	asr	r25
 310:	87 95       	ror	r24
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <setupDisplayArray+0xb4>
 316:	98 2a       	or	r9, r24
					}
				}
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
 318:	82 91       	ld	r24, -Z
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <setupDisplayArray+0xca>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <setupDisplayArray+0xc6>
 328:	98 2a       	or	r9, r24
	*******************************************************************/	
	int row;
	for(row = 0; row < 8; row++) {
		int col;
		unsigned char tempRow = 0b00000000 | display_array[row][7];
		for(col = 0; col < 8; col++) {
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	28 30       	cpi	r18, 0x08	; 8
 330:	31 05       	cpc	r19, r1
 332:	51 f6       	brne	.-108    	; 0x2c8 <setupDisplayArray+0x6e>
				}
			}
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		//Write part of display bites to displaybuffer
		displayBuffer[row] = tempRow; 
 334:	f2 01       	movw	r30, r4
 336:	91 92       	st	Z+, r9
 338:	2f 01       	movw	r4, r30
	notes:			Makes an temp array to display on the dotmatrix
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/	
	int row;
	for(row = 0; row < 8; row++) {
 33a:	4f 5f       	subi	r20, 0xFF	; 255
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	48 30       	cpi	r20, 0x08	; 8
 340:	51 05       	cpc	r21, r1
 342:	09 f0       	breq	.+2      	; 0x346 <setupDisplayArray+0xec>
 344:	ac cf       	rjmp	.-168    	; 0x29e <setupDisplayArray+0x44>
			tempRow = tempRow | ((display_array[row][7 - col]) << col);
		}
		//Write part of display bites to displaybuffer
		displayBuffer[row] = tempRow; 
	}
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	9f 90       	pop	r9
 35c:	7f 90       	pop	r7
 35e:	6f 90       	pop	r6
 360:	5f 90       	pop	r5
 362:	4f 90       	pop	r4
 364:	08 95       	ret

00000366 <resetGame>:
	}
	i = rand() % 7;
}

/******************************************************************/
void resetGame(){
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	60 97       	sbiw	r28, 0x10	; 16
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/	

	//Reset score
	showDigit(0);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	17 d3       	rcall	.+1582   	; 0x9ae <showDigit>
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	64 e4       	ldi	r22, 0x44	; 68
 386:	71 e0       	ldi	r23, 0x01	; 1
	int row;
	//Reset display array so it is empty again
	for (row = 0;row < 8;row++) {
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
 388:	30 e1       	ldi	r19, 0x10	; 16
 38a:	ae 01       	movw	r20, r28
 38c:	4f 5f       	subi	r20, 0xFF	; 255
 38e:	5f 4f       	sbci	r21, 0xFF	; 255
 390:	fa 01       	movw	r30, r20
 392:	23 2f       	mov	r18, r19
 394:	11 92       	st	Z+, r1
 396:	2a 95       	dec	r18
 398:	e9 f7       	brne	.-6      	; 0x394 <resetGame+0x2e>
 39a:	28 e0       	ldi	r18, 0x08	; 8
 39c:	fa 01       	movw	r30, r20
 39e:	dc 01       	movw	r26, r24
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	2a 95       	dec	r18
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <resetGame+0x3a>
 3a8:	08 96       	adiw	r24, 0x08	; 8

	//Reset score
	showDigit(0);
	int row;
	//Reset display array so it is empty again
	for (row = 0;row < 8;row++) {
 3aa:	86 17       	cp	r24, r22
 3ac:	97 07       	cpc	r25, r23
 3ae:	81 f7       	brne	.-32     	; 0x390 <resetGame+0x2a>
			memcpy(display_array[row], (int[]){0,0,0,0,0,0,0,0}, 8);
	}
	//Reseting is over
	shouldReset = 0;
 3b0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <__data_end+0x1>
 3b4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
}
 3b8:	60 96       	adiw	r28, 0x10	; 16
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <__vector_3>:
	checkForFullRows();
}


/******************************************************************/
ISR(INT2_vect) {
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	0b b6       	in	r0, 0x3b	; 59
 3d6:	0f 92       	push	r0
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	
	//Check if both buttons are pressed
	if((PIND & 0x0C) == 0x0C){
 3e6:	80 b3       	in	r24, 0x10	; 16
 3e8:	8c 70       	andi	r24, 0x0C	; 12
 3ea:	8c 30       	cpi	r24, 0x0C	; 12
 3ec:	39 f4       	brne	.+14     	; 0x3fc <__vector_3+0x32>
		shouldReset = 1;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
 3f6:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
		return;
 3fa:	2c c0       	rjmp	.+88     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	//Check if block hasn't reached a wall
	if(blockLocation.column > 0){
 3fc:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <blockLocation+0x2>
 400:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <blockLocation+0x3>
 404:	18 16       	cp	r1, r24
 406:	19 06       	cpc	r1, r25
 408:	2c f5       	brge	.+74     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		//Check for collision on the side
		if(display_array[blockLocation.row][blockLocation.column-1] == 0 &&
 40a:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <blockLocation>
 40e:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <blockLocation+0x1>
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f9 01       	movw	r30, r18
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	ee 0f       	add	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	ec 5f       	subi	r30, 0xFC	; 252
 424:	fe 4f       	sbci	r31, 0xFE	; 254
 426:	e8 0f       	add	r30, r24
 428:	f9 1f       	adc	r31, r25
 42a:	40 81       	ld	r20, Z
 42c:	41 11       	cpse	r20, r1
 42e:	12 c0       	rjmp	.+36     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		   display_array[blockLocation.row - 1][blockLocation.column-1] == 0) {
 430:	f9 01       	movw	r30, r18
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	e4 50       	subi	r30, 0x04	; 4
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	e8 0f       	add	r30, r24
 444:	f9 1f       	adc	r31, r25
		return;
	}
	//Check if block hasn't reached a wall
	if(blockLocation.column > 0){
		//Check for collision on the side
		if(display_array[blockLocation.row][blockLocation.column-1] == 0 &&
 446:	20 81       	ld	r18, Z
 448:	21 11       	cpse	r18, r1
 44a:	04 c0       	rjmp	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		   display_array[blockLocation.row - 1][blockLocation.column-1] == 0) {
				blockLocation.column--;
 44c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <blockLocation+0x3>
 450:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <blockLocation+0x2>
		}
	}
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	4f 91       	pop	r20
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0b be       	out	0x3b, r0	; 59
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_4>:

/******************************************************************/
ISR(INT3_vect) {
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	0b b6       	in	r0, 0x3b	; 59
 47c:	0f 92       	push	r0
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
	notes:			Moves block to the right if no collision occurred
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/
	//Check if block hasn't reached a wall
	if((PIND & 0x0C) == 0x0C){
 490:	80 b3       	in	r24, 0x10	; 16
 492:	8c 70       	andi	r24, 0x0C	; 12
 494:	8c 30       	cpi	r24, 0x0C	; 12
 496:	39 f4       	brne	.+14     	; 0x4a6 <__vector_4+0x36>
		shouldReset = 1;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
 4a0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
		return;
 4a4:	63 c0       	rjmp	.+198    	; 0x56c <__vector_4+0xfc>
	}
	
	//Check for collision on the side
	if(!blockLocation.oneWidth){
 4a6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <blockLocation+0x6>
 4aa:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <blockLocation+0x7>
 4ae:	89 2b       	or	r24, r25
 4b0:	89 f5       	brne	.+98     	; 0x514 <__vector_4+0xa4>
		if(blockLocation.column < 6){
 4b2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <blockLocation+0x2>
 4b6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <blockLocation+0x3>
 4ba:	86 30       	cpi	r24, 0x06	; 6
 4bc:	91 05       	cpc	r25, r1
 4be:	0c f0       	brlt	.+2      	; 0x4c2 <__vector_4+0x52>
 4c0:	55 c0       	rjmp	.+170    	; 0x56c <__vector_4+0xfc>
			if(display_array[blockLocation.row][blockLocation.column+2] == 0 &&
 4c2:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <blockLocation>
 4c6:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <blockLocation+0x1>
 4ca:	ac 01       	movw	r20, r24
 4cc:	4e 5f       	subi	r20, 0xFE	; 254
 4ce:	5f 4f       	sbci	r21, 0xFF	; 255
 4d0:	f9 01       	movw	r30, r18
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	ec 5f       	subi	r30, 0xFC	; 252
 4e0:	fe 4f       	sbci	r31, 0xFE	; 254
 4e2:	e4 0f       	add	r30, r20
 4e4:	f5 1f       	adc	r31, r21
 4e6:	60 81       	ld	r22, Z
 4e8:	61 11       	cpse	r22, r1
 4ea:	40 c0       	rjmp	.+128    	; 0x56c <__vector_4+0xfc>
			display_array[blockLocation.row - 1][blockLocation.column+2] == 0) {
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	22 0f       	add	r18, r18
 4f6:	33 1f       	adc	r19, r19
 4f8:	24 50       	subi	r18, 0x04	; 4
 4fa:	3f 4f       	sbci	r19, 0xFF	; 255
 4fc:	f9 01       	movw	r30, r18
 4fe:	e4 0f       	add	r30, r20
 500:	f5 1f       	adc	r31, r21
	}
	
	//Check for collision on the side
	if(!blockLocation.oneWidth){
		if(blockLocation.column < 6){
			if(display_array[blockLocation.row][blockLocation.column+2] == 0 &&
 502:	20 81       	ld	r18, Z
 504:	21 11       	cpse	r18, r1
 506:	32 c0       	rjmp	.+100    	; 0x56c <__vector_4+0xfc>
			display_array[blockLocation.row - 1][blockLocation.column+2] == 0) {
				blockLocation.column++;
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <blockLocation+0x3>
 50e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <blockLocation+0x2>
 512:	2c c0       	rjmp	.+88     	; 0x56c <__vector_4+0xfc>
			}
		}
	}else{
		if(blockLocation.column < 7){
 514:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <blockLocation+0x2>
 518:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <blockLocation+0x3>
 51c:	87 30       	cpi	r24, 0x07	; 7
 51e:	91 05       	cpc	r25, r1
 520:	2c f5       	brge	.+74     	; 0x56c <__vector_4+0xfc>
			if(display_array[blockLocation.row][blockLocation.column+1] == 0 &&
 522:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <blockLocation>
 526:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <blockLocation+0x1>
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	f9 01       	movw	r30, r18
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	ec 5f       	subi	r30, 0xFC	; 252
 53c:	fe 4f       	sbci	r31, 0xFE	; 254
 53e:	e8 0f       	add	r30, r24
 540:	f9 1f       	adc	r31, r25
 542:	40 81       	ld	r20, Z
 544:	41 11       	cpse	r20, r1
 546:	12 c0       	rjmp	.+36     	; 0x56c <__vector_4+0xfc>
   			   display_array[blockLocation.row - 1][blockLocation.column+1] == 0) {
 548:	f9 01       	movw	r30, r18
 54a:	ee 0f       	add	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	e4 50       	subi	r30, 0x04	; 4
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	e8 0f       	add	r30, r24
 55c:	f9 1f       	adc	r31, r25
				blockLocation.column++;
			}
		}
	}else{
		if(blockLocation.column < 7){
			if(display_array[blockLocation.row][blockLocation.column+1] == 0 &&
 55e:	20 81       	ld	r18, Z
 560:	21 11       	cpse	r18, r1
 562:	04 c0       	rjmp	.+8      	; 0x56c <__vector_4+0xfc>
   			   display_array[blockLocation.row - 1][blockLocation.column+1] == 0) {
					blockLocation.column++;
 564:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <blockLocation+0x3>
 568:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <blockLocation+0x2>
			}
		}
	}
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0b be       	out	0x3b, r0	; 59
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <shoveDown>:
	score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 58c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <i+0x1>
 590:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <i>
 594:	9c 01       	movw	r18, r24
 596:	22 50       	subi	r18, 0x02	; 2
 598:	31 09       	sbc	r19, r1
 59a:	fa f0       	brmi	.+62     	; 0x5da <shoveDown+0x4e>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	8c 5f       	subi	r24, 0xFC	; 252
 5aa:	9e 4f       	sbci	r25, 0xFE	; 254
		int rowToShove = x - 2;
		memcpy(display_array[x],display_array[rowToShove],sizeof(unsigned char) * 8);	//cpy the upper row to this row
 5ac:	ac 01       	movw	r20, r24
 5ae:	40 51       	subi	r20, 0x10	; 16
 5b0:	51 09       	sbc	r21, r1
 5b2:	68 e0       	ldi	r22, 0x08	; 8
 5b4:	fa 01       	movw	r30, r20
 5b6:	dc 01       	movw	r26, r24
 5b8:	01 90       	ld	r0, Z+
 5ba:	0d 92       	st	X+, r0
 5bc:	6a 95       	dec	r22
 5be:	e1 f7       	brne	.-8      	; 0x5b8 <shoveDown+0x2c>
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
 5c0:	dc 01       	movw	r26, r24
 5c2:	18 97       	sbiw	r26, 0x08	; 8
 5c4:	fc 01       	movw	r30, r24
 5c6:	78 97       	sbiw	r30, 0x18	; 24
 5c8:	88 e0       	ldi	r24, 0x08	; 8
 5ca:	01 90       	ld	r0, Z+
 5cc:	0d 92       	st	X+, r0
 5ce:	8a 95       	dec	r24
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <shoveDown+0x3e>
	score += tempscore;
	showDigit(score);
}

void shoveDown(int x){
	for(i = 0; i<= (x -2); x -= 2){
 5d2:	22 50       	subi	r18, 0x02	; 2
 5d4:	31 09       	sbc	r19, r1
 5d6:	ca 01       	movw	r24, r20
 5d8:	4a f7       	brpl	.-46     	; 0x5ac <shoveDown+0x20>
 5da:	08 95       	ret

000005dc <checkForFullRows>:
		}
	}
	return 1;
}

void checkForFullRows(void){
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	e4 e0       	ldi	r30, 0x04	; 4
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 1;
}

void checkForFullRows(void){
	int tempscore = 0;
 5f0:	e1 2c       	mov	r14, r1
 5f2:	f1 2c       	mov	r15, r1
 5f4:	1d c0       	rjmp	.+58     	; 0x630 <checkForFullRows+0x54>
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
 5f6:	91 91       	ld	r25, Z+
 5f8:	91 30       	cpi	r25, 0x01	; 1
 5fa:	39 f4       	brne	.+14     	; 0x60a <checkForFullRows+0x2e>
 5fc:	df 01       	movw	r26, r30
 5fe:	19 97       	sbiw	r26, 0x09	; 9
 600:	9c 91       	ld	r25, X
 602:	91 30       	cpi	r25, 0x01	; 1
 604:	11 f4       	brne	.+4      	; 0x60a <checkForFullRows+0x2e>
 606:	2f 5f       	subi	r18, 0xFF	; 255
 608:	3f 4f       	sbci	r19, 0xFF	; 255
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
		int y;
		int count = 0;
		for(y = 0; y < 8; y ++){
 60a:	ec 17       	cp	r30, r28
 60c:	fd 07       	cpc	r31, r29
 60e:	99 f7       	brne	.-26     	; 0x5f6 <checkForFullRows+0x1a>
			if(1 == display_array[x][y] && 1 == display_array[x - 1][y] ){ count++; }
		}
		if(8 == count){	//whole row filled
 610:	28 30       	cpi	r18, 0x08	; 8
 612:	31 05       	cpc	r19, r1
 614:	39 f4       	brne	.+14     	; 0x624 <checkForFullRows+0x48>
			tempscore += 10;
 616:	8a e0       	ldi	r24, 0x0A	; 10
 618:	e8 0e       	add	r14, r24
 61a:	f1 1c       	adc	r15, r1
			theCoolFullRowAnimation(x);
 61c:	c8 01       	movw	r24, r16
 61e:	c7 dd       	rcall	.-1138   	; 0x1ae <theCoolFullRowAnimation>
			shoveDown(x);
 620:	c8 01       	movw	r24, r16
 622:	b4 df       	rcall	.-152    	; 0x58c <shoveDown>
}

void checkForFullRows(void){
	int tempscore = 0;
	int x;
	for(x = 0; x < 8; x ++){
 624:	0f 5f       	subi	r16, 0xFF	; 255
 626:	1f 4f       	sbci	r17, 0xFF	; 255
 628:	fe 01       	movw	r30, r28
 62a:	08 30       	cpi	r16, 0x08	; 8
 62c:	11 05       	cpc	r17, r1
 62e:	29 f0       	breq	.+10     	; 0x63a <checkForFullRows+0x5e>
 630:	ef 01       	movw	r28, r30
 632:	28 96       	adiw	r28, 0x08	; 8
		}
	}
	return 1;
}

void checkForFullRows(void){
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	de cf       	rjmp	.-68     	; 0x5f6 <checkForFullRows+0x1a>
			tempscore += 10;
			theCoolFullRowAnimation(x);
			shoveDown(x);
		}
	}
	score += tempscore;
 63a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <score>
 63e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <score+0x1>
 642:	8e 0d       	add	r24, r14
 644:	9f 1d       	adc	r25, r15
 646:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <score+0x1>
 64a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <score>
	showDigit(score);
 64e:	af d1       	rcall	.+862    	; 0x9ae <showDigit>
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	08 95       	ret

0000065e <animateGame>:
	//Reseting is over
	shouldReset = 0;
}

/******************************************************************/
void animateGame() {
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	28 97       	sbiw	r28, 0x08	; 8
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		if(!blockLocation.oneWidth){
 676:	04 e6       	ldi	r16, 0x64	; 100
 678:	11 e0       	ldi	r17, 0x01	; 1
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/	
	unsigned char displayBuffer[8];
	while(1){
		setupDisplayArray(displayBuffer);
 67a:	ce 01       	movw	r24, r28
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	ed dd       	rcall	.-1062   	; 0x25a <setupDisplayArray>
		drawArray(displayBuffer);
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	3b dd       	rcall	.-1418   	; 0xfc <drawArray>
		wait(2000);
 686:	80 ed       	ldi	r24, 0xD0	; 208
 688:	97 e0       	ldi	r25, 0x07	; 7
 68a:	80 dd       	rcall	.-1280   	; 0x18c <wait>
		if(!blockLocation.oneWidth){
 68c:	f8 01       	movw	r30, r16
 68e:	86 81       	ldd	r24, Z+6	; 0x06
 690:	97 81       	ldd	r25, Z+7	; 0x07
 692:	89 2b       	or	r24, r25
 694:	31 f5       	brne	.+76     	; 0x6e2 <animateGame+0x84>
			//Check for collision under the block
			if (display_array[blockLocation.row+1][blockLocation.column] != 1 &&
 696:	40 81       	ld	r20, Z
 698:	51 81       	ldd	r21, Z+1	; 0x01
 69a:	ca 01       	movw	r24, r20
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	22 81       	ldd	r18, Z+2	; 0x02
 6a0:	33 81       	ldd	r19, Z+3	; 0x03
 6a2:	fc 01       	movw	r30, r24
 6a4:	ee 0f       	add	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	ee 0f       	add	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	ec 5f       	subi	r30, 0xFC	; 252
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	e2 0f       	add	r30, r18
 6b6:	f3 1f       	adc	r31, r19
 6b8:	60 81       	ld	r22, Z
 6ba:	61 30       	cpi	r22, 0x01	; 1
 6bc:	59 f1       	breq	.+86     	; 0x714 <animateGame+0xb6>
		   	    display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
 6be:	fc 01       	movw	r30, r24
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	ec 5f       	subi	r30, 0xFC	; 252
 6ce:	fe 4f       	sbci	r31, 0xFE	; 254
 6d0:	e2 0f       	add	r30, r18
 6d2:	f3 1f       	adc	r31, r19
		setupDisplayArray(displayBuffer);
		drawArray(displayBuffer);
		wait(2000);
		if(!blockLocation.oneWidth){
			//Check for collision under the block
			if (display_array[blockLocation.row+1][blockLocation.column] != 1 &&
 6d4:	61 81       	ldd	r22, Z+1	; 0x01
 6d6:	61 30       	cpi	r22, 0x01	; 1
 6d8:	e9 f0       	breq	.+58     	; 0x714 <animateGame+0xb6>
		   	    display_array[blockLocation.row+1][blockLocation.column + 1] != 1) {
					blockLocation.row++;
 6da:	f8 01       	movw	r30, r16
 6dc:	91 83       	std	Z+1, r25	; 0x01
 6de:	80 83       	st	Z, r24
 6e0:	cc cf       	rjmp	.-104    	; 0x67a <animateGame+0x1c>
			 }else {
				 break;
			 }
		}else{
			//Check for collision under the block
			if (display_array[blockLocation.row+1][blockLocation.column] != 1) {
 6e2:	f8 01       	movw	r30, r16
 6e4:	20 81       	ld	r18, Z
 6e6:	31 81       	ldd	r19, Z+1	; 0x01
 6e8:	c9 01       	movw	r24, r18
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	42 81       	ldd	r20, Z+2	; 0x02
 6ee:	53 81       	ldd	r21, Z+3	; 0x03
 6f0:	fc 01       	movw	r30, r24
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	ec 5f       	subi	r30, 0xFC	; 252
 700:	fe 4f       	sbci	r31, 0xFE	; 254
 702:	e4 0f       	add	r30, r20
 704:	f5 1f       	adc	r31, r21
 706:	60 81       	ld	r22, Z
 708:	61 30       	cpi	r22, 0x01	; 1
 70a:	69 f1       	breq	.+90     	; 0x766 <animateGame+0x108>
				blockLocation.row++;
 70c:	f8 01       	movw	r30, r16
 70e:	91 83       	std	Z+1, r25	; 0x01
 710:	80 83       	st	Z, r24
 712:	b3 cf       	rjmp	.-154    	; 0x67a <animateGame+0x1c>
			}
		}
	}
	//Block stopped falling so write to the display array for collision detection next iteration
	if(!blockLocation.oneWidth){
		display_array[blockLocation.row][blockLocation.column] = 1;
 714:	ca 01       	movw	r24, r20
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	8c 5f       	subi	r24, 0xFC	; 252
 724:	9e 4f       	sbci	r25, 0xFE	; 254
 726:	fc 01       	movw	r30, r24
 728:	e2 0f       	add	r30, r18
 72a:	f3 1f       	adc	r31, r19
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	60 83       	st	Z, r22
		display_array[blockLocation.row - 1][blockLocation.column] = 1;
 730:	44 0f       	add	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	44 0f       	add	r20, r20
 736:	55 1f       	adc	r21, r21
 738:	44 0f       	add	r20, r20
 73a:	55 1f       	adc	r21, r21
 73c:	44 50       	subi	r20, 0x04	; 4
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	fa 01       	movw	r30, r20
 742:	e2 0f       	add	r30, r18
 744:	f3 1f       	adc	r31, r19
 746:	60 83       	st	Z, r22
		display_array[blockLocation.row][blockLocation.column + 1] = 1;
 748:	2f 5f       	subi	r18, 0xFF	; 255
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	fc 01       	movw	r30, r24
 74e:	e2 0f       	add	r30, r18
 750:	f3 1f       	adc	r31, r19
 752:	60 83       	st	Z, r22
		display_array[blockLocation.row - 1][blockLocation.column + 1] = 1;
 754:	fa 01       	movw	r30, r20
 756:	e2 0f       	add	r30, r18
 758:	f3 1f       	adc	r31, r19
 75a:	60 83       	st	Z, r22
		blockLocation.isAnimating = 0;
 75c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <blockLocation+0x5>
 760:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <blockLocation+0x4>
 764:	1d c0       	rjmp	.+58     	; 0x7a0 <animateGame+0x142>
	}else{
		display_array[blockLocation.row][blockLocation.column] = 1;
 766:	f9 01       	movw	r30, r18
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	ee 0f       	add	r30, r30
 76e:	ff 1f       	adc	r31, r31
 770:	ee 0f       	add	r30, r30
 772:	ff 1f       	adc	r31, r31
 774:	ec 5f       	subi	r30, 0xFC	; 252
 776:	fe 4f       	sbci	r31, 0xFE	; 254
 778:	e4 0f       	add	r30, r20
 77a:	f5 1f       	adc	r31, r21
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 83       	st	Z, r24
		display_array[blockLocation.row - 1][blockLocation.column] = 1;	
 780:	22 0f       	add	r18, r18
 782:	33 1f       	adc	r19, r19
 784:	22 0f       	add	r18, r18
 786:	33 1f       	adc	r19, r19
 788:	22 0f       	add	r18, r18
 78a:	33 1f       	adc	r19, r19
 78c:	24 50       	subi	r18, 0x04	; 4
 78e:	3f 4f       	sbci	r19, 0xFF	; 255
 790:	f9 01       	movw	r30, r18
 792:	e4 0f       	add	r30, r20
 794:	f5 1f       	adc	r31, r21
 796:	80 83       	st	Z, r24
		blockLocation.isAnimating = 0;
 798:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <blockLocation+0x5>
 79c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <blockLocation+0x4>
	}
	
	checkForFullRows();
 7a0:	1d df       	rcall	.-454    	; 0x5dc <checkForFullRows>
}
 7a2:	28 96       	adiw	r28, 0x08	; 8
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	08 95       	ret

000007b8 <gameOver>:
		memcpy(display_array[x-1],display_array[rowToShove - 1],sizeof(unsigned char) * 8);	//cpy the upper row to this row		//thwo times this function because blocks are 2*2
	}
}


void gameOver(){
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	28 97       	sbiw	r28, 0x08	; 8
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	f8 94       	cli
 7c6:	de bf       	out	0x3e, r29	; 62
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t deadFace[8] = {0b00000000,
 7cc:	88 e0       	ldi	r24, 0x08	; 8
 7ce:	ec e4       	ldi	r30, 0x4C	; 76
 7d0:	f1 e0       	ldi	r31, 0x01	; 1
 7d2:	de 01       	movw	r26, r28
 7d4:	11 96       	adiw	r26, 0x01	; 1
 7d6:	01 90       	ld	r0, Z+
 7d8:	0d 92       	st	X+, r0
 7da:	8a 95       	dec	r24
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <gameOver+0x1e>
					   0b10100101,
					   0b00000000,
					   0b00111100,
					   0b01000010,
					   0b01000010};
	drawArray(deadFace);
 7de:	ce 01       	movw	r24, r28
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	8c dc       	rcall	.-1768   	; 0xfc <drawArray>
	
	//Waits for reset
	while(1) {
		if(shouldReset) {
 7e4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
 7e8:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
 7ec:	00 97       	sbiw	r24, 0x00	; 0
			resetGame();
 7ee:	f1 f3       	breq	.-4      	; 0x7ec <gameOver+0x34>
 7f0:	ba dd       	rcall	.-1164   	; 0x366 <resetGame>
			wait(1000);
 7f2:	88 ee       	ldi	r24, 0xE8	; 232
 7f4:	93 e0       	ldi	r25, 0x03	; 3
 7f6:	ca dc       	rcall	.-1644   	; 0x18c <wait>
			break;
		}
	}
 7f8:	28 96       	adiw	r28, 0x08	; 8
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <startGame>:
	outputs:
	notes:			Starts the game by initing everything and call the animate method
	Version :    	1.0
	Author	:		Lars Moesman & Rick Verstraten
	*******************************************************************/		
	blockLocation.isAnimating = 1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <blockLocation+0x5>
 812:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <blockLocation+0x4>
	if ((display_array[0][i] != 1) && (display_array[0][i+1] != 1)) { 
 816:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <i>
 81a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <i+0x1>
 81e:	fc 01       	movw	r30, r24
 820:	ec 5f       	subi	r30, 0xFC	; 252
 822:	fe 4f       	sbci	r31, 0xFE	; 254
 824:	20 81       	ld	r18, Z
 826:	21 30       	cpi	r18, 0x01	; 1
 828:	d9 f0       	breq	.+54     	; 0x860 <startGame+0x56>
 82a:	fc 01       	movw	r30, r24
 82c:	ec 5f       	subi	r30, 0xFC	; 252
 82e:	fe 4f       	sbci	r31, 0xFE	; 254
 830:	21 81       	ldd	r18, Z+1	; 0x01
 832:	21 30       	cpi	r18, 0x01	; 1
 834:	a9 f0       	breq	.+42     	; 0x860 <startGame+0x56>
		//Init new block
		blockLocation.row = 0;
 836:	e4 e6       	ldi	r30, 0x64	; 100
 838:	f1 e0       	ldi	r31, 0x01	; 1
 83a:	11 82       	std	Z+1, r1	; 0x01
 83c:	10 82       	st	Z, r1
		blockLocation.column = i;
 83e:	93 83       	std	Z+3, r25	; 0x03
 840:	82 83       	std	Z+2, r24	; 0x02
		blockLocation.oneWidth = rand() % 2;
 842:	52 d1       	rcall	.+676    	; 0xae8 <rand>
 844:	81 70       	andi	r24, 0x01	; 1
 846:	90 78       	andi	r25, 0x80	; 128
 848:	99 23       	and	r25, r25
 84a:	24 f4       	brge	.+8      	; 0x854 <startGame+0x4a>
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	8e 6f       	ori	r24, 0xFE	; 254
 850:	9f 6f       	ori	r25, 0xFF	; 255
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <blockLocation+0x7>
 858:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <blockLocation+0x6>
		animateGame();
 85c:	00 df       	rcall	.-512    	; 0x65e <animateGame>
 85e:	04 c0       	rjmp	.+8      	; 0x868 <startGame+0x5e>
 860:	8f e0       	ldi	r24, 0x0F	; 15
	}else {
		//Game over
		showDigit(9999);
 862:	97 e2       	ldi	r25, 0x27	; 39
 864:	a4 d0       	rcall	.+328    	; 0x9ae <showDigit>
		gameOver();
 866:	a8 df       	rcall	.-176    	; 0x7b8 <gameOver>
		
	}
	i = rand() % 7;
 868:	3f d1       	rcall	.+638    	; 0xae8 <rand>
 86a:	67 e0       	ldi	r22, 0x07	; 7
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	ce d0       	rcall	.+412    	; 0xa0c <__divmodhi4>
 870:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <i+0x1>
 874:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <i>
 878:	08 95       	ret

0000087a <main>:
 87a:	8c e0       	ldi	r24, 0x0C	; 12
 87c:	81 bb       	out	0x11, r24	; 17
Version :    	DMK, Initial code
*******************************************************************/
{	
	DDRD = 0x0C;
	
	EICRA |= 0xF0;
 87e:	ea e6       	ldi	r30, 0x6A	; 106
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	80 6f       	ori	r24, 0xF0	; 240
 886:	80 83       	st	Z, r24
	EIMSK |= 0x0C;
 888:	89 b7       	in	r24, 0x39	; 57
 88a:	8c 60       	ori	r24, 0x0C	; 12
 88c:	89 bf       	out	0x39, r24	; 57
	
	sei();
 88e:	78 94       	sei
	
	srand(2344);
 890:	88 e2       	ldi	r24, 0x28	; 40
 892:	99 e0       	ldi	r25, 0x09	; 9
 894:	2c d1       	rcall	.+600    	; 0xaee <srand>
	displayInit();
 896:	76 dc       	rcall	.-1812   	; 0x184 <displayInit>
	sevenSegInit();
 898:	b4 d0       	rcall	.+360    	; 0xa02 <sevenSegInit>
 89a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <score>
	showDigit(score);
 89e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <score+0x1>
 8a2:	85 d0       	rcall	.+266    	; 0x9ae <showDigit>
	wait(500);
 8a4:	84 ef       	ldi	r24, 0xF4	; 244
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	71 dc       	rcall	.-1822   	; 0x18c <wait>
 8aa:	c4 e6       	ldi	r28, 0x64	; 100
	
	while(1==1) {
		if (blockLocation.isAnimating == 0) {
 8ac:	d1 e0       	ldi	r29, 0x01	; 1
 8ae:	8c 81       	ldd	r24, Y+4	; 0x04
 8b0:	9d 81       	ldd	r25, Y+5	; 0x05
 8b2:	00 97       	sbiw	r24, 0x00	; 0
 8b4:	f1 f7       	brne	.-4      	; 0x8b2 <main+0x38>
 8b6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
			if(shouldReset == 0) {
 8ba:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
 8be:	89 2b       	or	r24, r25
				startGame();
 8c0:	29 f4       	brne	.+10     	; 0x8cc <main+0x52>
				wait(500);
 8c2:	a3 df       	rcall	.-186    	; 0x80a <startGame>
 8c4:	84 ef       	ldi	r24, 0xF4	; 244
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	61 dc       	rcall	.-1854   	; 0x18c <wait>
			}else{
				resetGame();
 8ca:	f1 cf       	rjmp	.-30     	; 0x8ae <main+0x34>
 8cc:	4c dd       	rcall	.-1384   	; 0x366 <resetGame>
				wait(1000);
 8ce:	88 ee       	ldi	r24, 0xE8	; 232
 8d0:	93 e0       	ldi	r25, 0x03	; 3
 8d2:	5c dc       	rcall	.-1864   	; 0x18c <wait>
 8d4:	ec cf       	rjmp	.-40     	; 0x8ae <main+0x34>

000008d6 <wait_us>:
 8d6:	18 16       	cp	r1, r24
 8d8:	19 06       	cpc	r1, r25
 8da:	5c f4       	brge	.+22     	; 0x8f2 <wait_us+0x1c>
 8dc:	20 e0       	ldi	r18, 0x00	; 0
 8de:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8e0:	42 e0       	ldi	r20, 0x02	; 2
 8e2:	4a 95       	dec	r20
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <wait_us+0xc>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <wait_us+0x12>
 8e8:	2f 5f       	subi	r18, 0xFF	; 255
 8ea:	3f 4f       	sbci	r19, 0xFF	; 255
 8ec:	82 17       	cp	r24, r18
 8ee:	93 07       	cpc	r25, r19
 8f0:	b9 f7       	brne	.-18     	; 0x8e0 <wait_us+0xa>
 8f2:	08 95       	ret

000008f4 <sevenSegWriteByte>:
 8f4:	1f 93       	push	r17
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	18 2f       	mov	r17, r24
 8fc:	c8 e0       	ldi	r28, 0x08	; 8
 8fe:	d0 e0       	ldi	r29, 0x00	; 0
 900:	c1 98       	cbi	0x18, 1	; 24
 902:	82 e3       	ldi	r24, 0x32	; 50
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	e7 df       	rcall	.-50     	; 0x8d6 <wait_us>
 908:	10 ff       	sbrs	r17, 0
 90a:	02 c0       	rjmp	.+4      	; 0x910 <sevenSegWriteByte+0x1c>
 90c:	c0 9a       	sbi	0x18, 0	; 24
 90e:	01 c0       	rjmp	.+2      	; 0x912 <sevenSegWriteByte+0x1e>
 910:	c0 98       	cbi	0x18, 0	; 24
 912:	c1 9a       	sbi	0x18, 1	; 24
 914:	82 e3       	ldi	r24, 0x32	; 50
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	de df       	rcall	.-68     	; 0x8d6 <wait_us>
 91a:	16 95       	lsr	r17
 91c:	21 97       	sbiw	r28, 0x01	; 1
 91e:	81 f7       	brne	.-32     	; 0x900 <sevenSegWriteByte+0xc>
 920:	c1 98       	cbi	0x18, 1	; 24
 922:	b8 98       	cbi	0x17, 0	; 23
 924:	c0 9a       	sbi	0x18, 0	; 24
 926:	82 e3       	ldi	r24, 0x32	; 50
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	d5 df       	rcall	.-86     	; 0x8d6 <wait_us>
 92c:	86 b3       	in	r24, 0x16	; 22
 92e:	b8 9a       	sbi	0x17, 0	; 23
 930:	c0 98       	cbi	0x18, 0	; 24
 932:	82 e3       	ldi	r24, 0x32	; 50
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	cf df       	rcall	.-98     	; 0x8d6 <wait_us>
 938:	c1 9a       	sbi	0x18, 1	; 24
 93a:	82 e3       	ldi	r24, 0x32	; 50
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	cb df       	rcall	.-106    	; 0x8d6 <wait_us>
 940:	c1 98       	cbi	0x18, 1	; 24
 942:	88 9a       	sbi	0x11, 0	; 17
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	1f 91       	pop	r17
 94a:	08 95       	ret

0000094c <sevenSegStart>:
 94c:	c0 9a       	sbi	0x18, 0	; 24
 94e:	c1 9a       	sbi	0x18, 1	; 24
 950:	82 e3       	ldi	r24, 0x32	; 50
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	c0 df       	rcall	.-128    	; 0x8d6 <wait_us>
 956:	c0 98       	cbi	0x18, 0	; 24
 958:	08 95       	ret

0000095a <sevenSegStop>:
 95a:	c1 98       	cbi	0x18, 1	; 24
 95c:	82 e3       	ldi	r24, 0x32	; 50
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	ba df       	rcall	.-140    	; 0x8d6 <wait_us>
 962:	c0 98       	cbi	0x18, 0	; 24
 964:	82 e3       	ldi	r24, 0x32	; 50
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	b6 df       	rcall	.-148    	; 0x8d6 <wait_us>
 96a:	c1 9a       	sbi	0x18, 1	; 24
 96c:	82 e3       	ldi	r24, 0x32	; 50
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	b2 df       	rcall	.-156    	; 0x8d6 <wait_us>
 972:	c0 9a       	sbi	0x18, 0	; 24
 974:	08 95       	ret

00000976 <sevenSegCmd>:
 976:	cf 93       	push	r28
 978:	c8 2f       	mov	r28, r24
 97a:	e8 df       	rcall	.-48     	; 0x94c <sevenSegStart>
 97c:	8c 2f       	mov	r24, r28
 97e:	ba df       	rcall	.-140    	; 0x8f4 <sevenSegWriteByte>
 980:	ec df       	rcall	.-40     	; 0x95a <sevenSegStop>
 982:	cf 91       	pop	r28
 984:	08 95       	ret

00000986 <sevenSegConf>:
 986:	8b e8       	ldi	r24, 0x8B	; 139
 988:	f6 cf       	rjmp	.-20     	; 0x976 <sevenSegCmd>
 98a:	08 95       	ret

0000098c <sevenSegDisplaySegs>:
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	d8 2f       	mov	r29, r24
 992:	c6 2f       	mov	r28, r22
 994:	84 e4       	ldi	r24, 0x44	; 68
 996:	ef df       	rcall	.-34     	; 0x976 <sevenSegCmd>
 998:	d9 df       	rcall	.-78     	; 0x94c <sevenSegStart>
 99a:	8d 2f       	mov	r24, r29
 99c:	80 6c       	ori	r24, 0xC0	; 192
 99e:	aa df       	rcall	.-172    	; 0x8f4 <sevenSegWriteByte>
 9a0:	8c 2f       	mov	r24, r28
 9a2:	a8 df       	rcall	.-176    	; 0x8f4 <sevenSegWriteByte>
 9a4:	da df       	rcall	.-76     	; 0x95a <sevenSegStop>
 9a6:	ef df       	rcall	.-34     	; 0x986 <sevenSegConf>
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	08 95       	ret

000009ae <showDigit>:
 9ae:	ff 92       	push	r15
 9b0:	0f 93       	push	r16
 9b2:	1f 93       	push	r17
 9b4:	cf 93       	push	r28
 9b6:	df 93       	push	r29
 9b8:	c3 e0       	ldi	r28, 0x03	; 3
 9ba:	0a e0       	ldi	r16, 0x0A	; 10
 9bc:	10 e0       	ldi	r17, 0x00	; 0
 9be:	b8 01       	movw	r22, r16
 9c0:	25 d0       	rcall	.+74     	; 0xa0c <__divmodhi4>
 9c2:	f6 2e       	mov	r15, r22
 9c4:	d7 2f       	mov	r29, r23
 9c6:	fc 01       	movw	r30, r24
 9c8:	ff 27       	eor	r31, r31
 9ca:	ec 5a       	subi	r30, 0xAC	; 172
 9cc:	fe 4f       	sbci	r31, 0xFE	; 254
 9ce:	60 81       	ld	r22, Z
 9d0:	8c 2f       	mov	r24, r28
 9d2:	dc df       	rcall	.-72     	; 0x98c <sevenSegDisplaySegs>
 9d4:	8f 2d       	mov	r24, r15
 9d6:	9d 2f       	mov	r25, r29
 9d8:	c1 50       	subi	r28, 0x01	; 1
 9da:	88 f7       	brcc	.-30     	; 0x9be <showDigit+0x10>
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	0f 91       	pop	r16
 9e4:	ff 90       	pop	r15
 9e6:	08 95       	ret

000009e8 <sevenSegCleanup>:
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	cf df       	rcall	.-98     	; 0x98c <sevenSegDisplaySegs>
 9ee:	60 e0       	ldi	r22, 0x00	; 0
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	cc df       	rcall	.-104    	; 0x98c <sevenSegDisplaySegs>
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	c9 df       	rcall	.-110    	; 0x98c <sevenSegDisplaySegs>
 9fa:	60 e0       	ldi	r22, 0x00	; 0
 9fc:	83 e0       	ldi	r24, 0x03	; 3
 9fe:	c6 cf       	rjmp	.-116    	; 0x98c <sevenSegDisplaySegs>
 a00:	08 95       	ret

00000a02 <sevenSegInit>:
 a02:	83 e0       	ldi	r24, 0x03	; 3
 a04:	87 bb       	out	0x17, r24	; 23
 a06:	18 ba       	out	0x18, r1	; 24
 a08:	ef cf       	rjmp	.-34     	; 0x9e8 <sevenSegCleanup>
 a0a:	08 95       	ret

00000a0c <__divmodhi4>:
 a0c:	97 fb       	bst	r25, 7
 a0e:	07 2e       	mov	r0, r23
 a10:	16 f4       	brtc	.+4      	; 0xa16 <__divmodhi4+0xa>
 a12:	00 94       	com	r0
 a14:	06 d0       	rcall	.+12     	; 0xa22 <__divmodhi4_neg1>
 a16:	77 fd       	sbrc	r23, 7
 a18:	08 d0       	rcall	.+16     	; 0xa2a <__divmodhi4_neg2>
 a1a:	0b d0       	rcall	.+22     	; 0xa32 <__udivmodhi4>
 a1c:	07 fc       	sbrc	r0, 7
 a1e:	05 d0       	rcall	.+10     	; 0xa2a <__divmodhi4_neg2>
 a20:	3e f4       	brtc	.+14     	; 0xa30 <__divmodhi4_exit>

00000a22 <__divmodhi4_neg1>:
 a22:	90 95       	com	r25
 a24:	81 95       	neg	r24
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	08 95       	ret

00000a2a <__divmodhi4_neg2>:
 a2a:	70 95       	com	r23
 a2c:	61 95       	neg	r22
 a2e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a30 <__divmodhi4_exit>:
 a30:	08 95       	ret

00000a32 <__udivmodhi4>:
 a32:	aa 1b       	sub	r26, r26
 a34:	bb 1b       	sub	r27, r27
 a36:	51 e1       	ldi	r21, 0x11	; 17
 a38:	07 c0       	rjmp	.+14     	; 0xa48 <__udivmodhi4_ep>

00000a3a <__udivmodhi4_loop>:
 a3a:	aa 1f       	adc	r26, r26
 a3c:	bb 1f       	adc	r27, r27
 a3e:	a6 17       	cp	r26, r22
 a40:	b7 07       	cpc	r27, r23
 a42:	10 f0       	brcs	.+4      	; 0xa48 <__udivmodhi4_ep>
 a44:	a6 1b       	sub	r26, r22
 a46:	b7 0b       	sbc	r27, r23

00000a48 <__udivmodhi4_ep>:
 a48:	88 1f       	adc	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	5a 95       	dec	r21
 a4e:	a9 f7       	brne	.-22     	; 0xa3a <__udivmodhi4_loop>
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	bc 01       	movw	r22, r24
 a56:	cd 01       	movw	r24, r26
 a58:	08 95       	ret

00000a5a <do_rand>:
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	ec 01       	movw	r28, r24
 a70:	68 81       	ld	r22, Y
 a72:	79 81       	ldd	r23, Y+1	; 0x01
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	9b 81       	ldd	r25, Y+3	; 0x03
 a78:	61 15       	cp	r22, r1
 a7a:	71 05       	cpc	r23, r1
 a7c:	81 05       	cpc	r24, r1
 a7e:	91 05       	cpc	r25, r1
 a80:	21 f4       	brne	.+8      	; 0xa8a <do_rand+0x30>
 a82:	64 e2       	ldi	r22, 0x24	; 36
 a84:	79 ed       	ldi	r23, 0xD9	; 217
 a86:	8b e5       	ldi	r24, 0x5B	; 91
 a88:	97 e0       	ldi	r25, 0x07	; 7
 a8a:	2d e1       	ldi	r18, 0x1D	; 29
 a8c:	33 ef       	ldi	r19, 0xF3	; 243
 a8e:	41 e0       	ldi	r20, 0x01	; 1
 a90:	50 e0       	ldi	r21, 0x00	; 0
 a92:	38 d0       	rcall	.+112    	; 0xb04 <__divmodsi4>
 a94:	49 01       	movw	r8, r18
 a96:	5a 01       	movw	r10, r20
 a98:	9b 01       	movw	r18, r22
 a9a:	ac 01       	movw	r20, r24
 a9c:	a7 ea       	ldi	r26, 0xA7	; 167
 a9e:	b1 e4       	ldi	r27, 0x41	; 65
 aa0:	4d d0       	rcall	.+154    	; 0xb3c <__muluhisi3>
 aa2:	6b 01       	movw	r12, r22
 aa4:	7c 01       	movw	r14, r24
 aa6:	ac ee       	ldi	r26, 0xEC	; 236
 aa8:	b4 ef       	ldi	r27, 0xF4	; 244
 aaa:	a5 01       	movw	r20, r10
 aac:	94 01       	movw	r18, r8
 aae:	52 d0       	rcall	.+164    	; 0xb54 <__mulohisi3>
 ab0:	dc 01       	movw	r26, r24
 ab2:	cb 01       	movw	r24, r22
 ab4:	8c 0d       	add	r24, r12
 ab6:	9d 1d       	adc	r25, r13
 ab8:	ae 1d       	adc	r26, r14
 aba:	bf 1d       	adc	r27, r15
 abc:	b7 ff       	sbrs	r27, 7
 abe:	03 c0       	rjmp	.+6      	; 0xac6 <do_rand+0x6c>
 ac0:	01 97       	sbiw	r24, 0x01	; 1
 ac2:	a1 09       	sbc	r26, r1
 ac4:	b0 48       	sbci	r27, 0x80	; 128
 ac6:	88 83       	st	Y, r24
 ac8:	99 83       	std	Y+1, r25	; 0x01
 aca:	aa 83       	std	Y+2, r26	; 0x02
 acc:	bb 83       	std	Y+3, r27	; 0x03
 ace:	9f 77       	andi	r25, 0x7F	; 127
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	ff 90       	pop	r15
 ad6:	ef 90       	pop	r14
 ad8:	df 90       	pop	r13
 ada:	cf 90       	pop	r12
 adc:	bf 90       	pop	r11
 ade:	af 90       	pop	r10
 ae0:	9f 90       	pop	r9
 ae2:	8f 90       	pop	r8
 ae4:	08 95       	ret

00000ae6 <rand_r>:
 ae6:	b9 cf       	rjmp	.-142    	; 0xa5a <do_rand>

00000ae8 <rand>:
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	91 e0       	ldi	r25, 0x01	; 1
 aec:	b6 cf       	rjmp	.-148    	; 0xa5a <do_rand>

00000aee <srand>:
 aee:	a0 e0       	ldi	r26, 0x00	; 0
 af0:	b0 e0       	ldi	r27, 0x00	; 0
 af2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 af6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 afa:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 afe:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 b02:	08 95       	ret

00000b04 <__divmodsi4>:
 b04:	05 2e       	mov	r0, r21
 b06:	97 fb       	bst	r25, 7
 b08:	16 f4       	brtc	.+4      	; 0xb0e <__divmodsi4+0xa>
 b0a:	00 94       	com	r0
 b0c:	0f d0       	rcall	.+30     	; 0xb2c <__negsi2>
 b0e:	57 fd       	sbrc	r21, 7
 b10:	05 d0       	rcall	.+10     	; 0xb1c <__divmodsi4_neg2>
 b12:	24 d0       	rcall	.+72     	; 0xb5c <__udivmodsi4>
 b14:	07 fc       	sbrc	r0, 7
 b16:	02 d0       	rcall	.+4      	; 0xb1c <__divmodsi4_neg2>
 b18:	46 f4       	brtc	.+16     	; 0xb2a <__divmodsi4_exit>
 b1a:	08 c0       	rjmp	.+16     	; 0xb2c <__negsi2>

00000b1c <__divmodsi4_neg2>:
 b1c:	50 95       	com	r21
 b1e:	40 95       	com	r20
 b20:	30 95       	com	r19
 b22:	21 95       	neg	r18
 b24:	3f 4f       	sbci	r19, 0xFF	; 255
 b26:	4f 4f       	sbci	r20, 0xFF	; 255
 b28:	5f 4f       	sbci	r21, 0xFF	; 255

00000b2a <__divmodsi4_exit>:
 b2a:	08 95       	ret

00000b2c <__negsi2>:
 b2c:	90 95       	com	r25
 b2e:	80 95       	com	r24
 b30:	70 95       	com	r23
 b32:	61 95       	neg	r22
 b34:	7f 4f       	sbci	r23, 0xFF	; 255
 b36:	8f 4f       	sbci	r24, 0xFF	; 255
 b38:	9f 4f       	sbci	r25, 0xFF	; 255
 b3a:	08 95       	ret

00000b3c <__muluhisi3>:
 b3c:	31 d0       	rcall	.+98     	; 0xba0 <__umulhisi3>
 b3e:	a5 9f       	mul	r26, r21
 b40:	90 0d       	add	r25, r0
 b42:	b4 9f       	mul	r27, r20
 b44:	90 0d       	add	r25, r0
 b46:	a4 9f       	mul	r26, r20
 b48:	80 0d       	add	r24, r0
 b4a:	91 1d       	adc	r25, r1
 b4c:	11 24       	eor	r1, r1
 b4e:	08 95       	ret

00000b50 <__mulshisi3>:
 b50:	b7 ff       	sbrs	r27, 7
 b52:	f4 cf       	rjmp	.-24     	; 0xb3c <__muluhisi3>

00000b54 <__mulohisi3>:
 b54:	f3 df       	rcall	.-26     	; 0xb3c <__muluhisi3>
 b56:	82 1b       	sub	r24, r18
 b58:	93 0b       	sbc	r25, r19
 b5a:	08 95       	ret

00000b5c <__udivmodsi4>:
 b5c:	a1 e2       	ldi	r26, 0x21	; 33
 b5e:	1a 2e       	mov	r1, r26
 b60:	aa 1b       	sub	r26, r26
 b62:	bb 1b       	sub	r27, r27
 b64:	fd 01       	movw	r30, r26
 b66:	0d c0       	rjmp	.+26     	; 0xb82 <__udivmodsi4_ep>

00000b68 <__udivmodsi4_loop>:
 b68:	aa 1f       	adc	r26, r26
 b6a:	bb 1f       	adc	r27, r27
 b6c:	ee 1f       	adc	r30, r30
 b6e:	ff 1f       	adc	r31, r31
 b70:	a2 17       	cp	r26, r18
 b72:	b3 07       	cpc	r27, r19
 b74:	e4 07       	cpc	r30, r20
 b76:	f5 07       	cpc	r31, r21
 b78:	20 f0       	brcs	.+8      	; 0xb82 <__udivmodsi4_ep>
 b7a:	a2 1b       	sub	r26, r18
 b7c:	b3 0b       	sbc	r27, r19
 b7e:	e4 0b       	sbc	r30, r20
 b80:	f5 0b       	sbc	r31, r21

00000b82 <__udivmodsi4_ep>:
 b82:	66 1f       	adc	r22, r22
 b84:	77 1f       	adc	r23, r23
 b86:	88 1f       	adc	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	1a 94       	dec	r1
 b8c:	69 f7       	brne	.-38     	; 0xb68 <__udivmodsi4_loop>
 b8e:	60 95       	com	r22
 b90:	70 95       	com	r23
 b92:	80 95       	com	r24
 b94:	90 95       	com	r25
 b96:	9b 01       	movw	r18, r22
 b98:	ac 01       	movw	r20, r24
 b9a:	bd 01       	movw	r22, r26
 b9c:	cf 01       	movw	r24, r30
 b9e:	08 95       	ret

00000ba0 <__umulhisi3>:
 ba0:	a2 9f       	mul	r26, r18
 ba2:	b0 01       	movw	r22, r0
 ba4:	b3 9f       	mul	r27, r19
 ba6:	c0 01       	movw	r24, r0
 ba8:	a3 9f       	mul	r26, r19
 baa:	70 0d       	add	r23, r0
 bac:	81 1d       	adc	r24, r1
 bae:	11 24       	eor	r1, r1
 bb0:	91 1d       	adc	r25, r1
 bb2:	b2 9f       	mul	r27, r18
 bb4:	70 0d       	add	r23, r0
 bb6:	81 1d       	adc	r24, r1
 bb8:	11 24       	eor	r1, r1
 bba:	91 1d       	adc	r25, r1
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
